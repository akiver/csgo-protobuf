// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies
// @generated from protobuf file "cstrike15_gcmessages.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CEngineGotvSyncPacket } from "./engine_gcmessages";
/**
 * @generated from protobuf message GameServerPing
 */
export interface GameServerPing {
    /**
     * @generated from protobuf field: optional int32 ping = 2;
     */
    ping?: number;
    /**
     * @generated from protobuf field: optional uint32 ip = 3;
     */
    ip?: number;
    /**
     * @generated from protobuf field: optional uint32 instances = 5;
     */
    instances?: number;
}
/**
 * @generated from protobuf message DataCenterPing
 */
export interface DataCenterPing {
    /**
     * @generated from protobuf field: optional fixed32 data_center_id = 1;
     */
    dataCenterId?: number;
    /**
     * @generated from protobuf field: optional sint32 ping = 2;
     */
    ping?: number;
}
/**
 * @generated from protobuf message DetailedSearchStatistic
 */
export interface DetailedSearchStatistic {
    /**
     * @generated from protobuf field: optional uint32 game_type = 1;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: optional uint32 search_time_avg = 2;
     */
    searchTimeAvg?: number;
    /**
     * @generated from protobuf field: optional uint32 players_searching = 4;
     */
    playersSearching?: number;
}
/**
 * @generated from protobuf message TournamentPlayer
 */
export interface TournamentPlayer {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional string player_nick = 2;
     */
    playerNick?: string;
    /**
     * @generated from protobuf field: optional string player_name = 3;
     */
    playerName?: string;
    /**
     * @generated from protobuf field: optional uint32 player_dob = 4;
     */
    playerDob?: number;
    /**
     * @generated from protobuf field: optional string player_flag = 5;
     */
    playerFlag?: string;
    /**
     * @generated from protobuf field: optional string player_location = 6;
     */
    playerLocation?: string;
    /**
     * @generated from protobuf field: optional string player_desc = 7;
     */
    playerDesc?: string;
}
/**
 * @generated from protobuf message TournamentTeam
 */
export interface TournamentTeam {
    /**
     * @generated from protobuf field: optional int32 team_id = 1;
     */
    teamId?: number;
    /**
     * @generated from protobuf field: optional string team_tag = 2;
     */
    teamTag?: string;
    /**
     * @generated from protobuf field: optional string team_flag = 3;
     */
    teamFlag?: string;
    /**
     * @generated from protobuf field: optional string team_name = 4;
     */
    teamName?: string;
    /**
     * @generated from protobuf field: repeated TournamentPlayer players = 5;
     */
    players: TournamentPlayer[];
}
/**
 * @generated from protobuf message TournamentEvent
 */
export interface TournamentEvent {
    /**
     * @generated from protobuf field: optional int32 event_id = 1;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: optional string event_tag = 2;
     */
    eventTag?: string;
    /**
     * @generated from protobuf field: optional string event_name = 3;
     */
    eventName?: string;
    /**
     * @generated from protobuf field: optional uint32 event_time_start = 4;
     */
    eventTimeStart?: number;
    /**
     * @generated from protobuf field: optional uint32 event_time_end = 5;
     */
    eventTimeEnd?: number;
    /**
     * @generated from protobuf field: optional int32 event_public = 6;
     */
    eventPublic?: number;
    /**
     * @generated from protobuf field: optional int32 event_stage_id = 7;
     */
    eventStageId?: number;
    /**
     * @generated from protobuf field: optional string event_stage_name = 8;
     */
    eventStageName?: string;
    /**
     * @generated from protobuf field: optional uint32 active_section_id = 9;
     */
    activeSectionId?: number;
}
/**
 * @generated from protobuf message GlobalStatistics
 */
export interface GlobalStatistics {
    /**
     * @generated from protobuf field: optional uint32 players_online = 1;
     */
    playersOnline?: number;
    /**
     * @generated from protobuf field: optional uint32 servers_online = 2;
     */
    serversOnline?: number;
    /**
     * @generated from protobuf field: optional uint32 players_searching = 3;
     */
    playersSearching?: number;
    /**
     * @generated from protobuf field: optional uint32 servers_available = 4;
     */
    serversAvailable?: number;
    /**
     * @generated from protobuf field: optional uint32 ongoing_matches = 5;
     */
    ongoingMatches?: number;
    /**
     * @generated from protobuf field: optional uint32 search_time_avg = 6;
     */
    searchTimeAvg?: number;
    /**
     * @generated from protobuf field: repeated DetailedSearchStatistic search_statistics = 7;
     */
    searchStatistics: DetailedSearchStatistic[];
    /**
     * @generated from protobuf field: optional string main_post_url = 8;
     */
    mainPostUrl?: string;
    /**
     * @generated from protobuf field: optional uint32 required_appid_version = 9;
     */
    requiredAppidVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 pricesheet_version = 10;
     */
    pricesheetVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 twitch_streams_version = 11;
     */
    twitchStreamsVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 active_tournament_eventid = 12;
     */
    activeTournamentEventid?: number;
    /**
     * @generated from protobuf field: optional uint32 active_survey_id = 13;
     */
    activeSurveyId?: number;
    /**
     * @generated from protobuf field: optional uint32 rtime32_cur = 14;
     */
    rtime32Cur?: number;
    /**
     * @generated from protobuf field: optional uint32 rtime32_event_start = 15;
     */
    rtime32EventStart?: number;
}
/**
 * @generated from protobuf message OperationalStatisticDescription
 */
export interface OperationalStatisticDescription {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional uint32 idkey = 2;
     */
    idkey?: number;
}
/**
 * @generated from protobuf message OperationalStatisticElement
 */
export interface OperationalStatisticElement {
    /**
     * @generated from protobuf field: optional uint32 idkey = 1;
     */
    idkey?: number;
    /**
     * @generated from protobuf field: repeated int32 values = 2;
     */
    values: number[];
}
/**
 * @generated from protobuf message OperationalStatisticsPacket
 */
export interface OperationalStatisticsPacket {
    /**
     * @generated from protobuf field: optional int32 packetid = 1;
     */
    packetid?: number;
    /**
     * @generated from protobuf field: optional int32 mstimestamp = 2;
     */
    mstimestamp?: number;
    /**
     * @generated from protobuf field: repeated OperationalStatisticElement values = 3;
     */
    values: OperationalStatisticElement[];
}
/**
 * @generated from protobuf message PlayerRankingInfo
 */
export interface PlayerRankingInfo {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 rank_id = 2;
     */
    rankId?: number;
    /**
     * @generated from protobuf field: optional uint32 wins = 3;
     */
    wins?: number;
    /**
     * @generated from protobuf field: optional float rank_change = 4;
     */
    rankChange?: number;
    /**
     * @generated from protobuf field: optional uint32 rank_type_id = 6;
     */
    rankTypeId?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_control = 7;
     */
    tvControl?: number;
}
/**
 * @generated from protobuf message PlayerCommendationInfo
 */
export interface PlayerCommendationInfo {
    /**
     * @generated from protobuf field: optional uint32 cmd_friendly = 1;
     */
    cmdFriendly?: number;
    /**
     * @generated from protobuf field: optional uint32 cmd_teaching = 2;
     */
    cmdTeaching?: number;
    /**
     * @generated from protobuf field: optional uint32 cmd_leader = 4;
     */
    cmdLeader?: number;
}
/**
 * @generated from protobuf message PlayerMedalsInfo
 */
export interface PlayerMedalsInfo {
    /**
     * @generated from protobuf field: repeated uint32 display_items_defidx = 7;
     */
    displayItemsDefidx: number[];
    /**
     * @generated from protobuf field: optional uint32 featured_display_item_defidx = 8;
     */
    featuredDisplayItemDefidx?: number;
}
/**
 * @generated from protobuf message AccountActivity
 */
export interface AccountActivity {
    /**
     * @generated from protobuf field: optional uint32 activity = 1;
     */
    activity?: number;
    /**
     * @generated from protobuf field: optional uint32 mode = 2;
     */
    mode?: number;
    /**
     * @generated from protobuf field: optional uint32 map = 3;
     */
    map?: number;
    /**
     * @generated from protobuf field: optional uint64 matchid = 4;
     */
    matchid?: bigint;
}
/**
 * @generated from protobuf message TournamentMatchSetup
 */
export interface TournamentMatchSetup {
    /**
     * @generated from protobuf field: optional int32 event_id = 1;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_ct = 2;
     */
    teamIdCt?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_t = 3;
     */
    teamIdT?: number;
    /**
     * @generated from protobuf field: optional int32 event_stage_id = 4;
     */
    eventStageId?: number;
}
/**
 * @generated from protobuf message ServerHltvInfo
 */
export interface ServerHltvInfo {
    /**
     * @generated from protobuf field: optional uint32 tv_udp_port = 1;
     */
    tvUdpPort?: number;
    /**
     * @generated from protobuf field: optional uint64 tv_watch_key = 2;
     */
    tvWatchKey?: bigint;
    /**
     * @generated from protobuf field: optional uint32 tv_slots = 3;
     */
    tvSlots?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_clients = 4;
     */
    tvClients?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_proxies = 5;
     */
    tvProxies?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_time = 6;
     */
    tvTime?: number;
    /**
     * @generated from protobuf field: optional uint32 game_type = 8;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: optional string game_mapgroup = 9;
     */
    gameMapgroup?: string;
    /**
     * @generated from protobuf field: optional string game_map = 10;
     */
    gameMap?: string;
    /**
     * @generated from protobuf field: optional uint64 tv_master_steamid = 11;
     */
    tvMasterSteamid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 tv_local_slots = 12;
     */
    tvLocalSlots?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_local_clients = 13;
     */
    tvLocalClients?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_local_proxies = 14;
     */
    tvLocalProxies?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_relay_slots = 15;
     */
    tvRelaySlots?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_relay_clients = 16;
     */
    tvRelayClients?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_relay_proxies = 17;
     */
    tvRelayProxies?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_relay_address = 18;
     */
    tvRelayAddress?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_relay_port = 19;
     */
    tvRelayPort?: number;
    /**
     * @generated from protobuf field: optional uint64 tv_relay_steamid = 20;
     */
    tvRelaySteamid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 flags = 21;
     */
    flags?: number;
}
/**
 * @generated from protobuf message IpAddressMask
 */
export interface IpAddressMask {
    /**
     * @generated from protobuf field: optional uint32 a = 1;
     */
    a?: number;
    /**
     * @generated from protobuf field: optional uint32 b = 2;
     */
    b?: number;
    /**
     * @generated from protobuf field: optional uint32 c = 3;
     */
    c?: number;
    /**
     * @generated from protobuf field: optional uint32 d = 4;
     */
    d?: number;
    /**
     * @generated from protobuf field: optional uint32 bits = 5;
     */
    bits?: number;
    /**
     * @generated from protobuf field: optional uint32 token = 6;
     */
    token?: number;
}
/**
 * @generated from protobuf message CMsgCsgoSteamUserStatChange
 */
export interface CMsgCsgoSteamUserStatChange {
    /**
     * @generated from protobuf field: optional int32 ecsgosteamuserstat = 1;
     */
    ecsgosteamuserstat?: number;
    /**
     * @generated from protobuf field: optional int32 delta = 2;
     */
    delta?: number;
    /**
     * @generated from protobuf field: optional bool absolute = 3;
     */
    absolute?: boolean;
}
/**
 * @generated from protobuf message XpProgressData
 */
export interface XpProgressData {
    /**
     * @generated from protobuf field: optional uint32 xp_points = 1;
     */
    xpPoints?: number;
    /**
     * @generated from protobuf field: optional int32 xp_category = 2;
     */
    xpCategory?: number;
}
/**
 * @generated from protobuf message MatchEndItemUpdates
 */
export interface MatchEndItemUpdates {
    /**
     * @generated from protobuf field: optional uint64 item_id = 1;
     */
    itemId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 item_attr_defidx = 2;
     */
    itemAttrDefidx?: number;
    /**
     * @generated from protobuf field: optional uint32 item_attr_delta_value = 3;
     */
    itemAttrDeltaValue?: number;
}
/**
 * @generated from protobuf message ScoreLeaderboardData
 */
export interface ScoreLeaderboardData {
    /**
     * @generated from protobuf field: optional uint64 quest_id = 1;
     */
    questId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 score = 2;
     */
    score?: number;
    /**
     * @generated from protobuf field: repeated ScoreLeaderboardData.AccountEntries accountentries = 3;
     */
    accountentries: ScoreLeaderboardData_AccountEntries[];
    /**
     * @generated from protobuf field: repeated ScoreLeaderboardData.Entry matchentries = 5;
     */
    matchentries: ScoreLeaderboardData_Entry[];
}
/**
 * @generated from protobuf message ScoreLeaderboardData.Entry
 */
export interface ScoreLeaderboardData_Entry {
    /**
     * @generated from protobuf field: optional uint32 tag = 1;
     */
    tag?: number;
    /**
     * @generated from protobuf field: optional uint32 val = 2;
     */
    val?: number;
}
/**
 * @generated from protobuf message ScoreLeaderboardData.AccountEntries
 */
export interface ScoreLeaderboardData_AccountEntries {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: repeated ScoreLeaderboardData.Entry entries = 2;
     */
    entries: ScoreLeaderboardData_Entry[];
}
/**
 * @generated from protobuf message PlayerQuestData
 */
export interface PlayerQuestData {
    /**
     * @generated from protobuf field: optional uint32 quester_account_id = 1;
     */
    questerAccountId?: number;
    /**
     * @generated from protobuf field: repeated PlayerQuestData.QuestItemData quest_item_data = 2;
     */
    questItemData: PlayerQuestData_QuestItemData[];
    /**
     * @generated from protobuf field: repeated XpProgressData xp_progress_data = 3;
     */
    xpProgressData: XpProgressData[];
    /**
     * @generated from protobuf field: optional uint32 time_played = 4;
     */
    timePlayed?: number;
    /**
     * @generated from protobuf field: optional uint32 mm_game_mode = 5;
     */
    mmGameMode?: number;
    /**
     * @generated from protobuf field: repeated MatchEndItemUpdates item_updates = 6;
     */
    itemUpdates: MatchEndItemUpdates[];
    /**
     * @generated from protobuf field: optional bool operation_points_eligible = 7;
     */
    operationPointsEligible?: boolean;
    /**
     * @generated from protobuf field: repeated CMsgCsgoSteamUserStatChange userstatchanges = 8;
     */
    userstatchanges: CMsgCsgoSteamUserStatChange[];
}
/**
 * @generated from protobuf message PlayerQuestData.QuestItemData
 */
export interface PlayerQuestData_QuestItemData {
    /**
     * @generated from protobuf field: optional uint64 quest_id = 1;
     */
    questId?: bigint;
    /**
     * @generated from protobuf field: optional int32 quest_normal_points_earned = 2;
     */
    questNormalPointsEarned?: number;
    /**
     * @generated from protobuf field: optional int32 quest_bonus_points_earned = 3;
     */
    questBonusPointsEarned?: number;
}
/**
 * @generated from protobuf message DeepPlayerStatsEntry
 */
export interface DeepPlayerStatsEntry {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint64 match_id = 2;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 mm_game_mode = 3;
     */
    mmGameMode?: number;
    /**
     * @generated from protobuf field: optional uint32 mapid = 4;
     */
    mapid?: number;
    /**
     * @generated from protobuf field: optional bool b_starting_ct = 5;
     */
    bStartingCt?: boolean;
    /**
     * @generated from protobuf field: optional uint32 match_outcome = 6;
     */
    matchOutcome?: number;
    /**
     * @generated from protobuf field: optional uint32 rounds_won = 7;
     */
    roundsWon?: number;
    /**
     * @generated from protobuf field: optional uint32 rounds_lost = 8;
     */
    roundsLost?: number;
    /**
     * @generated from protobuf field: optional uint32 stat_score = 9;
     */
    statScore?: number;
    /**
     * @generated from protobuf field: optional uint32 stat_deaths = 12;
     */
    statDeaths?: number;
    /**
     * @generated from protobuf field: optional uint32 stat_mvps = 13;
     */
    statMvps?: number;
    /**
     * @generated from protobuf field: optional uint32 enemy_kills = 14;
     */
    enemyKills?: number;
    /**
     * @generated from protobuf field: optional uint32 enemy_headshots = 15;
     */
    enemyHeadshots?: number;
    /**
     * @generated from protobuf field: optional uint32 enemy_2ks = 16 [json_name = "enemy2ks"];
     */
    enemy2Ks?: number;
    /**
     * @generated from protobuf field: optional uint32 enemy_3ks = 17 [json_name = "enemy3ks"];
     */
    enemy3Ks?: number;
    /**
     * @generated from protobuf field: optional uint32 enemy_4ks = 18 [json_name = "enemy4ks"];
     */
    enemy4Ks?: number;
    /**
     * @generated from protobuf field: optional uint32 total_damage = 19;
     */
    totalDamage?: number;
    /**
     * @generated from protobuf field: optional uint32 engagements_entry_count = 23;
     */
    engagementsEntryCount?: number;
    /**
     * @generated from protobuf field: optional uint32 engagements_entry_wins = 24;
     */
    engagementsEntryWins?: number;
    /**
     * @generated from protobuf field: optional uint32 engagements_1v1_count = 25 [json_name = "engagements1v1Count"];
     */
    engagements1V1Count?: number;
    /**
     * @generated from protobuf field: optional uint32 engagements_1v1_wins = 26 [json_name = "engagements1v1Wins"];
     */
    engagements1V1Wins?: number;
    /**
     * @generated from protobuf field: optional uint32 engagements_1v2_count = 27 [json_name = "engagements1v2Count"];
     */
    engagements1V2Count?: number;
    /**
     * @generated from protobuf field: optional uint32 engagements_1v2_wins = 28 [json_name = "engagements1v2Wins"];
     */
    engagements1V2Wins?: number;
    /**
     * @generated from protobuf field: optional uint32 utility_count = 29;
     */
    utilityCount?: number;
    /**
     * @generated from protobuf field: optional uint32 utility_success = 30;
     */
    utilitySuccess?: number;
    /**
     * @generated from protobuf field: optional uint32 flash_count = 32;
     */
    flashCount?: number;
    /**
     * @generated from protobuf field: optional uint32 flash_success = 33;
     */
    flashSuccess?: number;
    /**
     * @generated from protobuf field: repeated uint32 mates = 34;
     */
    mates: number[];
}
/**
 * @generated from protobuf message DeepPlayerMatchEvent
 */
export interface DeepPlayerMatchEvent {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint64 match_id = 2;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 event_id = 3;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: optional uint32 event_type = 4;
     */
    eventType?: number;
    /**
     * @generated from protobuf field: optional bool b_playing_ct = 5;
     */
    bPlayingCt?: boolean;
    /**
     * @generated from protobuf field: optional int32 user_pos_x = 6;
     */
    userPosX?: number;
    /**
     * @generated from protobuf field: optional int32 user_pos_y = 7;
     */
    userPosY?: number;
    /**
     * @generated from protobuf field: optional int32 user_pos_z = 12;
     */
    userPosZ?: number;
    /**
     * @generated from protobuf field: optional uint32 user_defidx = 8;
     */
    userDefidx?: number;
    /**
     * @generated from protobuf field: optional int32 other_pos_x = 9;
     */
    otherPosX?: number;
    /**
     * @generated from protobuf field: optional int32 other_pos_y = 10;
     */
    otherPosY?: number;
    /**
     * @generated from protobuf field: optional int32 other_pos_z = 13;
     */
    otherPosZ?: number;
    /**
     * @generated from protobuf field: optional uint32 other_defidx = 11;
     */
    otherDefidx?: number;
    /**
     * @generated from protobuf field: optional int32 event_data = 14;
     */
    eventData?: number;
}
/**
 * @generated from protobuf message CMsgGC_ServerQuestUpdateData
 */
export interface CMsgGC_ServerQuestUpdateData {
    /**
     * @generated from protobuf field: repeated PlayerQuestData player_quest_data = 1;
     */
    playerQuestData: PlayerQuestData[];
    /**
     * @generated from protobuf field: optional bytes binary_data = 2;
     */
    binaryData?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 mm_game_mode = 3;
     */
    mmGameMode?: number;
    /**
     * @generated from protobuf field: optional ScoreLeaderboardData missionlbsdata = 4;
     */
    missionlbsdata?: ScoreLeaderboardData;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
 */
export interface CMsgGCCStrike15_v2_MatchmakingGCOperationalStats {
    /**
     * @generated from protobuf field: optional int32 packetid = 1;
     */
    packetid?: number;
    /**
     * @generated from protobuf field: repeated OperationalStatisticDescription namekeys = 2;
     */
    namekeys: OperationalStatisticDescription[];
    /**
     * @generated from protobuf field: repeated OperationalStatisticsPacket packets = 3;
     */
    packets: OperationalStatisticsPacket[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm {
    /**
     * @generated from protobuf field: optional uint32 token = 1;
     */
    token?: number;
    /**
     * @generated from protobuf field: optional uint32 stamp = 2;
     */
    stamp?: number;
    /**
     * @generated from protobuf field: optional uint64 exchange = 3;
     */
    exchange?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ServerReservationUpdate
 */
export interface CMsgGCCStrike15_v2_GC2ServerReservationUpdate {
    /**
     * @generated from protobuf field: optional uint32 viewers_external_total = 1;
     */
    viewersExternalTotal?: number;
    /**
     * @generated from protobuf field: optional uint32 viewers_external_steam = 2;
     */
    viewersExternalSteam?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingStart
 */
export interface CMsgGCCStrike15_v2_MatchmakingStart {
    /**
     * @generated from protobuf field: repeated uint32 account_ids = 1;
     */
    accountIds: number[];
    /**
     * @generated from protobuf field: optional uint32 game_type = 2;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: optional string ticket_data = 3;
     */
    ticketData?: string;
    /**
     * @generated from protobuf field: optional uint32 client_version = 4;
     */
    clientVersion?: number;
    /**
     * @generated from protobuf field: optional TournamentMatchSetup tournament_match = 5;
     */
    tournamentMatch?: TournamentMatchSetup;
    /**
     * @generated from protobuf field: optional bool prime_only = 6;
     */
    primeOnly?: boolean;
    /**
     * @generated from protobuf field: optional uint32 tv_control = 7;
     */
    tvControl?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingStop
 */
export interface CMsgGCCStrike15_v2_MatchmakingStop {
    /**
     * @generated from protobuf field: optional int32 abandon = 1;
     */
    abandon?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
 */
export interface CMsgGCCStrike15_v2_MatchmakingClient2ServerPing {
    /**
     * @generated from protobuf field: repeated GameServerPing gameserverpings = 1;
     */
    gameserverpings: GameServerPing[];
    /**
     * @generated from protobuf field: optional int32 offset_index = 2;
     */
    offsetIndex?: number;
    /**
     * @generated from protobuf field: optional int32 final_batch = 3;
     */
    finalBatch?: number;
    /**
     * @generated from protobuf field: repeated DataCenterPing data_center_pings = 4;
     */
    dataCenterPings: DataCenterPing[];
    /**
     * @generated from protobuf field: optional uint32 max_ping = 5;
     */
    maxPing?: number;
    /**
     * @generated from protobuf field: optional fixed32 test_token = 6;
     */
    testToken?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate {
    /**
     * @generated from protobuf field: optional int32 matchmaking = 1;
     */
    matchmaking?: number;
    /**
     * @generated from protobuf field: repeated uint32 waiting_account_id_sessions = 2;
     */
    waitingAccountIdSessions: number[];
    /**
     * @generated from protobuf field: optional string error = 3;
     */
    error?: string;
    /**
     * @generated from protobuf field: repeated uint32 ongoingmatch_account_id_sessions = 6;
     */
    ongoingmatchAccountIdSessions: number[];
    /**
     * @generated from protobuf field: optional GlobalStatistics global_stats = 7;
     */
    globalStats?: GlobalStatistics;
    /**
     * @generated from protobuf field: repeated uint32 failping_account_id_sessions = 8;
     */
    failpingAccountIdSessions: number[];
    /**
     * @generated from protobuf field: repeated uint32 penalty_account_id_sessions = 9;
     */
    penaltyAccountIdSessions: number[];
    /**
     * @generated from protobuf field: repeated uint32 failready_account_id_sessions = 10;
     */
    failreadyAccountIdSessions: number[];
    /**
     * @generated from protobuf field: repeated uint32 vacbanned_account_id_sessions = 11;
     */
    vacbannedAccountIdSessions: number[];
    /**
     * @generated from protobuf field: optional IpAddressMask server_ipaddress_mask = 12;
     */
    serverIpaddressMask?: IpAddressMask;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
     */
    notes: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note[];
    /**
     * @generated from protobuf field: repeated uint32 penalty_account_id_sessions_green = 14;
     */
    penaltyAccountIdSessionsGreen: number[];
    /**
     * @generated from protobuf field: repeated uint32 insufficientlevel_sessions = 15;
     */
    insufficientlevelSessions: number[];
    /**
     * @generated from protobuf field: repeated uint32 vsncheck_account_id_sessions = 16;
     */
    vsncheckAccountIdSessions: number[];
    /**
     * @generated from protobuf field: repeated uint32 launcher_mismatch_sessions = 17;
     */
    launcherMismatchSessions: number[];
    /**
     * @generated from protobuf field: repeated uint32 insecure_account_id_sessions = 18;
     */
    insecureAccountIdSessions: number[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note {
    /**
     * @generated from protobuf field: optional int32 type = 1;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional int32 region_id = 2;
     */
    regionId?: number;
    /**
     * @generated from protobuf field: optional float region_r = 3;
     */
    regionR?: number;
    /**
     * @generated from protobuf field: optional float distance = 4;
     */
    distance?: number;
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentMatchDraft
 */
export interface CDataGCCStrike15_v2_TournamentMatchDraft {
    /**
     * @generated from protobuf field: optional int32 event_id = 1;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: optional int32 event_stage_id = 2;
     */
    eventStageId?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_0 = 3;
     */
    teamId0?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_1 = 4;
     */
    teamId1?: number;
    /**
     * @generated from protobuf field: optional int32 maps_count = 5;
     */
    mapsCount?: number;
    /**
     * @generated from protobuf field: optional int32 maps_current = 6;
     */
    mapsCurrent?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_start = 7;
     */
    teamIdStart?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_veto1 = 8;
     */
    teamIdVeto1?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_pickn = 9;
     */
    teamIdPickn?: number;
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
     */
    drafts: CDataGCCStrike15_v2_TournamentMatchDraft_Entry[];
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentMatchDraft.Entry
 */
export interface CDataGCCStrike15_v2_TournamentMatchDraft_Entry {
    /**
     * @generated from protobuf field: optional int32 mapid = 1;
     */
    mapid?: number;
    /**
     * @generated from protobuf field: optional int32 team_id_ct = 2;
     */
    teamIdCt?: number;
}
/**
 * @generated from protobuf message CPreMatchInfoData
 */
export interface CPreMatchInfoData {
    /**
     * @generated from protobuf field: optional int32 predictions_pct = 1;
     */
    predictionsPct?: number;
    /**
     * @generated from protobuf field: optional CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
     */
    draft?: CDataGCCStrike15_v2_TournamentMatchDraft;
    /**
     * @generated from protobuf field: repeated CPreMatchInfoData.TeamStats stats = 5;
     */
    stats: CPreMatchInfoData_TeamStats[];
    /**
     * @generated from protobuf field: repeated int32 wins = 6;
     */
    wins: number[];
}
/**
 * @generated from protobuf message CPreMatchInfoData.TeamStats
 */
export interface CPreMatchInfoData_TeamStats {
    /**
     * @generated from protobuf field: optional int32 match_info_idxtxt = 1;
     */
    matchInfoIdxtxt?: number;
    /**
     * @generated from protobuf field: optional string match_info_txt = 2;
     */
    matchInfoTxt?: string;
    /**
     * @generated from protobuf field: repeated string match_info_teams = 3;
     */
    matchInfoTeams: string[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve {
    /**
     * @generated from protobuf field: repeated uint32 account_ids = 1;
     */
    accountIds: number[];
    /**
     * @generated from protobuf field: optional uint32 game_type = 2;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: optional uint64 match_id = 3;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 server_version = 4;
     */
    serverVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 flags = 18;
     */
    flags?: number;
    /**
     * @generated from protobuf field: repeated PlayerRankingInfo rankings = 5;
     */
    rankings: PlayerRankingInfo[];
    /**
     * @generated from protobuf field: optional uint64 encryption_key = 6;
     */
    encryptionKey?: bigint;
    /**
     * @generated from protobuf field: optional uint64 encryption_key_pub = 7;
     */
    encryptionKeyPub?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 party_ids = 8;
     */
    partyIds: number[];
    /**
     * @generated from protobuf field: repeated IpAddressMask whitelist = 9;
     */
    whitelist: IpAddressMask[];
    /**
     * @generated from protobuf field: optional uint64 tv_master_steamid = 10;
     */
    tvMasterSteamid?: bigint;
    /**
     * @generated from protobuf field: optional TournamentEvent tournament_event = 11;
     */
    tournamentEvent?: TournamentEvent;
    /**
     * @generated from protobuf field: repeated TournamentTeam tournament_teams = 12;
     */
    tournamentTeams: TournamentTeam[];
    /**
     * @generated from protobuf field: repeated uint32 tournament_casters_account_ids = 13;
     */
    tournamentCastersAccountIds: number[];
    /**
     * @generated from protobuf field: optional uint64 tv_relay_steamid = 14;
     */
    tvRelaySteamid?: bigint;
    /**
     * @generated from protobuf field: optional CPreMatchInfoData pre_match_data = 15;
     */
    preMatchData?: CPreMatchInfoData;
    /**
     * @generated from protobuf field: optional uint32 rtime32_event_start = 16;
     */
    rtime32EventStart?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_control = 17;
     */
    tvControl?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
 */
export interface CMsgGCCStrike15_v2_MatchmakingServerReservationResponse {
    /**
     * @generated from protobuf field: optional uint64 reservationid = 1;
     */
    reservationid?: bigint;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
     */
    reservation?: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
    /**
     * @generated from protobuf field: optional string map = 3;
     */
    map?: string;
    /**
     * @generated from protobuf field: optional uint64 gc_reservation_sent = 4;
     */
    gcReservationSent?: bigint;
    /**
     * @generated from protobuf field: optional uint32 server_version = 5;
     */
    serverVersion?: number;
    /**
     * @generated from protobuf field: optional ServerHltvInfo tv_info = 6;
     */
    tvInfo?: ServerHltvInfo;
    /**
     * @generated from protobuf field: repeated uint32 reward_player_accounts = 7;
     */
    rewardPlayerAccounts: number[];
    /**
     * @generated from protobuf field: repeated uint32 idle_player_accounts = 8;
     */
    idlePlayerAccounts: number[];
    /**
     * @generated from protobuf field: optional uint32 reward_item_attr_def_idx = 9;
     */
    rewardItemAttrDefIdx?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_item_attr_value = 10;
     */
    rewardItemAttrValue?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_item_attr_reward_idx = 11;
     */
    rewardItemAttrRewardIdx?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_drop_list = 12;
     */
    rewardDropList?: number;
    /**
     * @generated from protobuf field: optional string tournament_tag = 13;
     */
    tournamentTag?: string;
    /**
     * @generated from protobuf field: optional uint32 legacy_steamdatagram_port = 14;
     */
    legacySteamdatagramPort?: number;
    /**
     * @generated from protobuf field: optional uint32 steamdatagram_routing = 17;
     */
    steamdatagramRouting?: number;
    /**
     * @generated from protobuf field: optional fixed32 test_token = 15;
     */
    testToken?: number;
    /**
     * @generated from protobuf field: optional uint32 flags = 16;
     */
    flags?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve {
    /**
     * @generated from protobuf field: optional uint64 serverid = 1;
     */
    serverid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 direct_udp_ip = 2;
     */
    directUdpIp?: number;
    /**
     * @generated from protobuf field: optional uint32 direct_udp_port = 3;
     */
    directUdpPort?: number;
    /**
     * @generated from protobuf field: optional uint64 reservationid = 4;
     */
    reservationid?: bigint;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
     */
    reservation?: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
    /**
     * @generated from protobuf field: optional string map = 6;
     */
    map?: string;
    /**
     * @generated from protobuf field: optional string server_address = 7;
     */
    serverAddress?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingServerRoundStats
 */
export interface CMsgGCCStrike15_v2_MatchmakingServerRoundStats {
    /**
     * @generated from protobuf field: optional uint64 reservationid = 1;
     */
    reservationid?: bigint;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
     */
    reservation?: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
    /**
     * @generated from protobuf field: optional string map = 3;
     */
    map?: string;
    /**
     * @generated from protobuf field: optional int32 round = 4;
     */
    round?: number;
    /**
     * @generated from protobuf field: repeated int32 kills = 5;
     */
    kills: number[];
    /**
     * @generated from protobuf field: repeated int32 assists = 6;
     */
    assists: number[];
    /**
     * @generated from protobuf field: repeated int32 deaths = 7;
     */
    deaths: number[];
    /**
     * @generated from protobuf field: repeated int32 scores = 8;
     */
    scores: number[];
    /**
     * @generated from protobuf field: repeated int32 pings = 9;
     */
    pings: number[];
    /**
     * @generated from protobuf field: optional int32 round_result = 10;
     */
    roundResult?: number;
    /**
     * @generated from protobuf field: optional int32 match_result = 11;
     */
    matchResult?: number;
    /**
     * @generated from protobuf field: repeated int32 team_scores = 12;
     */
    teamScores: number[];
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
     */
    confirm?: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
    /**
     * @generated from protobuf field: optional int32 reservation_stage = 14;
     */
    reservationStage?: number;
    /**
     * @generated from protobuf field: optional int32 match_duration = 15;
     */
    matchDuration?: number;
    /**
     * @generated from protobuf field: repeated int32 enemy_kills = 16;
     */
    enemyKills: number[];
    /**
     * @generated from protobuf field: repeated int32 enemy_headshots = 17;
     */
    enemyHeadshots: number[];
    /**
     * @generated from protobuf field: repeated int32 enemy_3ks = 18 [json_name = "enemy3ks"];
     */
    enemy3Ks: number[];
    /**
     * @generated from protobuf field: repeated int32 enemy_4ks = 19 [json_name = "enemy4ks"];
     */
    enemy4Ks: number[];
    /**
     * @generated from protobuf field: repeated int32 enemy_5ks = 20 [json_name = "enemy5ks"];
     */
    enemy5Ks: number[];
    /**
     * @generated from protobuf field: repeated int32 mvps = 21;
     */
    mvps: number[];
    /**
     * @generated from protobuf field: optional uint32 spectators_count = 22;
     */
    spectatorsCount?: number;
    /**
     * @generated from protobuf field: optional uint32 spectators_count_tv = 23;
     */
    spectatorsCountTv?: number;
    /**
     * @generated from protobuf field: optional uint32 spectators_count_lnk = 24;
     */
    spectatorsCountLnk?: number;
    /**
     * @generated from protobuf field: repeated int32 enemy_kills_agg = 25;
     */
    enemyKillsAgg: number[];
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
     */
    dropInfo?: CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo;
    /**
     * @generated from protobuf field: optional bool b_switched_teams = 27;
     */
    bSwitchedTeams?: boolean;
    /**
     * @generated from protobuf field: repeated int32 enemy_2ks = 28 [json_name = "enemy2ks"];
     */
    enemy2Ks: number[];
    /**
     * @generated from protobuf field: repeated int32 player_spawned = 29;
     */
    playerSpawned: number[];
    /**
     * @generated from protobuf field: repeated int32 team_spawn_count = 30;
     */
    teamSpawnCount: number[];
    /**
     * @generated from protobuf field: optional uint32 max_rounds = 31;
     */
    maxRounds?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
 */
export interface CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo {
    /**
     * @generated from protobuf field: optional uint32 account_mvp = 1;
     */
    accountMvp?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingClient2GCHello
 */
export interface CMsgGCCStrike15_v2_MatchmakingClient2GCHello {
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ClientHello {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
     */
    ongoingmatch?: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
    /**
     * @generated from protobuf field: optional GlobalStatistics global_stats = 3;
     */
    globalStats?: GlobalStatistics;
    /**
     * @generated from protobuf field: optional uint32 penalty_seconds = 4;
     */
    penaltySeconds?: number;
    /**
     * @generated from protobuf field: optional uint32 penalty_reason = 5;
     */
    penaltyReason?: number;
    /**
     * @generated from protobuf field: optional int32 vac_banned = 6;
     */
    vacBanned?: number;
    /**
     * @generated from protobuf field: optional PlayerRankingInfo ranking = 7;
     */
    ranking?: PlayerRankingInfo;
    /**
     * @generated from protobuf field: optional PlayerCommendationInfo commendation = 8;
     */
    commendation?: PlayerCommendationInfo;
    /**
     * @generated from protobuf field: optional PlayerMedalsInfo medals = 9;
     */
    medals?: PlayerMedalsInfo;
    /**
     * @generated from protobuf field: optional TournamentEvent my_current_event = 10;
     */
    myCurrentEvent?: TournamentEvent;
    /**
     * @generated from protobuf field: repeated TournamentTeam my_current_event_teams = 11;
     */
    myCurrentEventTeams: TournamentTeam[];
    /**
     * @generated from protobuf field: optional TournamentTeam my_current_team = 12;
     */
    myCurrentTeam?: TournamentTeam;
    /**
     * @generated from protobuf field: repeated TournamentEvent my_current_event_stages = 13;
     */
    myCurrentEventStages: TournamentEvent[];
    /**
     * @generated from protobuf field: optional uint32 survey_vote = 14;
     */
    surveyVote?: number;
    /**
     * @generated from protobuf field: optional AccountActivity activity = 15;
     */
    activity?: AccountActivity;
    /**
     * @generated from protobuf field: optional int32 player_level = 17;
     */
    playerLevel?: number;
    /**
     * @generated from protobuf field: optional int32 player_cur_xp = 18;
     */
    playerCurXp?: number;
    /**
     * @generated from protobuf field: optional int32 player_xp_bonus_flags = 19;
     */
    playerXpBonusFlags?: number;
    /**
     * @generated from protobuf field: repeated PlayerRankingInfo rankings = 20;
     */
    rankings: PlayerRankingInfo[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_AccountPrivacySettings
 */
export interface CMsgGCCStrike15_v2_AccountPrivacySettings {
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
     */
    settings: CMsgGCCStrike15_v2_AccountPrivacySettings_Setting[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
 */
export interface CMsgGCCStrike15_v2_AccountPrivacySettings_Setting {
    /**
     * @generated from protobuf field: optional uint32 setting_type = 1;
     */
    settingType?: number;
    /**
     * @generated from protobuf field: optional uint32 setting_value = 2;
     */
    settingValue?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
 */
export interface CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
     */
    abandonedMatch?: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
    /**
     * @generated from protobuf field: optional uint32 penalty_seconds = 3;
     */
    penaltySeconds?: number;
    /**
     * @generated from protobuf field: optional uint32 penalty_reason = 4;
     */
    penaltyReason?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientGCRankUpdate
 */
export interface CMsgGCCStrike15_v2_ClientGCRankUpdate {
    /**
     * @generated from protobuf field: repeated PlayerRankingInfo rankings = 1;
     */
    rankings: PlayerRankingInfo[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
 */
export interface CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate {
    /**
     * @generated from protobuf field: optional string main_post_url = 1;
     */
    mainPostUrl?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
 */
export interface CMsgGCCStrike15_v2_ServerNotificationForUserPenalty {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 reason = 2;
     */
    reason?: number;
    /**
     * @generated from protobuf field: optional uint32 seconds = 3;
     */
    seconds?: number;
    /**
     * @generated from protobuf field: optional bool communication_cooldown = 4;
     */
    communicationCooldown?: boolean;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientReportPlayer
 */
export interface CMsgGCCStrike15_v2_ClientReportPlayer {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_aimbot = 2;
     */
    rptAimbot?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_wallhack = 3;
     */
    rptWallhack?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_speedhack = 4;
     */
    rptSpeedhack?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_teamharm = 5;
     */
    rptTeamharm?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_textabuse = 6;
     */
    rptTextabuse?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_voiceabuse = 7;
     */
    rptVoiceabuse?: number;
    /**
     * @generated from protobuf field: optional uint64 match_id = 8;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional bool report_from_demo = 9;
     */
    reportFromDemo?: boolean;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientCommendPlayer
 */
export interface CMsgGCCStrike15_v2_ClientCommendPlayer {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint64 match_id = 8;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional PlayerCommendationInfo commendation = 9;
     */
    commendation?: PlayerCommendationInfo;
    /**
     * @generated from protobuf field: optional uint32 tokens = 10;
     */
    tokens?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientReportServer
 */
export interface CMsgGCCStrike15_v2_ClientReportServer {
    /**
     * @generated from protobuf field: optional uint32 rpt_poorperf = 1;
     */
    rptPoorperf?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_abusivemodels = 2;
     */
    rptAbusivemodels?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_badmotd = 3;
     */
    rptBadmotd?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_listingabuse = 4;
     */
    rptListingabuse?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_inventoryabuse = 5;
     */
    rptInventoryabuse?: number;
    /**
     * @generated from protobuf field: optional uint64 match_id = 8;
     */
    matchId?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientReportResponse
 */
export interface CMsgGCCStrike15_v2_ClientReportResponse {
    /**
     * @generated from protobuf field: optional uint64 confirmation_id = 1;
     */
    confirmationId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 account_id = 2;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 server_ip = 3;
     */
    serverIp?: number;
    /**
     * @generated from protobuf field: optional uint32 response_type = 4;
     */
    responseType?: number;
    /**
     * @generated from protobuf field: optional uint32 response_result = 5;
     */
    responseResult?: number;
    /**
     * @generated from protobuf field: optional uint32 tokens = 6;
     */
    tokens?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
 */
export interface CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends {
    /**
     * @generated from protobuf field: optional uint32 request_id = 1;
     */
    requestId?: number;
    /**
     * @generated from protobuf field: repeated uint32 account_ids = 2;
     */
    accountIds: number[];
    /**
     * @generated from protobuf field: optional uint64 serverid = 3;
     */
    serverid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 matchid = 4;
     */
    matchid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 client_launcher = 5;
     */
    clientLauncher?: number;
    /**
     * @generated from protobuf field: repeated DataCenterPing data_center_pings = 6;
     */
    dataCenterPings: DataCenterPing[];
}
/**
 * @generated from protobuf message WatchableMatchInfo
 */
export interface WatchableMatchInfo {
    /**
     * @generated from protobuf field: optional uint32 server_ip = 1;
     */
    serverIp?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_port = 2;
     */
    tvPort?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_spectators = 3;
     */
    tvSpectators?: number;
    /**
     * @generated from protobuf field: optional uint32 tv_time = 4;
     */
    tvTime?: number;
    /**
     * @generated from protobuf field: optional bytes tv_watch_password = 5;
     */
    tvWatchPassword?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint64 cl_decryptdata_key = 6;
     */
    clDecryptdataKey?: bigint;
    /**
     * @generated from protobuf field: optional uint64 cl_decryptdata_key_pub = 7;
     */
    clDecryptdataKeyPub?: bigint;
    /**
     * @generated from protobuf field: optional uint32 game_type = 8;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: optional string game_mapgroup = 9;
     */
    gameMapgroup?: string;
    /**
     * @generated from protobuf field: optional string game_map = 10;
     */
    gameMap?: string;
    /**
     * @generated from protobuf field: optional uint64 server_id = 11;
     */
    serverId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 match_id = 12;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional uint64 reservation_id = 13;
     */
    reservationId?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientRequestJoinFriendData
 */
export interface CMsgGCCStrike15_v2_ClientRequestJoinFriendData {
    /**
     * @generated from protobuf field: optional uint32 version = 1;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 account_id = 2;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 join_token = 3;
     */
    joinToken?: number;
    /**
     * @generated from protobuf field: optional uint32 join_ipp = 4;
     */
    joinIpp?: number;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
     */
    res?: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
    /**
     * @generated from protobuf field: optional string errormsg = 6;
     */
    errormsg?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientRequestJoinServerData
 */
export interface CMsgGCCStrike15_v2_ClientRequestJoinServerData {
    /**
     * @generated from protobuf field: optional uint32 version = 1;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 account_id = 2;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint64 serverid = 3;
     */
    serverid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 server_ip = 4;
     */
    serverIp?: number;
    /**
     * @generated from protobuf field: optional uint32 server_port = 5;
     */
    serverPort?: number;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
     */
    res?: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
    /**
     * @generated from protobuf field: optional string errormsg = 7;
     */
    errormsg?: string;
}
/**
 * @generated from protobuf message CMsgGCCstrike15_v2_ClientRequestNewMission
 */
export interface CMsgGCCstrike15_v2_ClientRequestNewMission {
    /**
     * @generated from protobuf field: optional uint32 mission_id = 2;
     */
    missionId?: number;
    /**
     * @generated from protobuf field: optional uint32 campaign_id = 3;
     */
    campaignId?: number;
}
/**
 * @generated from protobuf message CMsgGCCstrike15_v2_ClientRedeemMissionReward
 */
export interface CMsgGCCstrike15_v2_ClientRedeemMissionReward {
    /**
     * @generated from protobuf field: optional uint32 campaign_id = 1;
     */
    campaignId?: number;
    /**
     * @generated from protobuf field: optional uint32 redeem_id = 2;
     */
    redeemId?: number;
    /**
     * @generated from protobuf field: optional uint32 redeemable_balance = 3;
     */
    redeemableBalance?: number;
    /**
     * @generated from protobuf field: optional uint32 expected_cost = 4;
     */
    expectedCost?: number;
}
/**
 * @generated from protobuf message CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
 */
export interface CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded {
    /**
     * @generated from protobuf field: repeated XpProgressData xp_progress_data = 1;
     */
    xpProgressData: XpProgressData[];
    /**
     * @generated from protobuf field: optional uint32 account_id = 2;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 current_xp = 3;
     */
    currentXp?: number;
    /**
     * @generated from protobuf field: optional uint32 current_level = 4;
     */
    currentLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 upgraded_defidx = 5;
     */
    upgradedDefidx?: number;
    /**
     * @generated from protobuf field: optional uint32 operation_points_awarded = 6;
     */
    operationPointsAwarded?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_ClientDeepStats
 */
export interface CMsgGCCStrike15_ClientDeepStats {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
     */
    range?: CMsgGCCStrike15_ClientDeepStats_DeepStatsRange;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
     */
    matches: CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_ClientDeepStats.DeepStatsRange
 */
export interface CMsgGCCStrike15_ClientDeepStats_DeepStatsRange {
    /**
     * @generated from protobuf field: optional uint32 begin = 1;
     */
    begin?: number;
    /**
     * @generated from protobuf field: optional uint32 end = 2;
     */
    end?: number;
    /**
     * @generated from protobuf field: optional bool frozen = 3;
     */
    frozen?: boolean;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch
 */
export interface CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch {
    /**
     * @generated from protobuf field: optional DeepPlayerStatsEntry player = 1;
     */
    player?: DeepPlayerStatsEntry;
    /**
     * @generated from protobuf field: repeated DeepPlayerMatchEvent events = 2;
     */
    events: DeepPlayerMatchEvent[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_WatchInfoUsers
 */
export interface CMsgGCCStrike15_v2_WatchInfoUsers {
    /**
     * @generated from protobuf field: optional uint32 request_id = 1;
     */
    requestId?: number;
    /**
     * @generated from protobuf field: repeated uint32 account_ids = 2;
     */
    accountIds: number[];
    /**
     * @generated from protobuf field: repeated WatchableMatchInfo watchable_match_infos = 3;
     */
    watchableMatchInfos: WatchableMatchInfo[];
    /**
     * @generated from protobuf field: optional uint32 extended_timeout = 5;
     */
    extendedTimeout?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientRequestPlayersProfile
 */
export interface CMsgGCCStrike15_v2_ClientRequestPlayersProfile {
    /**
     * @generated from protobuf field: optional uint32 request_id__deprecated = 1;
     */
    requestIdDeprecated?: number;
    /**
     * @generated from protobuf field: repeated uint32 account_ids__deprecated = 2;
     */
    accountIdsDeprecated: number[];
    /**
     * @generated from protobuf field: optional uint32 account_id = 3;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional uint32 request_level = 4;
     */
    requestLevel?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_PlayersProfile
 */
export interface CMsgGCCStrike15_v2_PlayersProfile {
    /**
     * @generated from protobuf field: optional uint32 request_id = 1;
     */
    requestId?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
     */
    accountProfiles: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
 */
export interface CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate {
    /**
     * @generated from protobuf field: optional uint64 caseid = 1;
     */
    caseid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 suspectid = 3;
     */
    suspectid?: number;
    /**
     * @generated from protobuf field: optional uint32 fractionid = 4;
     */
    fractionid?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_aimbot = 5;
     */
    rptAimbot?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_wallhack = 6;
     */
    rptWallhack?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_speedhack = 7;
     */
    rptSpeedhack?: number;
    /**
     * @generated from protobuf field: optional uint32 rpt_teamharm = 8;
     */
    rptTeamharm?: number;
    /**
     * @generated from protobuf field: optional uint32 reason = 9;
     */
    reason?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
 */
export interface CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment {
    /**
     * @generated from protobuf field: optional uint64 caseid = 1;
     */
    caseid?: bigint;
    /**
     * @generated from protobuf field: optional string caseurl = 2;
     */
    caseurl?: string;
    /**
     * @generated from protobuf field: optional uint32 verdict = 3;
     */
    verdict?: number;
    /**
     * @generated from protobuf field: optional uint32 timestamp = 4;
     */
    timestamp?: number;
    /**
     * @generated from protobuf field: optional uint32 throttleseconds = 5;
     */
    throttleseconds?: number;
    /**
     * @generated from protobuf field: optional uint32 suspectid = 6;
     */
    suspectid?: number;
    /**
     * @generated from protobuf field: optional uint32 fractionid = 7;
     */
    fractionid?: number;
    /**
     * @generated from protobuf field: optional uint32 numrounds = 8;
     */
    numrounds?: number;
    /**
     * @generated from protobuf field: optional uint32 fractionrounds = 9;
     */
    fractionrounds?: number;
    /**
     * @generated from protobuf field: optional int32 streakconvictions = 10;
     */
    streakconvictions?: number;
    /**
     * @generated from protobuf field: optional uint32 reason = 11;
     */
    reason?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
 */
export interface CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus {
    /**
     * @generated from protobuf field: optional uint64 caseid = 1;
     */
    caseid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 statusid = 2;
     */
    statusid?: number;
}
/**
 * @generated from protobuf message CClientHeaderOverwatchEvidence
 */
export interface CClientHeaderOverwatchEvidence {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint64 caseid = 2;
     */
    caseid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ClientTextMsg
 */
export interface CMsgGCCStrike15_v2_GC2ClientTextMsg {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 type = 2;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional bytes payload = 3;
     */
    payload?: Uint8Array;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Client2GCTextMsg
 */
export interface CMsgGCCStrike15_v2_Client2GCTextMsg {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: repeated bytes args = 2;
     */
    args: Uint8Array[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchEndRunRewardDrops
 */
export interface CMsgGCCStrike15_v2_MatchEndRunRewardDrops {
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
     */
    serverinfo?: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
    /**
     * @generated from protobuf field: optional CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
     */
    matchEndQuestData?: CMsgGC_ServerQuestUpdateData;
}
/**
 * @generated from protobuf message CEconItemPreviewDataBlock
 */
export interface CEconItemPreviewDataBlock {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint64 itemid = 2;
     */
    itemid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 defindex = 3;
     */
    defindex?: number;
    /**
     * @generated from protobuf field: optional uint32 paintindex = 4;
     */
    paintindex?: number;
    /**
     * @generated from protobuf field: optional uint32 rarity = 5;
     */
    rarity?: number;
    /**
     * @generated from protobuf field: optional uint32 quality = 6;
     */
    quality?: number;
    /**
     * @generated from protobuf field: optional uint32 paintwear = 7;
     */
    paintwear?: number;
    /**
     * @generated from protobuf field: optional uint32 paintseed = 8;
     */
    paintseed?: number;
    /**
     * @generated from protobuf field: optional uint32 killeaterscoretype = 9;
     */
    killeaterscoretype?: number;
    /**
     * @generated from protobuf field: optional uint32 killeatervalue = 10;
     */
    killeatervalue?: number;
    /**
     * @generated from protobuf field: optional string customname = 11;
     */
    customname?: string;
    /**
     * @generated from protobuf field: repeated CEconItemPreviewDataBlock.Sticker stickers = 12;
     */
    stickers: CEconItemPreviewDataBlock_Sticker[];
    /**
     * @generated from protobuf field: optional uint32 inventory = 13;
     */
    inventory?: number;
    /**
     * @generated from protobuf field: optional uint32 origin = 14;
     */
    origin?: number;
    /**
     * @generated from protobuf field: optional uint32 questid = 15;
     */
    questid?: number;
    /**
     * @generated from protobuf field: optional uint32 dropreason = 16;
     */
    dropreason?: number;
    /**
     * @generated from protobuf field: optional uint32 musicindex = 17;
     */
    musicindex?: number;
    /**
     * @generated from protobuf field: optional int32 entindex = 18;
     */
    entindex?: number;
}
/**
 * @generated from protobuf message CEconItemPreviewDataBlock.Sticker
 */
export interface CEconItemPreviewDataBlock_Sticker {
    /**
     * @generated from protobuf field: optional uint32 slot = 1;
     */
    slot?: number;
    /**
     * @generated from protobuf field: optional uint32 sticker_id = 2;
     */
    stickerId?: number;
    /**
     * @generated from protobuf field: optional float wear = 3;
     */
    wear?: number;
    /**
     * @generated from protobuf field: optional float scale = 4;
     */
    scale?: number;
    /**
     * @generated from protobuf field: optional float rotation = 5;
     */
    rotation?: number;
    /**
     * @generated from protobuf field: optional uint32 tint_id = 6;
     */
    tintId?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
 */
export interface CMsgGCCStrike15_v2_MatchEndRewardDropsNotification {
    /**
     * @generated from protobuf field: optional CEconItemPreviewDataBlock iteminfo = 6;
     */
    iteminfo?: CEconItemPreviewDataBlock;
}
/**
 * @generated from protobuf message CMsgItemAcknowledged
 */
export interface CMsgItemAcknowledged {
    /**
     * @generated from protobuf field: optional CEconItemPreviewDataBlock iteminfo = 1;
     */
    iteminfo?: CEconItemPreviewDataBlock;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
 */
export interface CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest {
    /**
     * @generated from protobuf field: optional uint64 param_s = 1;
     */
    paramS?: bigint;
    /**
     * @generated from protobuf field: optional uint64 param_a = 2;
     */
    paramA?: bigint;
    /**
     * @generated from protobuf field: optional uint64 param_d = 3;
     */
    paramD?: bigint;
    /**
     * @generated from protobuf field: optional uint64 param_m = 4;
     */
    paramM?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
 */
export interface CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse {
    /**
     * @generated from protobuf field: optional CEconItemPreviewDataBlock iteminfo = 1;
     */
    iteminfo?: CEconItemPreviewDataBlock;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
 */
export interface CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames {
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
 */
export interface CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
 */
export interface CMsgGCCStrike15_v2_MatchListRequestRecentUserGames {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchListRequestTournamentGames
 */
export interface CMsgGCCStrike15_v2_MatchListRequestTournamentGames {
    /**
     * @generated from protobuf field: optional int32 eventid = 1;
     */
    eventid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
 */
export interface CMsgGCCStrike15_v2_MatchListRequestFullGameInfo {
    /**
     * @generated from protobuf field: optional uint64 matchid = 1;
     */
    matchid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 outcomeid = 2;
     */
    outcomeid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 token = 3;
     */
    token?: number;
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_MatchInfo
 */
export interface CDataGCCStrike15_v2_MatchInfo {
    /**
     * @generated from protobuf field: optional uint64 matchid = 1;
     */
    matchid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 matchtime = 2;
     */
    matchtime?: number;
    /**
     * @generated from protobuf field: optional WatchableMatchInfo watchablematchinfo = 3;
     */
    watchablematchinfo?: WatchableMatchInfo;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
     */
    roundstatsLegacy?: CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
     */
    roundstatsall: CMsgGCCStrike15_v2_MatchmakingServerRoundStats[];
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentGroupTeam
 */
export interface CDataGCCStrike15_v2_TournamentGroupTeam {
    /**
     * @generated from protobuf field: optional int32 team_id = 1;
     */
    teamId?: number;
    /**
     * @generated from protobuf field: optional int32 score = 2;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional bool correctpick = 3;
     */
    correctpick?: boolean;
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentGroup
 */
export interface CDataGCCStrike15_v2_TournamentGroup {
    /**
     * @generated from protobuf field: optional uint32 groupid = 1;
     */
    groupid?: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string desc = 3;
     */
    desc?: string;
    /**
     * @generated from protobuf field: optional uint32 picks__deprecated = 4;
     */
    picksDeprecated?: number;
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
     */
    teams: CDataGCCStrike15_v2_TournamentGroupTeam[];
    /**
     * @generated from protobuf field: repeated int32 stage_ids = 6;
     */
    stageIds: number[];
    /**
     * @generated from protobuf field: optional uint32 picklockuntiltime = 7;
     */
    picklockuntiltime?: number;
    /**
     * @generated from protobuf field: optional uint32 pickableteams = 8;
     */
    pickableteams?: number;
    /**
     * @generated from protobuf field: optional uint32 points_per_pick = 9;
     */
    pointsPerPick?: number;
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
     */
    picks: CDataGCCStrike15_v2_TournamentGroup_Picks[];
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentGroup.Picks
 */
export interface CDataGCCStrike15_v2_TournamentGroup_Picks {
    /**
     * @generated from protobuf field: repeated int32 pickids = 1;
     */
    pickids: number[];
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentSection
 */
export interface CDataGCCStrike15_v2_TournamentSection {
    /**
     * @generated from protobuf field: optional uint32 sectionid = 1;
     */
    sectionid?: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string desc = 3;
     */
    desc?: string;
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_TournamentGroup groups = 4;
     */
    groups: CDataGCCStrike15_v2_TournamentGroup[];
}
/**
 * @generated from protobuf message CDataGCCStrike15_v2_TournamentInfo
 */
export interface CDataGCCStrike15_v2_TournamentInfo {
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_TournamentSection sections = 1;
     */
    sections: CDataGCCStrike15_v2_TournamentSection[];
    /**
     * @generated from protobuf field: optional TournamentEvent tournament_event = 2;
     */
    tournamentEvent?: TournamentEvent;
    /**
     * @generated from protobuf field: repeated TournamentTeam tournament_teams = 3;
     */
    tournamentTeams: TournamentTeam[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchList
 */
export interface CMsgGCCStrike15_v2_MatchList {
    /**
     * @generated from protobuf field: optional uint32 msgrequestid = 1;
     */
    msgrequestid?: number;
    /**
     * @generated from protobuf field: optional uint32 accountid = 2;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 servertime = 3;
     */
    servertime?: number;
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_MatchInfo matches = 4;
     */
    matches: CDataGCCStrike15_v2_MatchInfo[];
    /**
     * @generated from protobuf field: repeated TournamentTeam streams = 5;
     */
    streams: TournamentTeam[];
    /**
     * @generated from protobuf field: optional CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
     */
    tournamentinfo?: CDataGCCStrike15_v2_TournamentInfo;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt
 */
export interface CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt {
    /**
     * @generated from protobuf field: optional int32 eventid = 1;
     */
    eventid?: number;
    /**
     * @generated from protobuf field: repeated CDataGCCStrike15_v2_MatchInfo matches = 2;
     */
    matches: CDataGCCStrike15_v2_MatchInfo[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Predictions
 */
export interface CMsgGCCStrike15_v2_Predictions {
    /**
     * @generated from protobuf field: optional uint32 event_id = 1;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
     */
    groupMatchTeamPicks: CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
 */
export interface CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick {
    /**
     * @generated from protobuf field: optional int32 sectionid = 1;
     */
    sectionid?: number;
    /**
     * @generated from protobuf field: optional int32 groupid = 2;
     */
    groupid?: number;
    /**
     * @generated from protobuf field: optional int32 index = 3;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional int32 teamid = 4;
     */
    teamid?: number;
    /**
     * @generated from protobuf field: optional uint64 itemid = 5;
     */
    itemid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Fantasy
 */
export interface CMsgGCCStrike15_v2_Fantasy {
    /**
     * @generated from protobuf field: optional uint32 event_id = 1;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
     */
    teams: CMsgGCCStrike15_v2_Fantasy_FantasyTeam[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Fantasy.FantasySlot
 */
export interface CMsgGCCStrike15_v2_Fantasy_FantasySlot {
    /**
     * @generated from protobuf field: optional int32 type = 1;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional int32 pick = 2;
     */
    pick?: number;
    /**
     * @generated from protobuf field: optional uint64 itemid = 3;
     */
    itemid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Fantasy.FantasyTeam
 */
export interface CMsgGCCStrike15_v2_Fantasy_FantasyTeam {
    /**
     * @generated from protobuf field: optional int32 sectionid = 1;
     */
    sectionid?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
     */
    slots: CMsgGCCStrike15_v2_Fantasy_FantasySlot[];
}
/**
 * @generated from protobuf message CAttribute_String
 */
export interface CAttribute_String {
    /**
     * @generated from protobuf field: optional string value = 1;
     */
    value?: string;
}
/**
 * @generated from protobuf message CMsgCStrike15Welcome
 */
export interface CMsgCStrike15Welcome {
    /**
     * @generated from protobuf field: optional uint32 store_item_hash = 5;
     */
    storeItemHash?: number;
    /**
     * @generated from protobuf field: optional uint32 timeplayedconsecutively = 6;
     */
    timeplayedconsecutively?: number;
    /**
     * @generated from protobuf field: optional uint32 time_first_played = 10;
     */
    timeFirstPlayed?: number;
    /**
     * @generated from protobuf field: optional uint32 last_time_played = 12;
     */
    lastTimePlayed?: number;
    /**
     * @generated from protobuf field: optional uint32 last_ip_address = 13;
     */
    lastIpAddress?: number;
    /**
     * @generated from protobuf field: optional uint64 gscookieid = 18;
     */
    gscookieid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 uniqueid = 19;
     */
    uniqueid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
 */
export interface CMsgGCCStrike15_v2_ClientVarValueNotificationInfo {
    /**
     * @generated from protobuf field: optional string value_name = 1;
     */
    valueName?: string;
    /**
     * @generated from protobuf field: optional int32 value_int = 2;
     */
    valueInt?: number;
    /**
     * @generated from protobuf field: optional uint32 server_addr = 3;
     */
    serverAddr?: number;
    /**
     * @generated from protobuf field: optional uint32 server_port = 4;
     */
    serverPort?: number;
    /**
     * @generated from protobuf field: repeated string choked_blocks = 5;
     */
    chokedBlocks: string[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
 */
export interface CMsgGCCStrike15_v2_ServerVarValueNotificationInfo {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: repeated uint32 viewangles = 2;
     */
    viewangles: number[];
    /**
     * @generated from protobuf field: optional uint32 type = 3;
     */
    type?: number;
    /**
     * @generated from protobuf field: repeated uint32 userdata = 4;
     */
    userdata: number[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GiftsLeaderboardRequest
 */
export interface CMsgGCCStrike15_v2_GiftsLeaderboardRequest {
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GiftsLeaderboardResponse
 */
export interface CMsgGCCStrike15_v2_GiftsLeaderboardResponse {
    /**
     * @generated from protobuf field: optional uint32 servertime = 1;
     */
    servertime?: number;
    /**
     * @generated from protobuf field: optional uint32 time_period_seconds = 2;
     */
    timePeriodSeconds?: number;
    /**
     * @generated from protobuf field: optional uint32 total_gifts_given = 3;
     */
    totalGiftsGiven?: number;
    /**
     * @generated from protobuf field: optional uint32 total_givers = 4;
     */
    totalGivers?: number;
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
     */
    entries: CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
 */
export interface CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 gifts = 2;
     */
    gifts?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientSubmitSurveyVote
 */
export interface CMsgGCCStrike15_v2_ClientSubmitSurveyVote {
    /**
     * @generated from protobuf field: optional uint32 survey_id = 1;
     */
    surveyId?: number;
    /**
     * @generated from protobuf field: optional uint32 vote = 2;
     */
    vote?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Server2GCClientValidate
 */
export interface CMsgGCCStrike15_v2_Server2GCClientValidate {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ClientTournamentInfo
 */
export interface CMsgGCCStrike15_v2_GC2ClientTournamentInfo {
    /**
     * @generated from protobuf field: optional uint32 eventid = 1;
     */
    eventid?: number;
    /**
     * @generated from protobuf field: optional uint32 stageid = 2;
     */
    stageid?: number;
    /**
     * @generated from protobuf field: optional uint32 game_type = 3;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: repeated uint32 teamids = 4;
     */
    teamids: number[];
}
/**
 * @generated from protobuf message CSOEconCoupon
 */
export interface CSOEconCoupon {
    /**
     * @generated from protobuf field: optional uint32 entryid = 1;
     */
    entryid?: number;
    /**
     * @generated from protobuf field: optional uint32 defidx = 2;
     */
    defidx?: number;
    /**
     * @generated from protobuf field: optional fixed32 expiration_date = 3;
     */
    expirationDate?: number;
}
/**
 * @generated from protobuf message CSOQuestProgress
 */
export interface CSOQuestProgress {
    /**
     * @generated from protobuf field: optional uint32 questid = 1;
     */
    questid?: number;
    /**
     * @generated from protobuf field: optional uint32 points_remaining = 2;
     */
    pointsRemaining?: number;
    /**
     * @generated from protobuf field: optional uint32 bonus_points = 3;
     */
    bonusPoints?: number;
}
/**
 * @generated from protobuf message CSOAccountSeasonalOperation
 */
export interface CSOAccountSeasonalOperation {
    /**
     * @generated from protobuf field: optional uint32 season_value = 1;
     */
    seasonValue?: number;
    /**
     * @generated from protobuf field: optional uint32 tier_unlocked = 2;
     */
    tierUnlocked?: number;
    /**
     * @generated from protobuf field: optional uint32 premium_tiers = 3;
     */
    premiumTiers?: number;
    /**
     * @generated from protobuf field: optional uint32 mission_id = 4;
     */
    missionId?: number;
    /**
     * @generated from protobuf field: optional uint32 missions_completed = 5;
     */
    missionsCompleted?: number;
    /**
     * @generated from protobuf field: optional uint32 redeemable_balance = 6;
     */
    redeemableBalance?: number;
    /**
     * @generated from protobuf field: optional uint32 season_pass_time = 7;
     */
    seasonPassTime?: number;
}
/**
 * @generated from protobuf message CSOAccountRecurringSubscription
 */
export interface CSOAccountRecurringSubscription {
    /**
     * @generated from protobuf field: optional uint32 time_next_cycle = 1;
     */
    timeNextCycle?: number;
    /**
     * @generated from protobuf field: optional uint32 time_initiated = 2;
     */
    timeInitiated?: number;
}
/**
 * @generated from protobuf message CSOPersonaDataPublic
 */
export interface CSOPersonaDataPublic {
    /**
     * @generated from protobuf field: optional int32 player_level = 1;
     */
    playerLevel?: number;
    /**
     * @generated from protobuf field: optional PlayerCommendationInfo commendation = 2;
     */
    commendation?: PlayerCommendationInfo;
    /**
     * @generated from protobuf field: optional bool elevated_state = 3;
     */
    elevatedState?: boolean;
}
/**
 * @generated from protobuf message CMsgGC_GlobalGame_Subscribe
 */
export interface CMsgGC_GlobalGame_Subscribe {
    /**
     * @generated from protobuf field: optional uint64 ticket = 1;
     */
    ticket?: bigint;
}
/**
 * @generated from protobuf message CMsgGC_GlobalGame_Unsubscribe
 */
export interface CMsgGC_GlobalGame_Unsubscribe {
    /**
     * @generated from protobuf field: optional int32 timeleft = 1;
     */
    timeleft?: number;
}
/**
 * @generated from protobuf message CMsgGC_GlobalGame_Play
 */
export interface CMsgGC_GlobalGame_Play {
    /**
     * @generated from protobuf field: optional uint64 ticket = 1;
     */
    ticket?: bigint;
    /**
     * @generated from protobuf field: optional uint32 gametimems = 2;
     */
    gametimems?: number;
    /**
     * @generated from protobuf field: optional uint32 msperpoint = 3;
     */
    msperpoint?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_AcknowledgePenalty
 */
export interface CMsgGCCStrike15_v2_AcknowledgePenalty {
    /**
     * @generated from protobuf field: optional int32 acknowledged = 1;
     */
    acknowledged?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
 */
export interface CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin {
    /**
     * @generated from protobuf field: optional uint32 defindex = 1;
     */
    defindex?: number;
    /**
     * @generated from protobuf field: optional uint64 upgradeid = 2;
     */
    upgradeid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 hours = 3;
     */
    hours?: number;
    /**
     * @generated from protobuf field: optional uint32 prestigetime = 4;
     */
    prestigetime?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Client2GCStreamUnlock
 */
export interface CMsgGCCStrike15_v2_Client2GCStreamUnlock {
    /**
     * @generated from protobuf field: optional uint64 ticket = 1;
     */
    ticket?: bigint;
    /**
     * @generated from protobuf field: optional int32 os = 2;
     */
    os?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientToGCRequestElevate
 */
export interface CMsgGCCStrike15_v2_ClientToGCRequestElevate {
    /**
     * @generated from protobuf field: optional uint32 stage = 1;
     */
    stage?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientToGCChat
 */
export interface CMsgGCCStrike15_v2_ClientToGCChat {
    /**
     * @generated from protobuf field: optional uint64 match_id = 1;
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: optional string text = 2;
     */
    text?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GCToClientChat
 */
export interface CMsgGCCStrike15_v2_GCToClientChat {
    /**
     * @generated from protobuf field: optional uint32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional string text = 2;
     */
    text?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientAuthKeyCode
 */
export interface CMsgGCCStrike15_v2_ClientAuthKeyCode {
    /**
     * @generated from protobuf field: optional uint32 eventid = 1;
     */
    eventid?: number;
    /**
     * @generated from protobuf field: optional string code = 2;
     */
    code?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_GotvSyncPacket
 */
export interface CMsgGCCStrike15_GotvSyncPacket {
    /**
     * @generated from protobuf field: optional CEngineGotvSyncPacket data = 1;
     */
    data?: CEngineGotvSyncPacket;
}
/**
 * @generated from protobuf message PlayerDecalDigitalSignature
 */
export interface PlayerDecalDigitalSignature {
    /**
     * @generated from protobuf field: optional bytes signature = 1;
     */
    signature?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 accountid = 2;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 rtime = 3;
     */
    rtime?: number;
    /**
     * @generated from protobuf field: repeated float endpos = 4;
     */
    endpos: number[];
    /**
     * @generated from protobuf field: repeated float startpos = 5;
     */
    startpos: number[];
    /**
     * @generated from protobuf field: repeated float right = 6;
     */
    right: number[];
    /**
     * @generated from protobuf field: optional uint32 tx_defidx = 7;
     */
    txDefidx?: number;
    /**
     * @generated from protobuf field: optional int32 entindex = 8;
     */
    entindex?: number;
    /**
     * @generated from protobuf field: optional uint32 hitbox = 9;
     */
    hitbox?: number;
    /**
     * @generated from protobuf field: optional float creationtime = 10;
     */
    creationtime?: number;
    /**
     * @generated from protobuf field: optional uint32 equipslot = 11;
     */
    equipslot?: number;
    /**
     * @generated from protobuf field: optional uint32 trace_id = 12;
     */
    traceId?: number;
    /**
     * @generated from protobuf field: repeated float normal = 13;
     */
    normal: number[];
    /**
     * @generated from protobuf field: optional uint32 tint_id = 14;
     */
    tintId?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPlayerDecalSign
 */
export interface CMsgGCCStrike15_v2_ClientPlayerDecalSign {
    /**
     * @generated from protobuf field: optional PlayerDecalDigitalSignature data = 1;
     */
    data?: PlayerDecalDigitalSignature;
    /**
     * @generated from protobuf field: optional uint64 itemid = 2;
     */
    itemid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientLogonFatalError
 */
export interface CMsgGCCStrike15_v2_ClientLogonFatalError {
    /**
     * @generated from protobuf field: optional uint32 errorcode = 1;
     */
    errorcode?: number;
    /**
     * @generated from protobuf field: optional string message = 2;
     */
    message?: string;
    /**
     * @generated from protobuf field: optional string country = 3;
     */
    country?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPollState
 */
export interface CMsgGCCStrike15_v2_ClientPollState {
    /**
     * @generated from protobuf field: optional uint32 pollid = 1;
     */
    pollid?: number;
    /**
     * @generated from protobuf field: repeated string names = 2;
     */
    names: string[];
    /**
     * @generated from protobuf field: repeated int32 values = 3;
     */
    values: number[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Party_Register
 */
export interface CMsgGCCStrike15_v2_Party_Register {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 ver = 2;
     */
    ver?: number;
    /**
     * @generated from protobuf field: optional uint32 apr = 3;
     */
    apr?: number;
    /**
     * @generated from protobuf field: optional uint32 ark = 4;
     */
    ark?: number;
    /**
     * @generated from protobuf field: optional uint32 nby = 5;
     */
    nby?: number;
    /**
     * @generated from protobuf field: optional uint32 grp = 6;
     */
    grp?: number;
    /**
     * @generated from protobuf field: optional uint32 slots = 7;
     */
    slots?: number;
    /**
     * @generated from protobuf field: optional uint32 launcher = 8;
     */
    launcher?: number;
    /**
     * @generated from protobuf field: optional uint32 game_type = 9;
     */
    gameType?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Party_Search
 */
export interface CMsgGCCStrike15_v2_Party_Search {
    /**
     * @generated from protobuf field: optional uint32 ver = 1;
     */
    ver?: number;
    /**
     * @generated from protobuf field: optional uint32 apr = 2;
     */
    apr?: number;
    /**
     * @generated from protobuf field: optional uint32 ark = 3;
     */
    ark?: number;
    /**
     * @generated from protobuf field: repeated uint32 grps = 4;
     */
    grps: number[];
    /**
     * @generated from protobuf field: optional uint32 launcher = 5;
     */
    launcher?: number;
    /**
     * @generated from protobuf field: optional uint32 game_type = 6;
     */
    gameType?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Party_SearchResults
 */
export interface CMsgGCCStrike15_v2_Party_SearchResults {
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
     */
    entries: CMsgGCCStrike15_v2_Party_SearchResults_Entry[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Party_SearchResults.Entry
 */
export interface CMsgGCCStrike15_v2_Party_SearchResults_Entry {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 grp = 2;
     */
    grp?: number;
    /**
     * @generated from protobuf field: optional uint32 game_type = 3;
     */
    gameType?: number;
    /**
     * @generated from protobuf field: optional uint32 apr = 4;
     */
    apr?: number;
    /**
     * @generated from protobuf field: optional uint32 ark = 5;
     */
    ark?: number;
    /**
     * @generated from protobuf field: optional uint32 loc = 6;
     */
    loc?: number;
    /**
     * @generated from protobuf field: optional uint32 accountid = 7;
     */
    accountid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Party_Invite
 */
export interface CMsgGCCStrike15_v2_Party_Invite {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 lobbyid = 2;
     */
    lobbyid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Account_RequestCoPlays
 */
export interface CMsgGCCStrike15_v2_Account_RequestCoPlays {
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
     */
    players: CMsgGCCStrike15_v2_Account_RequestCoPlays_Player[];
    /**
     * @generated from protobuf field: optional uint32 servertime = 2;
     */
    servertime?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
 */
export interface CMsgGCCStrike15_v2_Account_RequestCoPlays_Player {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 rtcoplay = 2;
     */
    rtcoplay?: number;
    /**
     * @generated from protobuf field: optional bool online = 3;
     */
    online?: boolean;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientToGCRequestTicket
 */
export interface CMsgGCCStrike15_v2_ClientToGCRequestTicket {
    /**
     * @generated from protobuf field: optional fixed64 authorized_steam_id = 1;
     */
    authorizedSteamId?: bigint;
    /**
     * @generated from protobuf field: optional fixed32 authorized_public_ip = 2;
     */
    authorizedPublicIp?: number;
    /**
     * @generated from protobuf field: optional fixed64 gameserver_steam_id = 3;
     */
    gameserverSteamId?: bigint;
    /**
     * @generated from protobuf field: optional string gameserver_sdr_routing = 5;
     */
    gameserverSdrRouting?: string;
}
/**
 * @generated from protobuf message CMsgGCToClientSteamDatagramTicket
 */
export interface CMsgGCToClientSteamDatagramTicket {
    /**
     * @generated from protobuf field: optional bytes serialized_ticket = 16;
     */
    serializedTicket?: Uint8Array;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientRequestOffers
 */
export interface CMsgGCCStrike15_v2_ClientRequestOffers {
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientRequestSouvenir
 */
export interface CMsgGCCStrike15_v2_ClientRequestSouvenir {
    /**
     * @generated from protobuf field: optional uint64 itemid = 1;
     */
    itemid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 matchid = 2;
     */
    matchid?: bigint;
    /**
     * @generated from protobuf field: optional int32 eventid = 3;
     */
    eventid?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientAccountBalance
 */
export interface CMsgGCCStrike15_v2_ClientAccountBalance {
    /**
     * @generated from protobuf field: optional uint64 amount = 1;
     */
    amount?: bigint;
    /**
     * @generated from protobuf field: optional string url = 2;
     */
    url?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPartyJoinRelay
 */
export interface CMsgGCCStrike15_v2_ClientPartyJoinRelay {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint64 lobbyid = 2;
     */
    lobbyid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPartyWarning
 */
export interface CMsgGCCStrike15_v2_ClientPartyWarning {
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
     */
    entries: CMsgGCCStrike15_v2_ClientPartyWarning_Entry[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPartyWarning.Entry
 */
export interface CMsgGCCStrike15_v2_ClientPartyWarning_Entry {
    /**
     * @generated from protobuf field: optional uint32 accountid = 1;
     */
    accountid?: number;
    /**
     * @generated from protobuf field: optional uint32 warntype = 2;
     */
    warntype?: number;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_SetEventFavorite
 */
export interface CMsgGCCStrike15_v2_SetEventFavorite {
    /**
     * @generated from protobuf field: optional uint64 eventid = 1;
     */
    eventid?: bigint;
    /**
     * @generated from protobuf field: optional bool is_favorite = 2;
     */
    isFavorite?: boolean;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GetEventFavorites_Request
 */
export interface CMsgGCCStrike15_v2_GetEventFavorites_Request {
    /**
     * @generated from protobuf field: optional bool all_events = 1;
     */
    allEvents?: boolean;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GetEventFavorites_Response
 */
export interface CMsgGCCStrike15_v2_GetEventFavorites_Response {
    /**
     * @generated from protobuf field: optional bool all_events = 1;
     */
    allEvents?: boolean;
    /**
     * @generated from protobuf field: optional string json_favorites = 2;
     */
    jsonFavorites?: string;
    /**
     * @generated from protobuf field: optional string json_featured = 3;
     */
    jsonFeatured?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPerfReport
 */
export interface CMsgGCCStrike15_v2_ClientPerfReport {
    /**
     * @generated from protobuf field: repeated CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
     */
    entries: CMsgGCCStrike15_v2_ClientPerfReport_Entry[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientPerfReport.Entry
 */
export interface CMsgGCCStrike15_v2_ClientPerfReport_Entry {
    /**
     * @generated from protobuf field: optional uint32 perfcounter = 1;
     */
    perfcounter?: number;
    /**
     * @generated from protobuf field: optional uint32 length = 2;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional bytes reference = 3;
     */
    reference?: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes actual = 4;
     */
    actual?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 sourceid = 5;
     */
    sourceid?: number;
    /**
     * @generated from protobuf field: optional uint32 status = 6;
     */
    status?: number;
}
/**
 * @generated from protobuf message CVDiagnostic
 */
export interface CVDiagnostic {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 extended = 2;
     */
    extended?: number;
    /**
     * @generated from protobuf field: optional uint64 value = 3;
     */
    value?: bigint;
    /**
     * @generated from protobuf field: optional string string_value = 4;
     */
    stringValue?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_ClientReportValidation
 */
export interface CMsgGCCStrike15_v2_ClientReportValidation {
    /**
     * @generated from protobuf field: optional string file_report = 1;
     */
    fileReport?: string;
    /**
     * @generated from protobuf field: optional string command_line = 2;
     */
    commandLine?: string;
    /**
     * @generated from protobuf field: optional uint32 total_files = 3;
     */
    totalFiles?: number;
    /**
     * @generated from protobuf field: optional uint32 internal_error = 4;
     */
    internalError?: number;
    /**
     * @generated from protobuf field: optional uint32 trust_time = 5;
     */
    trustTime?: number;
    /**
     * @generated from protobuf field: optional uint32 count_pending = 6;
     */
    countPending?: number;
    /**
     * @generated from protobuf field: optional uint32 count_completed = 7;
     */
    countCompleted?: number;
    /**
     * @generated from protobuf field: optional uint32 process_id = 8;
     */
    processId?: number;
    /**
     * @generated from protobuf field: optional int32 osversion = 9;
     */
    osversion?: number;
    /**
     * @generated from protobuf field: optional uint32 clientreportversion = 10;
     */
    clientreportversion?: number;
    /**
     * @generated from protobuf field: optional uint32 status_id = 11;
     */
    statusId?: number;
    /**
     * @generated from protobuf field: optional uint32 diagnostic1 = 12;
     */
    diagnostic1?: number;
    /**
     * @generated from protobuf field: optional uint64 diagnostic2 = 13;
     */
    diagnostic2?: bigint;
    /**
     * @generated from protobuf field: optional uint64 diagnostic3 = 14;
     */
    diagnostic3?: bigint;
    /**
     * @generated from protobuf field: optional string last_launch_data = 15;
     */
    lastLaunchData?: string;
    /**
     * @generated from protobuf field: optional uint32 report_count = 16;
     */
    reportCount?: number;
    /**
     * @generated from protobuf field: optional uint64 client_time = 17;
     */
    clientTime?: bigint;
    /**
     * @generated from protobuf field: optional uint64 diagnostic4 = 18;
     */
    diagnostic4?: bigint;
    /**
     * @generated from protobuf field: optional uint64 diagnostic5 = 19;
     */
    diagnostic5?: bigint;
    /**
     * @generated from protobuf field: repeated CVDiagnostic diagnostics = 20;
     */
    diagnostics: CVDiagnostic[];
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode
 */
export interface CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode {
    /**
     * @generated from protobuf field: optional string file_report = 1;
     */
    fileReport?: string;
    /**
     * @generated from protobuf field: optional bool offer_insecure_mode = 2;
     */
    offerInsecureMode?: boolean;
    /**
     * @generated from protobuf field: optional bool offer_secure_mode = 3;
     */
    offerSecureMode?: boolean;
    /**
     * @generated from protobuf field: optional bool show_unsigned_ui = 4;
     */
    showUnsignedUi?: boolean;
    /**
     * @generated from protobuf field: optional bool kick_user = 5;
     */
    kickUser?: boolean;
    /**
     * @generated from protobuf field: optional bool show_trusted_ui = 6;
     */
    showTrustedUi?: boolean;
    /**
     * @generated from protobuf field: optional bool show_warning_not_trusted = 7;
     */
    showWarningNotTrusted?: boolean;
    /**
     * @generated from protobuf field: optional bool show_warning_not_trusted_2 = 8;
     */
    showWarningNotTrusted2?: boolean;
    /**
     * @generated from protobuf field: optional string files_prevented_trusted = 9;
     */
    filesPreventedTrusted?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ClientRequestValidation
 */
export interface CMsgGCCStrike15_v2_GC2ClientRequestValidation {
    /**
     * @generated from protobuf field: optional bool full_report = 1;
     */
    fullReport?: boolean;
    /**
     * @generated from protobuf field: optional string module = 2;
     */
    module?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ClientInitSystem
 */
export interface CMsgGCCStrike15_v2_GC2ClientInitSystem {
    /**
     * @generated from protobuf field: optional bool load = 1;
     */
    load?: boolean;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string outputname = 3;
     */
    outputname?: string;
    /**
     * @generated from protobuf field: optional bytes key_data = 4;
     */
    keyData?: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes sha_hash = 5;
     */
    shaHash?: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 cookie = 6;
     */
    cookie?: number;
    /**
     * @generated from protobuf field: optional string manifest = 7;
     */
    manifest?: string;
}
/**
 * @generated from protobuf message CMsgGCCStrike15_v2_GC2ClientInitSystem_Response
 */
export interface CMsgGCCStrike15_v2_GC2ClientInitSystem_Response {
    /**
     * @generated from protobuf field: optional bool success = 1;
     */
    success?: boolean;
    /**
     * @generated from protobuf field: optional string diagnostic = 2;
     */
    diagnostic?: string;
    /**
     * @generated from protobuf field: optional bytes sha_hash = 3;
     */
    shaHash?: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 response = 4;
     */
    response?: number;
    /**
     * @generated from protobuf field: optional int32 error_code1 = 5;
     */
    errorCode1?: number;
    /**
     * @generated from protobuf field: optional int32 error_code2 = 6;
     */
    errorCode2?: number;
    /**
     * @generated from protobuf field: optional int64 handle = 7;
     */
    handle?: bigint;
    /**
     * @generated from protobuf field: optional EInitSystemResult einit_result = 8;
     */
    einitResult?: EInitSystemResult;
    /**
     * @generated from protobuf field: optional int32 aux_system1 = 9;
     */
    auxSystem1?: number;
    /**
     * @generated from protobuf field: optional int32 aux_system2 = 10;
     */
    auxSystem2?: number;
}
/**
 * @generated from protobuf enum ECsgoGCMsg
 */
export enum ECsgoGCMsg {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Base = 9100;
     */
    k_EMsgGCCStrike15_v2_Base = 9100,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingStart = 9101;
     */
    k_EMsgGCCStrike15_v2_MatchmakingStart = 9101,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingStop = 9102;
     */
    k_EMsgGCCStrike15_v2_MatchmakingStop = 9102,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103;
     */
    k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104;
     */
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106;
     */
    k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107;
     */
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109;
     */
    k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110;
     */
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112;
     */
    k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115;
     */
    k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117;
     */
    k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118;
     */
    k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119;
     */
    k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientReportServer = 9120;
     */
    k_EMsgGCCStrike15_v2_ClientReportServer = 9120,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121;
     */
    k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientReportResponse = 9122;
     */
    k_EMsgGCCStrike15_v2_ClientReportResponse = 9122,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123;
     */
    k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124;
     */
    k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126;
     */
    k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127;
     */
    k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_PlayersProfile = 9128;
     */
    k_EMsgGCCStrike15_v2_PlayersProfile = 9128,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131;
     */
    k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132;
     */
    k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133;
     */
    k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134;
     */
    k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135;
     */
    k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136;
     */
    k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137;
     */
    k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138;
     */
    k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchList = 9139;
     */
    k_EMsgGCCStrike15_v2_MatchList = 9139,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140;
     */
    k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141;
     */
    k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142;
     */
    k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144;
     */
    k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146;
     */
    k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147;
     */
    k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148;
     */
    k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149;
     */
    k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150;
     */
    k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152;
     */
    k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153;
     */
    k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154;
     */
    k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156;
     */
    k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157;
     */
    k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158;
     */
    k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159;
     */
    k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160;
     */
    k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161;
     */
    k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_DraftSummary = 9162;
     */
    k_EMsgGCCStrike15_v2_DraftSummary = 9162,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData = 9163;
     */
    k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData = 9163,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestJoinServerData = 9164;
     */
    k_EMsgGCCStrike15_v2_ClientRequestJoinServerData = 9164,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestNewMission = 9165;
     */
    k_EMsgGCCStrike15_v2_ClientRequestNewMission = 9165,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo = 9167;
     */
    k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo = 9167,
    /**
     * @generated from protobuf enum value: k_EMsgGC_GlobalGame_Subscribe = 9168;
     */
    k_EMsgGC_GlobalGame_Subscribe = 9168,
    /**
     * @generated from protobuf enum value: k_EMsgGC_GlobalGame_Unsubscribe = 9169;
     */
    k_EMsgGC_GlobalGame_Unsubscribe = 9169,
    /**
     * @generated from protobuf enum value: k_EMsgGC_GlobalGame_Play = 9170;
     */
    k_EMsgGC_GlobalGame_Play = 9170,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_AcknowledgePenalty = 9171;
     */
    k_EMsgGCCStrike15_v2_AcknowledgePenalty = 9171,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = 9172;
     */
    k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = 9172,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientGlobalStats = 9173;
     */
    k_EMsgGCCStrike15_v2_GC2ClientGlobalStats = 9173,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Client2GCStreamUnlock = 9174;
     */
    k_EMsgGCCStrike15_v2_Client2GCStreamUnlock = 9174,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_FantasyRequestClientData = 9175;
     */
    k_EMsgGCCStrike15_v2_FantasyRequestClientData = 9175,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_FantasyUpdateClientData = 9176;
     */
    k_EMsgGCCStrike15_v2_FantasyUpdateClientData = 9176,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket = 9177;
     */
    k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket = 9177,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientToGCRequestTicket = 9178;
     */
    k_EMsgGCCStrike15_v2_ClientToGCRequestTicket = 9178,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientToGCRequestElevate = 9179;
     */
    k_EMsgGCCStrike15_v2_ClientToGCRequestElevate = 9179,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GlobalChat = 9180;
     */
    k_EMsgGCCStrike15_v2_GlobalChat = 9180,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GlobalChat_Subscribe = 9181;
     */
    k_EMsgGCCStrike15_v2_GlobalChat_Subscribe = 9181,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe = 9182;
     */
    k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe = 9182,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientAuthKeyCode = 9183;
     */
    k_EMsgGCCStrike15_v2_ClientAuthKeyCode = 9183,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GotvSyncPacket = 9184;
     */
    k_EMsgGCCStrike15_v2_GotvSyncPacket = 9184,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientPlayerDecalSign = 9185;
     */
    k_EMsgGCCStrike15_v2_ClientPlayerDecalSign = 9185,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientLogonFatalError = 9187;
     */
    k_EMsgGCCStrike15_v2_ClientLogonFatalError = 9187,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientPollState = 9188;
     */
    k_EMsgGCCStrike15_v2_ClientPollState = 9188,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Party_Register = 9189;
     */
    k_EMsgGCCStrike15_v2_Party_Register = 9189,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Party_Unregister = 9190;
     */
    k_EMsgGCCStrike15_v2_Party_Unregister = 9190,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Party_Search = 9191;
     */
    k_EMsgGCCStrike15_v2_Party_Search = 9191,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Party_Invite = 9192;
     */
    k_EMsgGCCStrike15_v2_Party_Invite = 9192,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_Account_RequestCoPlays = 9193;
     */
    k_EMsgGCCStrike15_v2_Account_RequestCoPlays = 9193,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientGCRankUpdate = 9194;
     */
    k_EMsgGCCStrike15_v2_ClientGCRankUpdate = 9194,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestOffers = 9195;
     */
    k_EMsgGCCStrike15_v2_ClientRequestOffers = 9195,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientAccountBalance = 9196;
     */
    k_EMsgGCCStrike15_v2_ClientAccountBalance = 9196,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientPartyJoinRelay = 9197;
     */
    k_EMsgGCCStrike15_v2_ClientPartyJoinRelay = 9197,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientPartyWarning = 9198;
     */
    k_EMsgGCCStrike15_v2_ClientPartyWarning = 9198,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_SetEventFavorite = 9200;
     */
    k_EMsgGCCStrike15_v2_SetEventFavorite = 9200,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GetEventFavorites_Request = 9201;
     */
    k_EMsgGCCStrike15_v2_GetEventFavorites_Request = 9201,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientPerfReport = 9202;
     */
    k_EMsgGCCStrike15_v2_ClientPerfReport = 9202,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GetEventFavorites_Response = 9203;
     */
    k_EMsgGCCStrike15_v2_GetEventFavorites_Response = 9203,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRequestSouvenir = 9204;
     */
    k_EMsgGCCStrike15_v2_ClientRequestSouvenir = 9204,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientReportValidation = 9205;
     */
    k_EMsgGCCStrike15_v2_ClientReportValidation = 9205,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode = 9206;
     */
    k_EMsgGCCStrike15_v2_GC2ClientRefuseSecureMode = 9206,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientRequestValidation = 9207;
     */
    k_EMsgGCCStrike15_v2_GC2ClientRequestValidation = 9207,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_ClientRedeemMissionReward = 9209;
     */
    k_EMsgGCCStrike15_v2_ClientRedeemMissionReward = 9209,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_ClientDeepStats = 9210;
     */
    k_EMsgGCCStrike15_ClientDeepStats = 9210,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_StartAgreementSessionInGame = 9211;
     */
    k_EMsgGCCStrike15_StartAgreementSessionInGame = 9211,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientInitSystem = 9212;
     */
    k_EMsgGCCStrike15_v2_GC2ClientInitSystem = 9212,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_GC2ClientInitSystem_Response = 9213;
     */
    k_EMsgGCCStrike15_v2_GC2ClientInitSystem_Response = 9213,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_PrivateQueues = 9214;
     */
    k_EMsgGCCStrike15_v2_PrivateQueues = 9214,
    /**
     * @generated from protobuf enum value: k_EMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt = 9215;
     */
    k_EMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt = 9215
}
/**
 * @generated from protobuf enum ECsgoSteamUserStat
 */
export enum ECsgoSteamUserStat {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: k_ECsgoSteamUserStat_XpEarnedGames = 1;
     */
    k_ECsgoSteamUserStat_XpEarnedGames = 1,
    /**
     * @generated from protobuf enum value: k_ECsgoSteamUserStat_MatchWinsCompetitive = 2;
     */
    k_ECsgoSteamUserStat_MatchWinsCompetitive = 2,
    /**
     * @generated from protobuf enum value: k_ECsgoSteamUserStat_SurvivedDangerZone = 3;
     */
    k_ECsgoSteamUserStat_SurvivedDangerZone = 3
}
/**
 * @generated from protobuf enum EClientReportingVersion
 */
export enum EClientReportingVersion {
    /**
     * @generated from protobuf enum value: k_EClientReportingVersion_OldVersion = 0;
     */
    k_EClientReportingVersion_OldVersion = 0,
    /**
     * @generated from protobuf enum value: k_EClientReportingVersion_BetaVersion = 1;
     */
    k_EClientReportingVersion_BetaVersion = 1,
    /**
     * @generated from protobuf enum value: k_EClientReportingVersion_SupportsTrustedMode = 2;
     */
    k_EClientReportingVersion_SupportsTrustedMode = 2
}
/**
 * @generated from protobuf enum EInitSystemResult
 */
export enum EInitSystemResult {
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_Invalid = 0;
     */
    k_EInitSystemResult_Invalid = 0,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_Success = 1;
     */
    k_EInitSystemResult_Success = 1,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_None = 2;
     */
    k_EInitSystemResult_None = 2,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_NotFound = 3;
     */
    k_EInitSystemResult_NotFound = 3,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_Existing = 4;
     */
    k_EInitSystemResult_Existing = 4,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_FailedOpen = 5;
     */
    k_EInitSystemResult_FailedOpen = 5,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_Mismatch = 6;
     */
    k_EInitSystemResult_Mismatch = 6,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_FailedInit = 7;
     */
    k_EInitSystemResult_FailedInit = 7,
    /**
     * @generated from protobuf enum value: k_EInitSystemResult_Max = 8;
     */
    k_EInitSystemResult_Max = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class GameServerPing$Type extends MessageType<GameServerPing> {
    constructor() {
        super("GameServerPing", [
            { no: 2, name: "ping", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "instances", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameServerPing>): GameServerPing {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameServerPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameServerPing): GameServerPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ping */ 2:
                    message.ping = reader.int32();
                    break;
                case /* optional uint32 ip */ 3:
                    message.ip = reader.uint32();
                    break;
                case /* optional uint32 instances */ 5:
                    message.instances = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameServerPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ping = 2; */
        if (message.ping !== undefined)
            writer.tag(2, WireType.Varint).int32(message.ping);
        /* optional uint32 ip = 3; */
        if (message.ip !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.ip);
        /* optional uint32 instances = 5; */
        if (message.instances !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.instances);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameServerPing
 */
export const GameServerPing = new GameServerPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataCenterPing$Type extends MessageType<DataCenterPing> {
    constructor() {
        super("DataCenterPing", [
            { no: 1, name: "data_center_id", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 2, name: "ping", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DataCenterPing>): DataCenterPing {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataCenterPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataCenterPing): DataCenterPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed32 data_center_id */ 1:
                    message.dataCenterId = reader.fixed32();
                    break;
                case /* optional sint32 ping */ 2:
                    message.ping = reader.sint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataCenterPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed32 data_center_id = 1; */
        if (message.dataCenterId !== undefined)
            writer.tag(1, WireType.Bit32).fixed32(message.dataCenterId);
        /* optional sint32 ping = 2; */
        if (message.ping !== undefined)
            writer.tag(2, WireType.Varint).sint32(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DataCenterPing
 */
export const DataCenterPing = new DataCenterPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetailedSearchStatistic$Type extends MessageType<DetailedSearchStatistic> {
    constructor() {
        super("DetailedSearchStatistic", [
            { no: 1, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "search_time_avg", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "players_searching", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DetailedSearchStatistic>): DetailedSearchStatistic {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DetailedSearchStatistic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedSearchStatistic): DetailedSearchStatistic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 game_type */ 1:
                    message.gameType = reader.uint32();
                    break;
                case /* optional uint32 search_time_avg */ 2:
                    message.searchTimeAvg = reader.uint32();
                    break;
                case /* optional uint32 players_searching */ 4:
                    message.playersSearching = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetailedSearchStatistic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 game_type = 1; */
        if (message.gameType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.gameType);
        /* optional uint32 search_time_avg = 2; */
        if (message.searchTimeAvg !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.searchTimeAvg);
        /* optional uint32 players_searching = 4; */
        if (message.playersSearching !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.playersSearching);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DetailedSearchStatistic
 */
export const DetailedSearchStatistic = new DetailedSearchStatistic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TournamentPlayer$Type extends MessageType<TournamentPlayer> {
    constructor() {
        super("TournamentPlayer", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "player_nick", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "player_dob", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "player_flag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "player_location", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "player_desc", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TournamentPlayer>): TournamentPlayer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TournamentPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TournamentPlayer): TournamentPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional string player_nick */ 2:
                    message.playerNick = reader.string();
                    break;
                case /* optional string player_name */ 3:
                    message.playerName = reader.string();
                    break;
                case /* optional uint32 player_dob */ 4:
                    message.playerDob = reader.uint32();
                    break;
                case /* optional string player_flag */ 5:
                    message.playerFlag = reader.string();
                    break;
                case /* optional string player_location */ 6:
                    message.playerLocation = reader.string();
                    break;
                case /* optional string player_desc */ 7:
                    message.playerDesc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TournamentPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional string player_nick = 2; */
        if (message.playerNick !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.playerNick);
        /* optional string player_name = 3; */
        if (message.playerName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.playerName);
        /* optional uint32 player_dob = 4; */
        if (message.playerDob !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.playerDob);
        /* optional string player_flag = 5; */
        if (message.playerFlag !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.playerFlag);
        /* optional string player_location = 6; */
        if (message.playerLocation !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.playerLocation);
        /* optional string player_desc = 7; */
        if (message.playerDesc !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.playerDesc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TournamentPlayer
 */
export const TournamentPlayer = new TournamentPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TournamentTeam$Type extends MessageType<TournamentTeam> {
    constructor() {
        super("TournamentTeam", [
            { no: 1, name: "team_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "team_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "team_flag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "team_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "players", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TournamentPlayer }
        ]);
    }
    create(value?: PartialMessage<TournamentTeam>): TournamentTeam {
        const message = { players: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TournamentTeam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TournamentTeam): TournamentTeam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 team_id */ 1:
                    message.teamId = reader.int32();
                    break;
                case /* optional string team_tag */ 2:
                    message.teamTag = reader.string();
                    break;
                case /* optional string team_flag */ 3:
                    message.teamFlag = reader.string();
                    break;
                case /* optional string team_name */ 4:
                    message.teamName = reader.string();
                    break;
                case /* repeated TournamentPlayer players */ 5:
                    message.players.push(TournamentPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TournamentTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 team_id = 1; */
        if (message.teamId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.teamId);
        /* optional string team_tag = 2; */
        if (message.teamTag !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.teamTag);
        /* optional string team_flag = 3; */
        if (message.teamFlag !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.teamFlag);
        /* optional string team_name = 4; */
        if (message.teamName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.teamName);
        /* repeated TournamentPlayer players = 5; */
        for (let i = 0; i < message.players.length; i++)
            TournamentPlayer.internalBinaryWrite(message.players[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TournamentTeam
 */
export const TournamentTeam = new TournamentTeam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TournamentEvent$Type extends MessageType<TournamentEvent> {
    constructor() {
        super("TournamentEvent", [
            { no: 1, name: "event_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "event_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "event_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "event_time_start", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "event_time_end", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "event_public", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "event_stage_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "event_stage_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "active_section_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TournamentEvent>): TournamentEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TournamentEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TournamentEvent): TournamentEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 event_id */ 1:
                    message.eventId = reader.int32();
                    break;
                case /* optional string event_tag */ 2:
                    message.eventTag = reader.string();
                    break;
                case /* optional string event_name */ 3:
                    message.eventName = reader.string();
                    break;
                case /* optional uint32 event_time_start */ 4:
                    message.eventTimeStart = reader.uint32();
                    break;
                case /* optional uint32 event_time_end */ 5:
                    message.eventTimeEnd = reader.uint32();
                    break;
                case /* optional int32 event_public */ 6:
                    message.eventPublic = reader.int32();
                    break;
                case /* optional int32 event_stage_id */ 7:
                    message.eventStageId = reader.int32();
                    break;
                case /* optional string event_stage_name */ 8:
                    message.eventStageName = reader.string();
                    break;
                case /* optional uint32 active_section_id */ 9:
                    message.activeSectionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TournamentEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 event_id = 1; */
        if (message.eventId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.eventId);
        /* optional string event_tag = 2; */
        if (message.eventTag !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.eventTag);
        /* optional string event_name = 3; */
        if (message.eventName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.eventName);
        /* optional uint32 event_time_start = 4; */
        if (message.eventTimeStart !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.eventTimeStart);
        /* optional uint32 event_time_end = 5; */
        if (message.eventTimeEnd !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.eventTimeEnd);
        /* optional int32 event_public = 6; */
        if (message.eventPublic !== undefined)
            writer.tag(6, WireType.Varint).int32(message.eventPublic);
        /* optional int32 event_stage_id = 7; */
        if (message.eventStageId !== undefined)
            writer.tag(7, WireType.Varint).int32(message.eventStageId);
        /* optional string event_stage_name = 8; */
        if (message.eventStageName !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.eventStageName);
        /* optional uint32 active_section_id = 9; */
        if (message.activeSectionId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.activeSectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TournamentEvent
 */
export const TournamentEvent = new TournamentEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GlobalStatistics$Type extends MessageType<GlobalStatistics> {
    constructor() {
        super("GlobalStatistics", [
            { no: 1, name: "players_online", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "servers_online", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "players_searching", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "servers_available", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "ongoing_matches", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "search_time_avg", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "search_statistics", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DetailedSearchStatistic },
            { no: 8, name: "main_post_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "required_appid_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "pricesheet_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "twitch_streams_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "active_tournament_eventid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "active_survey_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "rtime32_cur", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "rtime32_event_start", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GlobalStatistics>): GlobalStatistics {
        const message = { searchStatistics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GlobalStatistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalStatistics): GlobalStatistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 players_online */ 1:
                    message.playersOnline = reader.uint32();
                    break;
                case /* optional uint32 servers_online */ 2:
                    message.serversOnline = reader.uint32();
                    break;
                case /* optional uint32 players_searching */ 3:
                    message.playersSearching = reader.uint32();
                    break;
                case /* optional uint32 servers_available */ 4:
                    message.serversAvailable = reader.uint32();
                    break;
                case /* optional uint32 ongoing_matches */ 5:
                    message.ongoingMatches = reader.uint32();
                    break;
                case /* optional uint32 search_time_avg */ 6:
                    message.searchTimeAvg = reader.uint32();
                    break;
                case /* repeated DetailedSearchStatistic search_statistics */ 7:
                    message.searchStatistics.push(DetailedSearchStatistic.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string main_post_url */ 8:
                    message.mainPostUrl = reader.string();
                    break;
                case /* optional uint32 required_appid_version */ 9:
                    message.requiredAppidVersion = reader.uint32();
                    break;
                case /* optional uint32 pricesheet_version */ 10:
                    message.pricesheetVersion = reader.uint32();
                    break;
                case /* optional uint32 twitch_streams_version */ 11:
                    message.twitchStreamsVersion = reader.uint32();
                    break;
                case /* optional uint32 active_tournament_eventid */ 12:
                    message.activeTournamentEventid = reader.uint32();
                    break;
                case /* optional uint32 active_survey_id */ 13:
                    message.activeSurveyId = reader.uint32();
                    break;
                case /* optional uint32 rtime32_cur */ 14:
                    message.rtime32Cur = reader.uint32();
                    break;
                case /* optional uint32 rtime32_event_start */ 15:
                    message.rtime32EventStart = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalStatistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 players_online = 1; */
        if (message.playersOnline !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.playersOnline);
        /* optional uint32 servers_online = 2; */
        if (message.serversOnline !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.serversOnline);
        /* optional uint32 players_searching = 3; */
        if (message.playersSearching !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.playersSearching);
        /* optional uint32 servers_available = 4; */
        if (message.serversAvailable !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.serversAvailable);
        /* optional uint32 ongoing_matches = 5; */
        if (message.ongoingMatches !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.ongoingMatches);
        /* optional uint32 search_time_avg = 6; */
        if (message.searchTimeAvg !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.searchTimeAvg);
        /* repeated DetailedSearchStatistic search_statistics = 7; */
        for (let i = 0; i < message.searchStatistics.length; i++)
            DetailedSearchStatistic.internalBinaryWrite(message.searchStatistics[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional string main_post_url = 8; */
        if (message.mainPostUrl !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.mainPostUrl);
        /* optional uint32 required_appid_version = 9; */
        if (message.requiredAppidVersion !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.requiredAppidVersion);
        /* optional uint32 pricesheet_version = 10; */
        if (message.pricesheetVersion !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.pricesheetVersion);
        /* optional uint32 twitch_streams_version = 11; */
        if (message.twitchStreamsVersion !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.twitchStreamsVersion);
        /* optional uint32 active_tournament_eventid = 12; */
        if (message.activeTournamentEventid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.activeTournamentEventid);
        /* optional uint32 active_survey_id = 13; */
        if (message.activeSurveyId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.activeSurveyId);
        /* optional uint32 rtime32_cur = 14; */
        if (message.rtime32Cur !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.rtime32Cur);
        /* optional uint32 rtime32_event_start = 15; */
        if (message.rtime32EventStart !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.rtime32EventStart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GlobalStatistics
 */
export const GlobalStatistics = new GlobalStatistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationalStatisticDescription$Type extends MessageType<OperationalStatisticDescription> {
    constructor() {
        super("OperationalStatisticDescription", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "idkey", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OperationalStatisticDescription>): OperationalStatisticDescription {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OperationalStatisticDescription>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperationalStatisticDescription): OperationalStatisticDescription {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional uint32 idkey */ 2:
                    message.idkey = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperationalStatisticDescription, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional uint32 idkey = 2; */
        if (message.idkey !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.idkey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OperationalStatisticDescription
 */
export const OperationalStatisticDescription = new OperationalStatisticDescription$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationalStatisticElement$Type extends MessageType<OperationalStatisticElement> {
    constructor() {
        super("OperationalStatisticElement", [
            { no: 1, name: "idkey", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OperationalStatisticElement>): OperationalStatisticElement {
        const message = { values: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OperationalStatisticElement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperationalStatisticElement): OperationalStatisticElement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 idkey */ 1:
                    message.idkey = reader.uint32();
                    break;
                case /* repeated int32 values */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.values.push(reader.int32());
                    else
                        message.values.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperationalStatisticElement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 idkey = 1; */
        if (message.idkey !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.idkey);
        /* repeated int32 values = 2; */
        for (let i = 0; i < message.values.length; i++)
            writer.tag(2, WireType.Varint).int32(message.values[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OperationalStatisticElement
 */
export const OperationalStatisticElement = new OperationalStatisticElement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationalStatisticsPacket$Type extends MessageType<OperationalStatisticsPacket> {
    constructor() {
        super("OperationalStatisticsPacket", [
            { no: 1, name: "packetid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "mstimestamp", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "values", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OperationalStatisticElement }
        ]);
    }
    create(value?: PartialMessage<OperationalStatisticsPacket>): OperationalStatisticsPacket {
        const message = { values: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OperationalStatisticsPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperationalStatisticsPacket): OperationalStatisticsPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 packetid */ 1:
                    message.packetid = reader.int32();
                    break;
                case /* optional int32 mstimestamp */ 2:
                    message.mstimestamp = reader.int32();
                    break;
                case /* repeated OperationalStatisticElement values */ 3:
                    message.values.push(OperationalStatisticElement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperationalStatisticsPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 packetid = 1; */
        if (message.packetid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.packetid);
        /* optional int32 mstimestamp = 2; */
        if (message.mstimestamp !== undefined)
            writer.tag(2, WireType.Varint).int32(message.mstimestamp);
        /* repeated OperationalStatisticElement values = 3; */
        for (let i = 0; i < message.values.length; i++)
            OperationalStatisticElement.internalBinaryWrite(message.values[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OperationalStatisticsPacket
 */
export const OperationalStatisticsPacket = new OperationalStatisticsPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRankingInfo$Type extends MessageType<PlayerRankingInfo> {
    constructor() {
        super("PlayerRankingInfo", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rank_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "wins", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "rank_change", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "rank_type_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "tv_control", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerRankingInfo>): PlayerRankingInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerRankingInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerRankingInfo): PlayerRankingInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 rank_id */ 2:
                    message.rankId = reader.uint32();
                    break;
                case /* optional uint32 wins */ 3:
                    message.wins = reader.uint32();
                    break;
                case /* optional float rank_change */ 4:
                    message.rankChange = reader.float();
                    break;
                case /* optional uint32 rank_type_id */ 6:
                    message.rankTypeId = reader.uint32();
                    break;
                case /* optional uint32 tv_control */ 7:
                    message.tvControl = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerRankingInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint32 rank_id = 2; */
        if (message.rankId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.rankId);
        /* optional uint32 wins = 3; */
        if (message.wins !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.wins);
        /* optional float rank_change = 4; */
        if (message.rankChange !== undefined)
            writer.tag(4, WireType.Bit32).float(message.rankChange);
        /* optional uint32 rank_type_id = 6; */
        if (message.rankTypeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.rankTypeId);
        /* optional uint32 tv_control = 7; */
        if (message.tvControl !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.tvControl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerRankingInfo
 */
export const PlayerRankingInfo = new PlayerRankingInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCommendationInfo$Type extends MessageType<PlayerCommendationInfo> {
    constructor() {
        super("PlayerCommendationInfo", [
            { no: 1, name: "cmd_friendly", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cmd_teaching", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cmd_leader", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCommendationInfo>): PlayerCommendationInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCommendationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCommendationInfo): PlayerCommendationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cmd_friendly */ 1:
                    message.cmdFriendly = reader.uint32();
                    break;
                case /* optional uint32 cmd_teaching */ 2:
                    message.cmdTeaching = reader.uint32();
                    break;
                case /* optional uint32 cmd_leader */ 4:
                    message.cmdLeader = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCommendationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cmd_friendly = 1; */
        if (message.cmdFriendly !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.cmdFriendly);
        /* optional uint32 cmd_teaching = 2; */
        if (message.cmdTeaching !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.cmdTeaching);
        /* optional uint32 cmd_leader = 4; */
        if (message.cmdLeader !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.cmdLeader);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerCommendationInfo
 */
export const PlayerCommendationInfo = new PlayerCommendationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMedalsInfo$Type extends MessageType<PlayerMedalsInfo> {
    constructor() {
        super("PlayerMedalsInfo", [
            { no: 7, name: "display_items_defidx", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "featured_display_item_defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerMedalsInfo>): PlayerMedalsInfo {
        const message = { displayItemsDefidx: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerMedalsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMedalsInfo): PlayerMedalsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 display_items_defidx */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.displayItemsDefidx.push(reader.uint32());
                    else
                        message.displayItemsDefidx.push(reader.uint32());
                    break;
                case /* optional uint32 featured_display_item_defidx */ 8:
                    message.featuredDisplayItemDefidx = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMedalsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 display_items_defidx = 7; */
        for (let i = 0; i < message.displayItemsDefidx.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.displayItemsDefidx[i]);
        /* optional uint32 featured_display_item_defidx = 8; */
        if (message.featuredDisplayItemDefidx !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.featuredDisplayItemDefidx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerMedalsInfo
 */
export const PlayerMedalsInfo = new PlayerMedalsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountActivity$Type extends MessageType<AccountActivity> {
    constructor() {
        super("AccountActivity", [
            { no: 1, name: "activity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "mode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "map", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "matchid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AccountActivity>): AccountActivity {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccountActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountActivity): AccountActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity */ 1:
                    message.activity = reader.uint32();
                    break;
                case /* optional uint32 mode */ 2:
                    message.mode = reader.uint32();
                    break;
                case /* optional uint32 map */ 3:
                    message.map = reader.uint32();
                    break;
                case /* optional uint64 matchid */ 4:
                    message.matchid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity = 1; */
        if (message.activity !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.activity);
        /* optional uint32 mode = 2; */
        if (message.mode !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.mode);
        /* optional uint32 map = 3; */
        if (message.map !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.map);
        /* optional uint64 matchid = 4; */
        if (message.matchid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.matchid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AccountActivity
 */
export const AccountActivity = new AccountActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TournamentMatchSetup$Type extends MessageType<TournamentMatchSetup> {
    constructor() {
        super("TournamentMatchSetup", [
            { no: 1, name: "event_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "team_id_ct", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "team_id_t", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "event_stage_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TournamentMatchSetup>): TournamentMatchSetup {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TournamentMatchSetup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TournamentMatchSetup): TournamentMatchSetup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 event_id */ 1:
                    message.eventId = reader.int32();
                    break;
                case /* optional int32 team_id_ct */ 2:
                    message.teamIdCt = reader.int32();
                    break;
                case /* optional int32 team_id_t */ 3:
                    message.teamIdT = reader.int32();
                    break;
                case /* optional int32 event_stage_id */ 4:
                    message.eventStageId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TournamentMatchSetup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 event_id = 1; */
        if (message.eventId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.eventId);
        /* optional int32 team_id_ct = 2; */
        if (message.teamIdCt !== undefined)
            writer.tag(2, WireType.Varint).int32(message.teamIdCt);
        /* optional int32 team_id_t = 3; */
        if (message.teamIdT !== undefined)
            writer.tag(3, WireType.Varint).int32(message.teamIdT);
        /* optional int32 event_stage_id = 4; */
        if (message.eventStageId !== undefined)
            writer.tag(4, WireType.Varint).int32(message.eventStageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TournamentMatchSetup
 */
export const TournamentMatchSetup = new TournamentMatchSetup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerHltvInfo$Type extends MessageType<ServerHltvInfo> {
    constructor() {
        super("ServerHltvInfo", [
            { no: 1, name: "tv_udp_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "tv_watch_key", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "tv_slots", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "tv_clients", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "tv_proxies", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "tv_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "game_mapgroup", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "game_map", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "tv_master_steamid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "tv_local_slots", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "tv_local_clients", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "tv_local_proxies", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "tv_relay_slots", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "tv_relay_clients", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "tv_relay_proxies", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "tv_relay_address", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 19, name: "tv_relay_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 20, name: "tv_relay_steamid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 21, name: "flags", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerHltvInfo>): ServerHltvInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerHltvInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerHltvInfo): ServerHltvInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tv_udp_port */ 1:
                    message.tvUdpPort = reader.uint32();
                    break;
                case /* optional uint64 tv_watch_key */ 2:
                    message.tvWatchKey = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 tv_slots */ 3:
                    message.tvSlots = reader.uint32();
                    break;
                case /* optional uint32 tv_clients */ 4:
                    message.tvClients = reader.uint32();
                    break;
                case /* optional uint32 tv_proxies */ 5:
                    message.tvProxies = reader.uint32();
                    break;
                case /* optional uint32 tv_time */ 6:
                    message.tvTime = reader.uint32();
                    break;
                case /* optional uint32 game_type */ 8:
                    message.gameType = reader.uint32();
                    break;
                case /* optional string game_mapgroup */ 9:
                    message.gameMapgroup = reader.string();
                    break;
                case /* optional string game_map */ 10:
                    message.gameMap = reader.string();
                    break;
                case /* optional uint64 tv_master_steamid */ 11:
                    message.tvMasterSteamid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 tv_local_slots */ 12:
                    message.tvLocalSlots = reader.uint32();
                    break;
                case /* optional uint32 tv_local_clients */ 13:
                    message.tvLocalClients = reader.uint32();
                    break;
                case /* optional uint32 tv_local_proxies */ 14:
                    message.tvLocalProxies = reader.uint32();
                    break;
                case /* optional uint32 tv_relay_slots */ 15:
                    message.tvRelaySlots = reader.uint32();
                    break;
                case /* optional uint32 tv_relay_clients */ 16:
                    message.tvRelayClients = reader.uint32();
                    break;
                case /* optional uint32 tv_relay_proxies */ 17:
                    message.tvRelayProxies = reader.uint32();
                    break;
                case /* optional uint32 tv_relay_address */ 18:
                    message.tvRelayAddress = reader.uint32();
                    break;
                case /* optional uint32 tv_relay_port */ 19:
                    message.tvRelayPort = reader.uint32();
                    break;
                case /* optional uint64 tv_relay_steamid */ 20:
                    message.tvRelaySteamid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 flags */ 21:
                    message.flags = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerHltvInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tv_udp_port = 1; */
        if (message.tvUdpPort !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.tvUdpPort);
        /* optional uint64 tv_watch_key = 2; */
        if (message.tvWatchKey !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.tvWatchKey);
        /* optional uint32 tv_slots = 3; */
        if (message.tvSlots !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.tvSlots);
        /* optional uint32 tv_clients = 4; */
        if (message.tvClients !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.tvClients);
        /* optional uint32 tv_proxies = 5; */
        if (message.tvProxies !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.tvProxies);
        /* optional uint32 tv_time = 6; */
        if (message.tvTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.tvTime);
        /* optional uint32 game_type = 8; */
        if (message.gameType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gameType);
        /* optional string game_mapgroup = 9; */
        if (message.gameMapgroup !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.gameMapgroup);
        /* optional string game_map = 10; */
        if (message.gameMap !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.gameMap);
        /* optional uint64 tv_master_steamid = 11; */
        if (message.tvMasterSteamid !== undefined)
            writer.tag(11, WireType.Varint).uint64(message.tvMasterSteamid);
        /* optional uint32 tv_local_slots = 12; */
        if (message.tvLocalSlots !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.tvLocalSlots);
        /* optional uint32 tv_local_clients = 13; */
        if (message.tvLocalClients !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.tvLocalClients);
        /* optional uint32 tv_local_proxies = 14; */
        if (message.tvLocalProxies !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.tvLocalProxies);
        /* optional uint32 tv_relay_slots = 15; */
        if (message.tvRelaySlots !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.tvRelaySlots);
        /* optional uint32 tv_relay_clients = 16; */
        if (message.tvRelayClients !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.tvRelayClients);
        /* optional uint32 tv_relay_proxies = 17; */
        if (message.tvRelayProxies !== undefined)
            writer.tag(17, WireType.Varint).uint32(message.tvRelayProxies);
        /* optional uint32 tv_relay_address = 18; */
        if (message.tvRelayAddress !== undefined)
            writer.tag(18, WireType.Varint).uint32(message.tvRelayAddress);
        /* optional uint32 tv_relay_port = 19; */
        if (message.tvRelayPort !== undefined)
            writer.tag(19, WireType.Varint).uint32(message.tvRelayPort);
        /* optional uint64 tv_relay_steamid = 20; */
        if (message.tvRelaySteamid !== undefined)
            writer.tag(20, WireType.Varint).uint64(message.tvRelaySteamid);
        /* optional uint32 flags = 21; */
        if (message.flags !== undefined)
            writer.tag(21, WireType.Varint).uint32(message.flags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerHltvInfo
 */
export const ServerHltvInfo = new ServerHltvInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IpAddressMask$Type extends MessageType<IpAddressMask> {
    constructor() {
        super("IpAddressMask", [
            { no: 1, name: "a", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "d", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "bits", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IpAddressMask>): IpAddressMask {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IpAddressMask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IpAddressMask): IpAddressMask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 a */ 1:
                    message.a = reader.uint32();
                    break;
                case /* optional uint32 b */ 2:
                    message.b = reader.uint32();
                    break;
                case /* optional uint32 c */ 3:
                    message.c = reader.uint32();
                    break;
                case /* optional uint32 d */ 4:
                    message.d = reader.uint32();
                    break;
                case /* optional uint32 bits */ 5:
                    message.bits = reader.uint32();
                    break;
                case /* optional uint32 token */ 6:
                    message.token = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IpAddressMask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 a = 1; */
        if (message.a !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.a);
        /* optional uint32 b = 2; */
        if (message.b !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.b);
        /* optional uint32 c = 3; */
        if (message.c !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.c);
        /* optional uint32 d = 4; */
        if (message.d !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.d);
        /* optional uint32 bits = 5; */
        if (message.bits !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.bits);
        /* optional uint32 token = 6; */
        if (message.token !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IpAddressMask
 */
export const IpAddressMask = new IpAddressMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCsgoSteamUserStatChange$Type extends MessageType<CMsgCsgoSteamUserStatChange> {
    constructor() {
        super("CMsgCsgoSteamUserStatChange", [
            { no: 1, name: "ecsgosteamuserstat", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "delta", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "absolute", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgCsgoSteamUserStatChange>): CMsgCsgoSteamUserStatChange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgCsgoSteamUserStatChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgCsgoSteamUserStatChange): CMsgCsgoSteamUserStatChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ecsgosteamuserstat */ 1:
                    message.ecsgosteamuserstat = reader.int32();
                    break;
                case /* optional int32 delta */ 2:
                    message.delta = reader.int32();
                    break;
                case /* optional bool absolute */ 3:
                    message.absolute = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgCsgoSteamUserStatChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ecsgosteamuserstat = 1; */
        if (message.ecsgosteamuserstat !== undefined)
            writer.tag(1, WireType.Varint).int32(message.ecsgosteamuserstat);
        /* optional int32 delta = 2; */
        if (message.delta !== undefined)
            writer.tag(2, WireType.Varint).int32(message.delta);
        /* optional bool absolute = 3; */
        if (message.absolute !== undefined)
            writer.tag(3, WireType.Varint).bool(message.absolute);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgCsgoSteamUserStatChange
 */
export const CMsgCsgoSteamUserStatChange = new CMsgCsgoSteamUserStatChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class XpProgressData$Type extends MessageType<XpProgressData> {
    constructor() {
        super("XpProgressData", [
            { no: 1, name: "xp_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "xp_category", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<XpProgressData>): XpProgressData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<XpProgressData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: XpProgressData): XpProgressData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 xp_points */ 1:
                    message.xpPoints = reader.uint32();
                    break;
                case /* optional int32 xp_category */ 2:
                    message.xpCategory = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: XpProgressData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 xp_points = 1; */
        if (message.xpPoints !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.xpPoints);
        /* optional int32 xp_category = 2; */
        if (message.xpCategory !== undefined)
            writer.tag(2, WireType.Varint).int32(message.xpCategory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message XpProgressData
 */
export const XpProgressData = new XpProgressData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchEndItemUpdates$Type extends MessageType<MatchEndItemUpdates> {
    constructor() {
        super("MatchEndItemUpdates", [
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "item_attr_defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "item_attr_delta_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchEndItemUpdates>): MatchEndItemUpdates {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchEndItemUpdates>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchEndItemUpdates): MatchEndItemUpdates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_id */ 1:
                    message.itemId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 item_attr_defidx */ 2:
                    message.itemAttrDefidx = reader.uint32();
                    break;
                case /* optional uint32 item_attr_delta_value */ 3:
                    message.itemAttrDeltaValue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchEndItemUpdates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemId);
        /* optional uint32 item_attr_defidx = 2; */
        if (message.itemAttrDefidx !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.itemAttrDefidx);
        /* optional uint32 item_attr_delta_value = 3; */
        if (message.itemAttrDeltaValue !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.itemAttrDeltaValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MatchEndItemUpdates
 */
export const MatchEndItemUpdates = new MatchEndItemUpdates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScoreLeaderboardData$Type extends MessageType<ScoreLeaderboardData> {
    constructor() {
        super("ScoreLeaderboardData", [
            { no: 1, name: "quest_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "accountentries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ScoreLeaderboardData_AccountEntries },
            { no: 5, name: "matchentries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ScoreLeaderboardData_Entry }
        ]);
    }
    create(value?: PartialMessage<ScoreLeaderboardData>): ScoreLeaderboardData {
        const message = { accountentries: [], matchentries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScoreLeaderboardData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreLeaderboardData): ScoreLeaderboardData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 quest_id */ 1:
                    message.questId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 score */ 2:
                    message.score = reader.uint32();
                    break;
                case /* repeated ScoreLeaderboardData.AccountEntries accountentries */ 3:
                    message.accountentries.push(ScoreLeaderboardData_AccountEntries.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ScoreLeaderboardData.Entry matchentries */ 5:
                    message.matchentries.push(ScoreLeaderboardData_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScoreLeaderboardData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 quest_id = 1; */
        if (message.questId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.questId);
        /* optional uint32 score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.score);
        /* repeated ScoreLeaderboardData.AccountEntries accountentries = 3; */
        for (let i = 0; i < message.accountentries.length; i++)
            ScoreLeaderboardData_AccountEntries.internalBinaryWrite(message.accountentries[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated ScoreLeaderboardData.Entry matchentries = 5; */
        for (let i = 0; i < message.matchentries.length; i++)
            ScoreLeaderboardData_Entry.internalBinaryWrite(message.matchentries[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScoreLeaderboardData
 */
export const ScoreLeaderboardData = new ScoreLeaderboardData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScoreLeaderboardData_Entry$Type extends MessageType<ScoreLeaderboardData_Entry> {
    constructor() {
        super("ScoreLeaderboardData.Entry", [
            { no: 1, name: "tag", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "val", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScoreLeaderboardData_Entry>): ScoreLeaderboardData_Entry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScoreLeaderboardData_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreLeaderboardData_Entry): ScoreLeaderboardData_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tag */ 1:
                    message.tag = reader.uint32();
                    break;
                case /* optional uint32 val */ 2:
                    message.val = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScoreLeaderboardData_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tag = 1; */
        if (message.tag !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.tag);
        /* optional uint32 val = 2; */
        if (message.val !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.val);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScoreLeaderboardData.Entry
 */
export const ScoreLeaderboardData_Entry = new ScoreLeaderboardData_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScoreLeaderboardData_AccountEntries$Type extends MessageType<ScoreLeaderboardData_AccountEntries> {
    constructor() {
        super("ScoreLeaderboardData.AccountEntries", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ScoreLeaderboardData_Entry }
        ]);
    }
    create(value?: PartialMessage<ScoreLeaderboardData_AccountEntries>): ScoreLeaderboardData_AccountEntries {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScoreLeaderboardData_AccountEntries>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreLeaderboardData_AccountEntries): ScoreLeaderboardData_AccountEntries {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* repeated ScoreLeaderboardData.Entry entries */ 2:
                    message.entries.push(ScoreLeaderboardData_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScoreLeaderboardData_AccountEntries, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* repeated ScoreLeaderboardData.Entry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            ScoreLeaderboardData_Entry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScoreLeaderboardData.AccountEntries
 */
export const ScoreLeaderboardData_AccountEntries = new ScoreLeaderboardData_AccountEntries$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerQuestData$Type extends MessageType<PlayerQuestData> {
    constructor() {
        super("PlayerQuestData", [
            { no: 1, name: "quester_account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "quest_item_data", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlayerQuestData_QuestItemData },
            { no: 3, name: "xp_progress_data", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => XpProgressData },
            { no: 4, name: "time_played", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mm_game_mode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "item_updates", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MatchEndItemUpdates },
            { no: 7, name: "operation_points_eligible", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "userstatchanges", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgCsgoSteamUserStatChange }
        ]);
    }
    create(value?: PartialMessage<PlayerQuestData>): PlayerQuestData {
        const message = { questItemData: [], xpProgressData: [], itemUpdates: [], userstatchanges: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerQuestData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerQuestData): PlayerQuestData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quester_account_id */ 1:
                    message.questerAccountId = reader.uint32();
                    break;
                case /* repeated PlayerQuestData.QuestItemData quest_item_data */ 2:
                    message.questItemData.push(PlayerQuestData_QuestItemData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated XpProgressData xp_progress_data */ 3:
                    message.xpProgressData.push(XpProgressData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 time_played */ 4:
                    message.timePlayed = reader.uint32();
                    break;
                case /* optional uint32 mm_game_mode */ 5:
                    message.mmGameMode = reader.uint32();
                    break;
                case /* repeated MatchEndItemUpdates item_updates */ 6:
                    message.itemUpdates.push(MatchEndItemUpdates.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool operation_points_eligible */ 7:
                    message.operationPointsEligible = reader.bool();
                    break;
                case /* repeated CMsgCsgoSteamUserStatChange userstatchanges */ 8:
                    message.userstatchanges.push(CMsgCsgoSteamUserStatChange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerQuestData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quester_account_id = 1; */
        if (message.questerAccountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.questerAccountId);
        /* repeated PlayerQuestData.QuestItemData quest_item_data = 2; */
        for (let i = 0; i < message.questItemData.length; i++)
            PlayerQuestData_QuestItemData.internalBinaryWrite(message.questItemData[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated XpProgressData xp_progress_data = 3; */
        for (let i = 0; i < message.xpProgressData.length; i++)
            XpProgressData.internalBinaryWrite(message.xpProgressData[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 time_played = 4; */
        if (message.timePlayed !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.timePlayed);
        /* optional uint32 mm_game_mode = 5; */
        if (message.mmGameMode !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.mmGameMode);
        /* repeated MatchEndItemUpdates item_updates = 6; */
        for (let i = 0; i < message.itemUpdates.length; i++)
            MatchEndItemUpdates.internalBinaryWrite(message.itemUpdates[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional bool operation_points_eligible = 7; */
        if (message.operationPointsEligible !== undefined)
            writer.tag(7, WireType.Varint).bool(message.operationPointsEligible);
        /* repeated CMsgCsgoSteamUserStatChange userstatchanges = 8; */
        for (let i = 0; i < message.userstatchanges.length; i++)
            CMsgCsgoSteamUserStatChange.internalBinaryWrite(message.userstatchanges[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerQuestData
 */
export const PlayerQuestData = new PlayerQuestData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerQuestData_QuestItemData$Type extends MessageType<PlayerQuestData_QuestItemData> {
    constructor() {
        super("PlayerQuestData.QuestItemData", [
            { no: 1, name: "quest_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "quest_normal_points_earned", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "quest_bonus_points_earned", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerQuestData_QuestItemData>): PlayerQuestData_QuestItemData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerQuestData_QuestItemData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerQuestData_QuestItemData): PlayerQuestData_QuestItemData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 quest_id */ 1:
                    message.questId = reader.uint64().toBigInt();
                    break;
                case /* optional int32 quest_normal_points_earned */ 2:
                    message.questNormalPointsEarned = reader.int32();
                    break;
                case /* optional int32 quest_bonus_points_earned */ 3:
                    message.questBonusPointsEarned = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerQuestData_QuestItemData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 quest_id = 1; */
        if (message.questId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.questId);
        /* optional int32 quest_normal_points_earned = 2; */
        if (message.questNormalPointsEarned !== undefined)
            writer.tag(2, WireType.Varint).int32(message.questNormalPointsEarned);
        /* optional int32 quest_bonus_points_earned = 3; */
        if (message.questBonusPointsEarned !== undefined)
            writer.tag(3, WireType.Varint).int32(message.questBonusPointsEarned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerQuestData.QuestItemData
 */
export const PlayerQuestData_QuestItemData = new PlayerQuestData_QuestItemData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeepPlayerStatsEntry$Type extends MessageType<DeepPlayerStatsEntry> {
    constructor() {
        super("DeepPlayerStatsEntry", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "mm_game_mode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "mapid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "b_starting_ct", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "match_outcome", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "rounds_won", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "rounds_lost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "stat_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stat_deaths", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stat_mvps", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "enemy_kills", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "enemy_headshots", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "enemy_2ks", kind: "scalar", jsonName: "enemy2ks", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "enemy_3ks", kind: "scalar", jsonName: "enemy3ks", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "enemy_4ks", kind: "scalar", jsonName: "enemy4ks", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 19, name: "total_damage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 23, name: "engagements_entry_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 24, name: "engagements_entry_wins", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 25, name: "engagements_1v1_count", kind: "scalar", jsonName: "engagements1v1Count", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 26, name: "engagements_1v1_wins", kind: "scalar", jsonName: "engagements1v1Wins", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 27, name: "engagements_1v2_count", kind: "scalar", jsonName: "engagements1v2Count", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 28, name: "engagements_1v2_wins", kind: "scalar", jsonName: "engagements1v2Wins", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 29, name: "utility_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 30, name: "utility_success", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 32, name: "flash_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 33, name: "flash_success", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 34, name: "mates", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeepPlayerStatsEntry>): DeepPlayerStatsEntry {
        const message = { mates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeepPlayerStatsEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeepPlayerStatsEntry): DeepPlayerStatsEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint64 match_id */ 2:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 mm_game_mode */ 3:
                    message.mmGameMode = reader.uint32();
                    break;
                case /* optional uint32 mapid */ 4:
                    message.mapid = reader.uint32();
                    break;
                case /* optional bool b_starting_ct */ 5:
                    message.bStartingCt = reader.bool();
                    break;
                case /* optional uint32 match_outcome */ 6:
                    message.matchOutcome = reader.uint32();
                    break;
                case /* optional uint32 rounds_won */ 7:
                    message.roundsWon = reader.uint32();
                    break;
                case /* optional uint32 rounds_lost */ 8:
                    message.roundsLost = reader.uint32();
                    break;
                case /* optional uint32 stat_score */ 9:
                    message.statScore = reader.uint32();
                    break;
                case /* optional uint32 stat_deaths */ 12:
                    message.statDeaths = reader.uint32();
                    break;
                case /* optional uint32 stat_mvps */ 13:
                    message.statMvps = reader.uint32();
                    break;
                case /* optional uint32 enemy_kills */ 14:
                    message.enemyKills = reader.uint32();
                    break;
                case /* optional uint32 enemy_headshots */ 15:
                    message.enemyHeadshots = reader.uint32();
                    break;
                case /* optional uint32 enemy_2ks = 16 [json_name = "enemy2ks"];*/ 16:
                    message.enemy2Ks = reader.uint32();
                    break;
                case /* optional uint32 enemy_3ks = 17 [json_name = "enemy3ks"];*/ 17:
                    message.enemy3Ks = reader.uint32();
                    break;
                case /* optional uint32 enemy_4ks = 18 [json_name = "enemy4ks"];*/ 18:
                    message.enemy4Ks = reader.uint32();
                    break;
                case /* optional uint32 total_damage */ 19:
                    message.totalDamage = reader.uint32();
                    break;
                case /* optional uint32 engagements_entry_count */ 23:
                    message.engagementsEntryCount = reader.uint32();
                    break;
                case /* optional uint32 engagements_entry_wins */ 24:
                    message.engagementsEntryWins = reader.uint32();
                    break;
                case /* optional uint32 engagements_1v1_count = 25 [json_name = "engagements1v1Count"];*/ 25:
                    message.engagements1V1Count = reader.uint32();
                    break;
                case /* optional uint32 engagements_1v1_wins = 26 [json_name = "engagements1v1Wins"];*/ 26:
                    message.engagements1V1Wins = reader.uint32();
                    break;
                case /* optional uint32 engagements_1v2_count = 27 [json_name = "engagements1v2Count"];*/ 27:
                    message.engagements1V2Count = reader.uint32();
                    break;
                case /* optional uint32 engagements_1v2_wins = 28 [json_name = "engagements1v2Wins"];*/ 28:
                    message.engagements1V2Wins = reader.uint32();
                    break;
                case /* optional uint32 utility_count */ 29:
                    message.utilityCount = reader.uint32();
                    break;
                case /* optional uint32 utility_success */ 30:
                    message.utilitySuccess = reader.uint32();
                    break;
                case /* optional uint32 flash_count */ 32:
                    message.flashCount = reader.uint32();
                    break;
                case /* optional uint32 flash_success */ 33:
                    message.flashSuccess = reader.uint32();
                    break;
                case /* repeated uint32 mates */ 34:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.mates.push(reader.uint32());
                    else
                        message.mates.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeepPlayerStatsEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint64 match_id = 2; */
        if (message.matchId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.matchId);
        /* optional uint32 mm_game_mode = 3; */
        if (message.mmGameMode !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.mmGameMode);
        /* optional uint32 mapid = 4; */
        if (message.mapid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.mapid);
        /* optional bool b_starting_ct = 5; */
        if (message.bStartingCt !== undefined)
            writer.tag(5, WireType.Varint).bool(message.bStartingCt);
        /* optional uint32 match_outcome = 6; */
        if (message.matchOutcome !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.matchOutcome);
        /* optional uint32 rounds_won = 7; */
        if (message.roundsWon !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.roundsWon);
        /* optional uint32 rounds_lost = 8; */
        if (message.roundsLost !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.roundsLost);
        /* optional uint32 stat_score = 9; */
        if (message.statScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.statScore);
        /* optional uint32 stat_deaths = 12; */
        if (message.statDeaths !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.statDeaths);
        /* optional uint32 stat_mvps = 13; */
        if (message.statMvps !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.statMvps);
        /* optional uint32 enemy_kills = 14; */
        if (message.enemyKills !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.enemyKills);
        /* optional uint32 enemy_headshots = 15; */
        if (message.enemyHeadshots !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.enemyHeadshots);
        /* optional uint32 enemy_2ks = 16 [json_name = "enemy2ks"]; */
        if (message.enemy2Ks !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.enemy2Ks);
        /* optional uint32 enemy_3ks = 17 [json_name = "enemy3ks"]; */
        if (message.enemy3Ks !== undefined)
            writer.tag(17, WireType.Varint).uint32(message.enemy3Ks);
        /* optional uint32 enemy_4ks = 18 [json_name = "enemy4ks"]; */
        if (message.enemy4Ks !== undefined)
            writer.tag(18, WireType.Varint).uint32(message.enemy4Ks);
        /* optional uint32 total_damage = 19; */
        if (message.totalDamage !== undefined)
            writer.tag(19, WireType.Varint).uint32(message.totalDamage);
        /* optional uint32 engagements_entry_count = 23; */
        if (message.engagementsEntryCount !== undefined)
            writer.tag(23, WireType.Varint).uint32(message.engagementsEntryCount);
        /* optional uint32 engagements_entry_wins = 24; */
        if (message.engagementsEntryWins !== undefined)
            writer.tag(24, WireType.Varint).uint32(message.engagementsEntryWins);
        /* optional uint32 engagements_1v1_count = 25 [json_name = "engagements1v1Count"]; */
        if (message.engagements1V1Count !== undefined)
            writer.tag(25, WireType.Varint).uint32(message.engagements1V1Count);
        /* optional uint32 engagements_1v1_wins = 26 [json_name = "engagements1v1Wins"]; */
        if (message.engagements1V1Wins !== undefined)
            writer.tag(26, WireType.Varint).uint32(message.engagements1V1Wins);
        /* optional uint32 engagements_1v2_count = 27 [json_name = "engagements1v2Count"]; */
        if (message.engagements1V2Count !== undefined)
            writer.tag(27, WireType.Varint).uint32(message.engagements1V2Count);
        /* optional uint32 engagements_1v2_wins = 28 [json_name = "engagements1v2Wins"]; */
        if (message.engagements1V2Wins !== undefined)
            writer.tag(28, WireType.Varint).uint32(message.engagements1V2Wins);
        /* optional uint32 utility_count = 29; */
        if (message.utilityCount !== undefined)
            writer.tag(29, WireType.Varint).uint32(message.utilityCount);
        /* optional uint32 utility_success = 30; */
        if (message.utilitySuccess !== undefined)
            writer.tag(30, WireType.Varint).uint32(message.utilitySuccess);
        /* optional uint32 flash_count = 32; */
        if (message.flashCount !== undefined)
            writer.tag(32, WireType.Varint).uint32(message.flashCount);
        /* optional uint32 flash_success = 33; */
        if (message.flashSuccess !== undefined)
            writer.tag(33, WireType.Varint).uint32(message.flashSuccess);
        /* repeated uint32 mates = 34; */
        for (let i = 0; i < message.mates.length; i++)
            writer.tag(34, WireType.Varint).uint32(message.mates[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeepPlayerStatsEntry
 */
export const DeepPlayerStatsEntry = new DeepPlayerStatsEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeepPlayerMatchEvent$Type extends MessageType<DeepPlayerMatchEvent> {
    constructor() {
        super("DeepPlayerMatchEvent", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "event_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "event_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "b_playing_ct", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "user_pos_x", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "user_pos_y", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "user_pos_z", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "user_defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "other_pos_x", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "other_pos_y", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "other_pos_z", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "other_defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "event_data", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeepPlayerMatchEvent>): DeepPlayerMatchEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeepPlayerMatchEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeepPlayerMatchEvent): DeepPlayerMatchEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint64 match_id */ 2:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 event_id */ 3:
                    message.eventId = reader.uint32();
                    break;
                case /* optional uint32 event_type */ 4:
                    message.eventType = reader.uint32();
                    break;
                case /* optional bool b_playing_ct */ 5:
                    message.bPlayingCt = reader.bool();
                    break;
                case /* optional int32 user_pos_x */ 6:
                    message.userPosX = reader.int32();
                    break;
                case /* optional int32 user_pos_y */ 7:
                    message.userPosY = reader.int32();
                    break;
                case /* optional int32 user_pos_z */ 12:
                    message.userPosZ = reader.int32();
                    break;
                case /* optional uint32 user_defidx */ 8:
                    message.userDefidx = reader.uint32();
                    break;
                case /* optional int32 other_pos_x */ 9:
                    message.otherPosX = reader.int32();
                    break;
                case /* optional int32 other_pos_y */ 10:
                    message.otherPosY = reader.int32();
                    break;
                case /* optional int32 other_pos_z */ 13:
                    message.otherPosZ = reader.int32();
                    break;
                case /* optional uint32 other_defidx */ 11:
                    message.otherDefidx = reader.uint32();
                    break;
                case /* optional int32 event_data */ 14:
                    message.eventData = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeepPlayerMatchEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint64 match_id = 2; */
        if (message.matchId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.matchId);
        /* optional uint32 event_id = 3; */
        if (message.eventId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.eventId);
        /* optional uint32 event_type = 4; */
        if (message.eventType !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.eventType);
        /* optional bool b_playing_ct = 5; */
        if (message.bPlayingCt !== undefined)
            writer.tag(5, WireType.Varint).bool(message.bPlayingCt);
        /* optional int32 user_pos_x = 6; */
        if (message.userPosX !== undefined)
            writer.tag(6, WireType.Varint).int32(message.userPosX);
        /* optional int32 user_pos_y = 7; */
        if (message.userPosY !== undefined)
            writer.tag(7, WireType.Varint).int32(message.userPosY);
        /* optional int32 user_pos_z = 12; */
        if (message.userPosZ !== undefined)
            writer.tag(12, WireType.Varint).int32(message.userPosZ);
        /* optional uint32 user_defidx = 8; */
        if (message.userDefidx !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.userDefidx);
        /* optional int32 other_pos_x = 9; */
        if (message.otherPosX !== undefined)
            writer.tag(9, WireType.Varint).int32(message.otherPosX);
        /* optional int32 other_pos_y = 10; */
        if (message.otherPosY !== undefined)
            writer.tag(10, WireType.Varint).int32(message.otherPosY);
        /* optional int32 other_pos_z = 13; */
        if (message.otherPosZ !== undefined)
            writer.tag(13, WireType.Varint).int32(message.otherPosZ);
        /* optional uint32 other_defidx = 11; */
        if (message.otherDefidx !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.otherDefidx);
        /* optional int32 event_data = 14; */
        if (message.eventData !== undefined)
            writer.tag(14, WireType.Varint).int32(message.eventData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeepPlayerMatchEvent
 */
export const DeepPlayerMatchEvent = new DeepPlayerMatchEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGC_ServerQuestUpdateData$Type extends MessageType<CMsgGC_ServerQuestUpdateData> {
    constructor() {
        super("CMsgGC_ServerQuestUpdateData", [
            { no: 1, name: "player_quest_data", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlayerQuestData },
            { no: 2, name: "binary_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "mm_game_mode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "missionlbsdata", kind: "message", T: () => ScoreLeaderboardData }
        ]);
    }
    create(value?: PartialMessage<CMsgGC_ServerQuestUpdateData>): CMsgGC_ServerQuestUpdateData {
        const message = { playerQuestData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGC_ServerQuestUpdateData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGC_ServerQuestUpdateData): CMsgGC_ServerQuestUpdateData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PlayerQuestData player_quest_data */ 1:
                    message.playerQuestData.push(PlayerQuestData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bytes binary_data */ 2:
                    message.binaryData = reader.bytes();
                    break;
                case /* optional uint32 mm_game_mode */ 3:
                    message.mmGameMode = reader.uint32();
                    break;
                case /* optional ScoreLeaderboardData missionlbsdata */ 4:
                    message.missionlbsdata = ScoreLeaderboardData.internalBinaryRead(reader, reader.uint32(), options, message.missionlbsdata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGC_ServerQuestUpdateData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PlayerQuestData player_quest_data = 1; */
        for (let i = 0; i < message.playerQuestData.length; i++)
            PlayerQuestData.internalBinaryWrite(message.playerQuestData[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes binary_data = 2; */
        if (message.binaryData !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.binaryData);
        /* optional uint32 mm_game_mode = 3; */
        if (message.mmGameMode !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.mmGameMode);
        /* optional ScoreLeaderboardData missionlbsdata = 4; */
        if (message.missionlbsdata)
            ScoreLeaderboardData.internalBinaryWrite(message.missionlbsdata, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGC_ServerQuestUpdateData
 */
export const CMsgGC_ServerQuestUpdateData = new CMsgGC_ServerQuestUpdateData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGCOperationalStats", [
            { no: 1, name: "packetid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "namekeys", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OperationalStatisticDescription },
            { no: 3, name: "packets", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OperationalStatisticsPacket }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>): CMsgGCCStrike15_v2_MatchmakingGCOperationalStats {
        const message = { namekeys: [], packets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats): CMsgGCCStrike15_v2_MatchmakingGCOperationalStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 packetid */ 1:
                    message.packetid = reader.int32();
                    break;
                case /* repeated OperationalStatisticDescription namekeys */ 2:
                    message.namekeys.push(OperationalStatisticDescription.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated OperationalStatisticsPacket packets */ 3:
                    message.packets.push(OperationalStatisticsPacket.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 packetid = 1; */
        if (message.packetid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.packetid);
        /* repeated OperationalStatisticDescription namekeys = 2; */
        for (let i = 0; i < message.namekeys.length; i++)
            OperationalStatisticDescription.internalBinaryWrite(message.namekeys[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated OperationalStatisticsPacket packets = 3; */
        for (let i = 0; i < message.packets.length; i++)
            OperationalStatisticsPacket.internalBinaryWrite(message.packets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
 */
export const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats = new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm", [
            { no: 1, name: "token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "exchange", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>): CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm): CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 token */ 1:
                    message.token = reader.uint32();
                    break;
                case /* optional uint32 stamp */ 2:
                    message.stamp = reader.uint32();
                    break;
                case /* optional uint64 exchange */ 3:
                    message.exchange = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 token = 1; */
        if (message.token !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.token);
        /* optional uint32 stamp = 2; */
        if (message.stamp !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stamp);
        /* optional uint64 exchange = 3; */
        if (message.exchange !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.exchange);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm = new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ServerReservationUpdate$Type extends MessageType<CMsgGCCStrike15_v2_GC2ServerReservationUpdate> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ServerReservationUpdate", [
            { no: 1, name: "viewers_external_total", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "viewers_external_steam", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>): CMsgGCCStrike15_v2_GC2ServerReservationUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ServerReservationUpdate): CMsgGCCStrike15_v2_GC2ServerReservationUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 viewers_external_total */ 1:
                    message.viewersExternalTotal = reader.uint32();
                    break;
                case /* optional uint32 viewers_external_steam */ 2:
                    message.viewersExternalSteam = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ServerReservationUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 viewers_external_total = 1; */
        if (message.viewersExternalTotal !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.viewersExternalTotal);
        /* optional uint32 viewers_external_steam = 2; */
        if (message.viewersExternalSteam !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.viewersExternalSteam);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ServerReservationUpdate
 */
export const CMsgGCCStrike15_v2_GC2ServerReservationUpdate = new CMsgGCCStrike15_v2_GC2ServerReservationUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingStart$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingStart> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingStart", [
            { no: 1, name: "account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "ticket_data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "client_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "tournament_match", kind: "message", T: () => TournamentMatchSetup },
            { no: 6, name: "prime_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "tv_control", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingStart>): CMsgGCCStrike15_v2_MatchmakingStart {
        const message = { accountIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingStart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingStart): CMsgGCCStrike15_v2_MatchmakingStart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 account_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountIds.push(reader.uint32());
                    else
                        message.accountIds.push(reader.uint32());
                    break;
                case /* optional uint32 game_type */ 2:
                    message.gameType = reader.uint32();
                    break;
                case /* optional string ticket_data */ 3:
                    message.ticketData = reader.string();
                    break;
                case /* optional uint32 client_version */ 4:
                    message.clientVersion = reader.uint32();
                    break;
                case /* optional TournamentMatchSetup tournament_match */ 5:
                    message.tournamentMatch = TournamentMatchSetup.internalBinaryRead(reader, reader.uint32(), options, message.tournamentMatch);
                    break;
                case /* optional bool prime_only */ 6:
                    message.primeOnly = reader.bool();
                    break;
                case /* optional uint32 tv_control */ 7:
                    message.tvControl = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingStart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 account_ids = 1; */
        for (let i = 0; i < message.accountIds.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.accountIds[i]);
        /* optional uint32 game_type = 2; */
        if (message.gameType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gameType);
        /* optional string ticket_data = 3; */
        if (message.ticketData !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.ticketData);
        /* optional uint32 client_version = 4; */
        if (message.clientVersion !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.clientVersion);
        /* optional TournamentMatchSetup tournament_match = 5; */
        if (message.tournamentMatch)
            TournamentMatchSetup.internalBinaryWrite(message.tournamentMatch, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional bool prime_only = 6; */
        if (message.primeOnly !== undefined)
            writer.tag(6, WireType.Varint).bool(message.primeOnly);
        /* optional uint32 tv_control = 7; */
        if (message.tvControl !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.tvControl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingStart
 */
export const CMsgGCCStrike15_v2_MatchmakingStart = new CMsgGCCStrike15_v2_MatchmakingStart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingStop$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingStop> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingStop", [
            { no: 1, name: "abandon", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingStop>): CMsgGCCStrike15_v2_MatchmakingStop {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingStop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingStop): CMsgGCCStrike15_v2_MatchmakingStop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 abandon */ 1:
                    message.abandon = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 abandon = 1; */
        if (message.abandon !== undefined)
            writer.tag(1, WireType.Varint).int32(message.abandon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingStop
 */
export const CMsgGCCStrike15_v2_MatchmakingStop = new CMsgGCCStrike15_v2_MatchmakingStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingClient2ServerPing", [
            { no: 1, name: "gameserverpings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GameServerPing },
            { no: 2, name: "offset_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "final_batch", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "data_center_pings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DataCenterPing },
            { no: 5, name: "max_ping", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "test_token", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>): CMsgGCCStrike15_v2_MatchmakingClient2ServerPing {
        const message = { gameserverpings: [], dataCenterPings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing): CMsgGCCStrike15_v2_MatchmakingClient2ServerPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GameServerPing gameserverpings */ 1:
                    message.gameserverpings.push(GameServerPing.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 offset_index */ 2:
                    message.offsetIndex = reader.int32();
                    break;
                case /* optional int32 final_batch */ 3:
                    message.finalBatch = reader.int32();
                    break;
                case /* repeated DataCenterPing data_center_pings */ 4:
                    message.dataCenterPings.push(DataCenterPing.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 max_ping */ 5:
                    message.maxPing = reader.uint32();
                    break;
                case /* optional fixed32 test_token */ 6:
                    message.testToken = reader.fixed32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GameServerPing gameserverpings = 1; */
        for (let i = 0; i < message.gameserverpings.length; i++)
            GameServerPing.internalBinaryWrite(message.gameserverpings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 offset_index = 2; */
        if (message.offsetIndex !== undefined)
            writer.tag(2, WireType.Varint).int32(message.offsetIndex);
        /* optional int32 final_batch = 3; */
        if (message.finalBatch !== undefined)
            writer.tag(3, WireType.Varint).int32(message.finalBatch);
        /* repeated DataCenterPing data_center_pings = 4; */
        for (let i = 0; i < message.dataCenterPings.length; i++)
            DataCenterPing.internalBinaryWrite(message.dataCenterPings[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 max_ping = 5; */
        if (message.maxPing !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.maxPing);
        /* optional fixed32 test_token = 6; */
        if (message.testToken !== undefined)
            writer.tag(6, WireType.Bit32).fixed32(message.testToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
 */
export const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing = new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate", [
            { no: 1, name: "matchmaking", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "waiting_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ongoingmatch_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "global_stats", kind: "message", T: () => GlobalStatistics },
            { no: 8, name: "failping_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "penalty_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "failready_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "vacbanned_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "server_ipaddress_mask", kind: "message", T: () => IpAddressMask },
            { no: 13, name: "notes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note },
            { no: 14, name: "penalty_account_id_sessions_green", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "insufficientlevel_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "vsncheck_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "launcher_mismatch_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "insecure_account_id_sessions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>): CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate {
        const message = { waitingAccountIdSessions: [], ongoingmatchAccountIdSessions: [], failpingAccountIdSessions: [], penaltyAccountIdSessions: [], failreadyAccountIdSessions: [], vacbannedAccountIdSessions: [], notes: [], penaltyAccountIdSessionsGreen: [], insufficientlevelSessions: [], vsncheckAccountIdSessions: [], launcherMismatchSessions: [], insecureAccountIdSessions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate): CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 matchmaking */ 1:
                    message.matchmaking = reader.int32();
                    break;
                case /* repeated uint32 waiting_account_id_sessions */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.waitingAccountIdSessions.push(reader.uint32());
                    else
                        message.waitingAccountIdSessions.push(reader.uint32());
                    break;
                case /* optional string error */ 3:
                    message.error = reader.string();
                    break;
                case /* repeated uint32 ongoingmatch_account_id_sessions */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ongoingmatchAccountIdSessions.push(reader.uint32());
                    else
                        message.ongoingmatchAccountIdSessions.push(reader.uint32());
                    break;
                case /* optional GlobalStatistics global_stats */ 7:
                    message.globalStats = GlobalStatistics.internalBinaryRead(reader, reader.uint32(), options, message.globalStats);
                    break;
                case /* repeated uint32 failping_account_id_sessions */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.failpingAccountIdSessions.push(reader.uint32());
                    else
                        message.failpingAccountIdSessions.push(reader.uint32());
                    break;
                case /* repeated uint32 penalty_account_id_sessions */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.penaltyAccountIdSessions.push(reader.uint32());
                    else
                        message.penaltyAccountIdSessions.push(reader.uint32());
                    break;
                case /* repeated uint32 failready_account_id_sessions */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.failreadyAccountIdSessions.push(reader.uint32());
                    else
                        message.failreadyAccountIdSessions.push(reader.uint32());
                    break;
                case /* repeated uint32 vacbanned_account_id_sessions */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vacbannedAccountIdSessions.push(reader.uint32());
                    else
                        message.vacbannedAccountIdSessions.push(reader.uint32());
                    break;
                case /* optional IpAddressMask server_ipaddress_mask */ 12:
                    message.serverIpaddressMask = IpAddressMask.internalBinaryRead(reader, reader.uint32(), options, message.serverIpaddressMask);
                    break;
                case /* repeated CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes */ 13:
                    message.notes.push(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 penalty_account_id_sessions_green */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.penaltyAccountIdSessionsGreen.push(reader.uint32());
                    else
                        message.penaltyAccountIdSessionsGreen.push(reader.uint32());
                    break;
                case /* repeated uint32 insufficientlevel_sessions */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.insufficientlevelSessions.push(reader.uint32());
                    else
                        message.insufficientlevelSessions.push(reader.uint32());
                    break;
                case /* repeated uint32 vsncheck_account_id_sessions */ 16:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vsncheckAccountIdSessions.push(reader.uint32());
                    else
                        message.vsncheckAccountIdSessions.push(reader.uint32());
                    break;
                case /* repeated uint32 launcher_mismatch_sessions */ 17:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.launcherMismatchSessions.push(reader.uint32());
                    else
                        message.launcherMismatchSessions.push(reader.uint32());
                    break;
                case /* repeated uint32 insecure_account_id_sessions */ 18:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.insecureAccountIdSessions.push(reader.uint32());
                    else
                        message.insecureAccountIdSessions.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 matchmaking = 1; */
        if (message.matchmaking !== undefined)
            writer.tag(1, WireType.Varint).int32(message.matchmaking);
        /* repeated uint32 waiting_account_id_sessions = 2; */
        for (let i = 0; i < message.waitingAccountIdSessions.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.waitingAccountIdSessions[i]);
        /* optional string error = 3; */
        if (message.error !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.error);
        /* repeated uint32 ongoingmatch_account_id_sessions = 6; */
        for (let i = 0; i < message.ongoingmatchAccountIdSessions.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.ongoingmatchAccountIdSessions[i]);
        /* optional GlobalStatistics global_stats = 7; */
        if (message.globalStats)
            GlobalStatistics.internalBinaryWrite(message.globalStats, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 failping_account_id_sessions = 8; */
        for (let i = 0; i < message.failpingAccountIdSessions.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.failpingAccountIdSessions[i]);
        /* repeated uint32 penalty_account_id_sessions = 9; */
        for (let i = 0; i < message.penaltyAccountIdSessions.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.penaltyAccountIdSessions[i]);
        /* repeated uint32 failready_account_id_sessions = 10; */
        for (let i = 0; i < message.failreadyAccountIdSessions.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.failreadyAccountIdSessions[i]);
        /* repeated uint32 vacbanned_account_id_sessions = 11; */
        for (let i = 0; i < message.vacbannedAccountIdSessions.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.vacbannedAccountIdSessions[i]);
        /* optional IpAddressMask server_ipaddress_mask = 12; */
        if (message.serverIpaddressMask)
            IpAddressMask.internalBinaryWrite(message.serverIpaddressMask, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13; */
        for (let i = 0; i < message.notes.length; i++)
            CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note.internalBinaryWrite(message.notes[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 penalty_account_id_sessions_green = 14; */
        for (let i = 0; i < message.penaltyAccountIdSessionsGreen.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.penaltyAccountIdSessionsGreen[i]);
        /* repeated uint32 insufficientlevel_sessions = 15; */
        for (let i = 0; i < message.insufficientlevelSessions.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.insufficientlevelSessions[i]);
        /* repeated uint32 vsncheck_account_id_sessions = 16; */
        for (let i = 0; i < message.vsncheckAccountIdSessions.length; i++)
            writer.tag(16, WireType.Varint).uint32(message.vsncheckAccountIdSessions[i]);
        /* repeated uint32 launcher_mismatch_sessions = 17; */
        for (let i = 0; i < message.launcherMismatchSessions.length; i++)
            writer.tag(17, WireType.Varint).uint32(message.launcherMismatchSessions[i]);
        /* repeated uint32 insecure_account_id_sessions = 18; */
        for (let i = 0; i < message.insecureAccountIdSessions.length; i++)
            writer.tag(18, WireType.Varint).uint32(message.insecureAccountIdSessions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "region_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "region_r", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "distance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>): CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note): CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional int32 region_id */ 2:
                    message.regionId = reader.int32();
                    break;
                case /* optional float region_r */ 3:
                    message.regionR = reader.float();
                    break;
                case /* optional float distance */ 4:
                    message.distance = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional int32 region_id = 2; */
        if (message.regionId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.regionId);
        /* optional float region_r = 3; */
        if (message.regionR !== undefined)
            writer.tag(3, WireType.Bit32).float(message.regionR);
        /* optional float distance = 4; */
        if (message.distance !== undefined)
            writer.tag(4, WireType.Bit32).float(message.distance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note = new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentMatchDraft$Type extends MessageType<CDataGCCStrike15_v2_TournamentMatchDraft> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentMatchDraft", [
            { no: 1, name: "event_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "event_stage_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "team_id_0", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "team_id_1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "maps_count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "maps_current", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "team_id_start", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "team_id_veto1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "team_id_pickn", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "drafts", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_TournamentMatchDraft_Entry }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentMatchDraft>): CDataGCCStrike15_v2_TournamentMatchDraft {
        const message = { drafts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentMatchDraft>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentMatchDraft): CDataGCCStrike15_v2_TournamentMatchDraft {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 event_id */ 1:
                    message.eventId = reader.int32();
                    break;
                case /* optional int32 event_stage_id */ 2:
                    message.eventStageId = reader.int32();
                    break;
                case /* optional int32 team_id_0 */ 3:
                    message.teamId0 = reader.int32();
                    break;
                case /* optional int32 team_id_1 */ 4:
                    message.teamId1 = reader.int32();
                    break;
                case /* optional int32 maps_count */ 5:
                    message.mapsCount = reader.int32();
                    break;
                case /* optional int32 maps_current */ 6:
                    message.mapsCurrent = reader.int32();
                    break;
                case /* optional int32 team_id_start */ 7:
                    message.teamIdStart = reader.int32();
                    break;
                case /* optional int32 team_id_veto1 */ 8:
                    message.teamIdVeto1 = reader.int32();
                    break;
                case /* optional int32 team_id_pickn */ 9:
                    message.teamIdPickn = reader.int32();
                    break;
                case /* repeated CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts */ 10:
                    message.drafts.push(CDataGCCStrike15_v2_TournamentMatchDraft_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentMatchDraft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 event_id = 1; */
        if (message.eventId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.eventId);
        /* optional int32 event_stage_id = 2; */
        if (message.eventStageId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.eventStageId);
        /* optional int32 team_id_0 = 3; */
        if (message.teamId0 !== undefined)
            writer.tag(3, WireType.Varint).int32(message.teamId0);
        /* optional int32 team_id_1 = 4; */
        if (message.teamId1 !== undefined)
            writer.tag(4, WireType.Varint).int32(message.teamId1);
        /* optional int32 maps_count = 5; */
        if (message.mapsCount !== undefined)
            writer.tag(5, WireType.Varint).int32(message.mapsCount);
        /* optional int32 maps_current = 6; */
        if (message.mapsCurrent !== undefined)
            writer.tag(6, WireType.Varint).int32(message.mapsCurrent);
        /* optional int32 team_id_start = 7; */
        if (message.teamIdStart !== undefined)
            writer.tag(7, WireType.Varint).int32(message.teamIdStart);
        /* optional int32 team_id_veto1 = 8; */
        if (message.teamIdVeto1 !== undefined)
            writer.tag(8, WireType.Varint).int32(message.teamIdVeto1);
        /* optional int32 team_id_pickn = 9; */
        if (message.teamIdPickn !== undefined)
            writer.tag(9, WireType.Varint).int32(message.teamIdPickn);
        /* repeated CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10; */
        for (let i = 0; i < message.drafts.length; i++)
            CDataGCCStrike15_v2_TournamentMatchDraft_Entry.internalBinaryWrite(message.drafts[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentMatchDraft
 */
export const CDataGCCStrike15_v2_TournamentMatchDraft = new CDataGCCStrike15_v2_TournamentMatchDraft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentMatchDraft_Entry$Type extends MessageType<CDataGCCStrike15_v2_TournamentMatchDraft_Entry> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentMatchDraft.Entry", [
            { no: 1, name: "mapid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "team_id_ct", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>): CDataGCCStrike15_v2_TournamentMatchDraft_Entry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentMatchDraft_Entry): CDataGCCStrike15_v2_TournamentMatchDraft_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 mapid */ 1:
                    message.mapid = reader.int32();
                    break;
                case /* optional int32 team_id_ct */ 2:
                    message.teamIdCt = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentMatchDraft_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 mapid = 1; */
        if (message.mapid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.mapid);
        /* optional int32 team_id_ct = 2; */
        if (message.teamIdCt !== undefined)
            writer.tag(2, WireType.Varint).int32(message.teamIdCt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentMatchDraft.Entry
 */
export const CDataGCCStrike15_v2_TournamentMatchDraft_Entry = new CDataGCCStrike15_v2_TournamentMatchDraft_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPreMatchInfoData$Type extends MessageType<CPreMatchInfoData> {
    constructor() {
        super("CPreMatchInfoData", [
            { no: 1, name: "predictions_pct", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "draft", kind: "message", T: () => CDataGCCStrike15_v2_TournamentMatchDraft },
            { no: 5, name: "stats", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CPreMatchInfoData_TeamStats },
            { no: 6, name: "wins", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CPreMatchInfoData>): CPreMatchInfoData {
        const message = { stats: [], wins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CPreMatchInfoData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPreMatchInfoData): CPreMatchInfoData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 predictions_pct */ 1:
                    message.predictionsPct = reader.int32();
                    break;
                case /* optional CDataGCCStrike15_v2_TournamentMatchDraft draft */ 4:
                    message.draft = CDataGCCStrike15_v2_TournamentMatchDraft.internalBinaryRead(reader, reader.uint32(), options, message.draft);
                    break;
                case /* repeated CPreMatchInfoData.TeamStats stats */ 5:
                    message.stats.push(CPreMatchInfoData_TeamStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 wins */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.wins.push(reader.int32());
                    else
                        message.wins.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPreMatchInfoData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 predictions_pct = 1; */
        if (message.predictionsPct !== undefined)
            writer.tag(1, WireType.Varint).int32(message.predictionsPct);
        /* optional CDataGCCStrike15_v2_TournamentMatchDraft draft = 4; */
        if (message.draft)
            CDataGCCStrike15_v2_TournamentMatchDraft.internalBinaryWrite(message.draft, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated CPreMatchInfoData.TeamStats stats = 5; */
        for (let i = 0; i < message.stats.length; i++)
            CPreMatchInfoData_TeamStats.internalBinaryWrite(message.stats[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 wins = 6; */
        for (let i = 0; i < message.wins.length; i++)
            writer.tag(6, WireType.Varint).int32(message.wins[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPreMatchInfoData
 */
export const CPreMatchInfoData = new CPreMatchInfoData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPreMatchInfoData_TeamStats$Type extends MessageType<CPreMatchInfoData_TeamStats> {
    constructor() {
        super("CPreMatchInfoData.TeamStats", [
            { no: 1, name: "match_info_idxtxt", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "match_info_txt", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "match_info_teams", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CPreMatchInfoData_TeamStats>): CPreMatchInfoData_TeamStats {
        const message = { matchInfoTeams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CPreMatchInfoData_TeamStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CPreMatchInfoData_TeamStats): CPreMatchInfoData_TeamStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 match_info_idxtxt */ 1:
                    message.matchInfoIdxtxt = reader.int32();
                    break;
                case /* optional string match_info_txt */ 2:
                    message.matchInfoTxt = reader.string();
                    break;
                case /* repeated string match_info_teams */ 3:
                    message.matchInfoTeams.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CPreMatchInfoData_TeamStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 match_info_idxtxt = 1; */
        if (message.matchInfoIdxtxt !== undefined)
            writer.tag(1, WireType.Varint).int32(message.matchInfoIdxtxt);
        /* optional string match_info_txt = 2; */
        if (message.matchInfoTxt !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.matchInfoTxt);
        /* repeated string match_info_teams = 3; */
        for (let i = 0; i < message.matchInfoTeams.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.matchInfoTeams[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CPreMatchInfoData.TeamStats
 */
export const CPreMatchInfoData_TeamStats = new CPreMatchInfoData_TeamStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve", [
            { no: 1, name: "account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "server_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "flags", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rankings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlayerRankingInfo },
            { no: 6, name: "encryption_key", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "encryption_key_pub", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "party_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "whitelist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IpAddressMask },
            { no: 10, name: "tv_master_steamid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "tournament_event", kind: "message", T: () => TournamentEvent },
            { no: 12, name: "tournament_teams", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TournamentTeam },
            { no: 13, name: "tournament_casters_account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "tv_relay_steamid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "pre_match_data", kind: "message", T: () => CPreMatchInfoData },
            { no: 16, name: "rtime32_event_start", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "tv_control", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>): CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve {
        const message = { accountIds: [], rankings: [], partyIds: [], whitelist: [], tournamentTeams: [], tournamentCastersAccountIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve): CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 account_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountIds.push(reader.uint32());
                    else
                        message.accountIds.push(reader.uint32());
                    break;
                case /* optional uint32 game_type */ 2:
                    message.gameType = reader.uint32();
                    break;
                case /* optional uint64 match_id */ 3:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 server_version */ 4:
                    message.serverVersion = reader.uint32();
                    break;
                case /* optional uint32 flags */ 18:
                    message.flags = reader.uint32();
                    break;
                case /* repeated PlayerRankingInfo rankings */ 5:
                    message.rankings.push(PlayerRankingInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 encryption_key */ 6:
                    message.encryptionKey = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 encryption_key_pub */ 7:
                    message.encryptionKeyPub = reader.uint64().toBigInt();
                    break;
                case /* repeated uint32 party_ids */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.partyIds.push(reader.uint32());
                    else
                        message.partyIds.push(reader.uint32());
                    break;
                case /* repeated IpAddressMask whitelist */ 9:
                    message.whitelist.push(IpAddressMask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 tv_master_steamid */ 10:
                    message.tvMasterSteamid = reader.uint64().toBigInt();
                    break;
                case /* optional TournamentEvent tournament_event */ 11:
                    message.tournamentEvent = TournamentEvent.internalBinaryRead(reader, reader.uint32(), options, message.tournamentEvent);
                    break;
                case /* repeated TournamentTeam tournament_teams */ 12:
                    message.tournamentTeams.push(TournamentTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 tournament_casters_account_ids */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tournamentCastersAccountIds.push(reader.uint32());
                    else
                        message.tournamentCastersAccountIds.push(reader.uint32());
                    break;
                case /* optional uint64 tv_relay_steamid */ 14:
                    message.tvRelaySteamid = reader.uint64().toBigInt();
                    break;
                case /* optional CPreMatchInfoData pre_match_data */ 15:
                    message.preMatchData = CPreMatchInfoData.internalBinaryRead(reader, reader.uint32(), options, message.preMatchData);
                    break;
                case /* optional uint32 rtime32_event_start */ 16:
                    message.rtime32EventStart = reader.uint32();
                    break;
                case /* optional uint32 tv_control */ 17:
                    message.tvControl = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 account_ids = 1; */
        for (let i = 0; i < message.accountIds.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.accountIds[i]);
        /* optional uint32 game_type = 2; */
        if (message.gameType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gameType);
        /* optional uint64 match_id = 3; */
        if (message.matchId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.matchId);
        /* optional uint32 server_version = 4; */
        if (message.serverVersion !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.serverVersion);
        /* optional uint32 flags = 18; */
        if (message.flags !== undefined)
            writer.tag(18, WireType.Varint).uint32(message.flags);
        /* repeated PlayerRankingInfo rankings = 5; */
        for (let i = 0; i < message.rankings.length; i++)
            PlayerRankingInfo.internalBinaryWrite(message.rankings[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 encryption_key = 6; */
        if (message.encryptionKey !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.encryptionKey);
        /* optional uint64 encryption_key_pub = 7; */
        if (message.encryptionKeyPub !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.encryptionKeyPub);
        /* repeated uint32 party_ids = 8; */
        for (let i = 0; i < message.partyIds.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.partyIds[i]);
        /* repeated IpAddressMask whitelist = 9; */
        for (let i = 0; i < message.whitelist.length; i++)
            IpAddressMask.internalBinaryWrite(message.whitelist[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 tv_master_steamid = 10; */
        if (message.tvMasterSteamid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.tvMasterSteamid);
        /* optional TournamentEvent tournament_event = 11; */
        if (message.tournamentEvent)
            TournamentEvent.internalBinaryWrite(message.tournamentEvent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated TournamentTeam tournament_teams = 12; */
        for (let i = 0; i < message.tournamentTeams.length; i++)
            TournamentTeam.internalBinaryWrite(message.tournamentTeams[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 tournament_casters_account_ids = 13; */
        for (let i = 0; i < message.tournamentCastersAccountIds.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.tournamentCastersAccountIds[i]);
        /* optional uint64 tv_relay_steamid = 14; */
        if (message.tvRelaySteamid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.tvRelaySteamid);
        /* optional CPreMatchInfoData pre_match_data = 15; */
        if (message.preMatchData)
            CPreMatchInfoData.internalBinaryWrite(message.preMatchData, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 rtime32_event_start = 16; */
        if (message.rtime32EventStart !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.rtime32EventStart);
        /* optional uint32 tv_control = 17; */
        if (message.tvControl !== undefined)
            writer.tag(17, WireType.Varint).uint32(message.tvControl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve = new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingServerReservationResponse", [
            { no: 1, name: "reservationid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reservation", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve },
            { no: 3, name: "map", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gc_reservation_sent", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "server_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "tv_info", kind: "message", T: () => ServerHltvInfo },
            { no: 7, name: "reward_player_accounts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "idle_player_accounts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "reward_item_attr_def_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "reward_item_attr_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "reward_item_attr_reward_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "reward_drop_list", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "tournament_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "legacy_steamdatagram_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "steamdatagram_routing", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "test_token", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 16, name: "flags", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>): CMsgGCCStrike15_v2_MatchmakingServerReservationResponse {
        const message = { rewardPlayerAccounts: [], idlePlayerAccounts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse): CMsgGCCStrike15_v2_MatchmakingServerReservationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 reservationid */ 1:
                    message.reservationid = reader.uint64().toBigInt();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation */ 2:
                    message.reservation = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryRead(reader, reader.uint32(), options, message.reservation);
                    break;
                case /* optional string map */ 3:
                    message.map = reader.string();
                    break;
                case /* optional uint64 gc_reservation_sent */ 4:
                    message.gcReservationSent = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 server_version */ 5:
                    message.serverVersion = reader.uint32();
                    break;
                case /* optional ServerHltvInfo tv_info */ 6:
                    message.tvInfo = ServerHltvInfo.internalBinaryRead(reader, reader.uint32(), options, message.tvInfo);
                    break;
                case /* repeated uint32 reward_player_accounts */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rewardPlayerAccounts.push(reader.uint32());
                    else
                        message.rewardPlayerAccounts.push(reader.uint32());
                    break;
                case /* repeated uint32 idle_player_accounts */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.idlePlayerAccounts.push(reader.uint32());
                    else
                        message.idlePlayerAccounts.push(reader.uint32());
                    break;
                case /* optional uint32 reward_item_attr_def_idx */ 9:
                    message.rewardItemAttrDefIdx = reader.uint32();
                    break;
                case /* optional uint32 reward_item_attr_value */ 10:
                    message.rewardItemAttrValue = reader.uint32();
                    break;
                case /* optional uint32 reward_item_attr_reward_idx */ 11:
                    message.rewardItemAttrRewardIdx = reader.uint32();
                    break;
                case /* optional uint32 reward_drop_list */ 12:
                    message.rewardDropList = reader.uint32();
                    break;
                case /* optional string tournament_tag */ 13:
                    message.tournamentTag = reader.string();
                    break;
                case /* optional uint32 legacy_steamdatagram_port */ 14:
                    message.legacySteamdatagramPort = reader.uint32();
                    break;
                case /* optional uint32 steamdatagram_routing */ 17:
                    message.steamdatagramRouting = reader.uint32();
                    break;
                case /* optional fixed32 test_token */ 15:
                    message.testToken = reader.fixed32();
                    break;
                case /* optional uint32 flags */ 16:
                    message.flags = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 reservationid = 1; */
        if (message.reservationid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.reservationid);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2; */
        if (message.reservation)
            CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryWrite(message.reservation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string map = 3; */
        if (message.map !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.map);
        /* optional uint64 gc_reservation_sent = 4; */
        if (message.gcReservationSent !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.gcReservationSent);
        /* optional uint32 server_version = 5; */
        if (message.serverVersion !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.serverVersion);
        /* optional ServerHltvInfo tv_info = 6; */
        if (message.tvInfo)
            ServerHltvInfo.internalBinaryWrite(message.tvInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 reward_player_accounts = 7; */
        for (let i = 0; i < message.rewardPlayerAccounts.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.rewardPlayerAccounts[i]);
        /* repeated uint32 idle_player_accounts = 8; */
        for (let i = 0; i < message.idlePlayerAccounts.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.idlePlayerAccounts[i]);
        /* optional uint32 reward_item_attr_def_idx = 9; */
        if (message.rewardItemAttrDefIdx !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.rewardItemAttrDefIdx);
        /* optional uint32 reward_item_attr_value = 10; */
        if (message.rewardItemAttrValue !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.rewardItemAttrValue);
        /* optional uint32 reward_item_attr_reward_idx = 11; */
        if (message.rewardItemAttrRewardIdx !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.rewardItemAttrRewardIdx);
        /* optional uint32 reward_drop_list = 12; */
        if (message.rewardDropList !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.rewardDropList);
        /* optional string tournament_tag = 13; */
        if (message.tournamentTag !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.tournamentTag);
        /* optional uint32 legacy_steamdatagram_port = 14; */
        if (message.legacySteamdatagramPort !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.legacySteamdatagramPort);
        /* optional uint32 steamdatagram_routing = 17; */
        if (message.steamdatagramRouting !== undefined)
            writer.tag(17, WireType.Varint).uint32(message.steamdatagramRouting);
        /* optional fixed32 test_token = 15; */
        if (message.testToken !== undefined)
            writer.tag(15, WireType.Bit32).fixed32(message.testToken);
        /* optional uint32 flags = 16; */
        if (message.flags !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.flags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
 */
export const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse = new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve", [
            { no: 1, name: "serverid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "direct_udp_ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "direct_udp_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "reservationid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "reservation", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve },
            { no: 6, name: "map", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "server_address", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>): CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve): CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 serverid */ 1:
                    message.serverid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 direct_udp_ip */ 2:
                    message.directUdpIp = reader.uint32();
                    break;
                case /* optional uint32 direct_udp_port */ 3:
                    message.directUdpPort = reader.uint32();
                    break;
                case /* optional uint64 reservationid */ 4:
                    message.reservationid = reader.uint64().toBigInt();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation */ 5:
                    message.reservation = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryRead(reader, reader.uint32(), options, message.reservation);
                    break;
                case /* optional string map */ 6:
                    message.map = reader.string();
                    break;
                case /* optional string server_address */ 7:
                    message.serverAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 serverid = 1; */
        if (message.serverid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.serverid);
        /* optional uint32 direct_udp_ip = 2; */
        if (message.directUdpIp !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.directUdpIp);
        /* optional uint32 direct_udp_port = 3; */
        if (message.directUdpPort !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.directUdpPort);
        /* optional uint64 reservationid = 4; */
        if (message.reservationid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.reservationid);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5; */
        if (message.reservation)
            CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryWrite(message.reservation, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional string map = 6; */
        if (message.map !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.map);
        /* optional string server_address = 7; */
        if (message.serverAddress !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.serverAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingServerRoundStats> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingServerRoundStats", [
            { no: 1, name: "reservationid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reservation", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve },
            { no: 3, name: "map", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "round", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "kills", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "assists", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "deaths", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "scores", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "pings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "round_result", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "match_result", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "team_scores", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "confirm", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm },
            { no: 14, name: "reservation_stage", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "match_duration", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "enemy_kills", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "enemy_headshots", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "enemy_3ks", kind: "scalar", jsonName: "enemy3ks", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "enemy_4ks", kind: "scalar", jsonName: "enemy4ks", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "enemy_5ks", kind: "scalar", jsonName: "enemy5ks", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "mvps", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "spectators_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 23, name: "spectators_count_tv", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 24, name: "spectators_count_lnk", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 25, name: "enemy_kills_agg", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 26, name: "drop_info", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo },
            { no: 27, name: "b_switched_teams", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "enemy_2ks", kind: "scalar", jsonName: "enemy2ks", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 29, name: "player_spawned", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "team_spawn_count", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "max_rounds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>): CMsgGCCStrike15_v2_MatchmakingServerRoundStats {
        const message = { kills: [], assists: [], deaths: [], scores: [], pings: [], teamScores: [], enemyKills: [], enemyHeadshots: [], enemy3Ks: [], enemy4Ks: [], enemy5Ks: [], mvps: [], enemyKillsAgg: [], enemy2Ks: [], playerSpawned: [], teamSpawnCount: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingServerRoundStats): CMsgGCCStrike15_v2_MatchmakingServerRoundStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 reservationid */ 1:
                    message.reservationid = reader.uint64().toBigInt();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation */ 2:
                    message.reservation = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryRead(reader, reader.uint32(), options, message.reservation);
                    break;
                case /* optional string map */ 3:
                    message.map = reader.string();
                    break;
                case /* optional int32 round */ 4:
                    message.round = reader.int32();
                    break;
                case /* repeated int32 kills */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.kills.push(reader.int32());
                    else
                        message.kills.push(reader.int32());
                    break;
                case /* repeated int32 assists */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.assists.push(reader.int32());
                    else
                        message.assists.push(reader.int32());
                    break;
                case /* repeated int32 deaths */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.deaths.push(reader.int32());
                    else
                        message.deaths.push(reader.int32());
                    break;
                case /* repeated int32 scores */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.scores.push(reader.int32());
                    else
                        message.scores.push(reader.int32());
                    break;
                case /* repeated int32 pings */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.pings.push(reader.int32());
                    else
                        message.pings.push(reader.int32());
                    break;
                case /* optional int32 round_result */ 10:
                    message.roundResult = reader.int32();
                    break;
                case /* optional int32 match_result */ 11:
                    message.matchResult = reader.int32();
                    break;
                case /* repeated int32 team_scores */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamScores.push(reader.int32());
                    else
                        message.teamScores.push(reader.int32());
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm */ 13:
                    message.confirm = CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.internalBinaryRead(reader, reader.uint32(), options, message.confirm);
                    break;
                case /* optional int32 reservation_stage */ 14:
                    message.reservationStage = reader.int32();
                    break;
                case /* optional int32 match_duration */ 15:
                    message.matchDuration = reader.int32();
                    break;
                case /* repeated int32 enemy_kills */ 16:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemyKills.push(reader.int32());
                    else
                        message.enemyKills.push(reader.int32());
                    break;
                case /* repeated int32 enemy_headshots */ 17:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemyHeadshots.push(reader.int32());
                    else
                        message.enemyHeadshots.push(reader.int32());
                    break;
                case /* repeated int32 enemy_3ks = 18 [json_name = "enemy3ks"];*/ 18:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemy3Ks.push(reader.int32());
                    else
                        message.enemy3Ks.push(reader.int32());
                    break;
                case /* repeated int32 enemy_4ks = 19 [json_name = "enemy4ks"];*/ 19:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemy4Ks.push(reader.int32());
                    else
                        message.enemy4Ks.push(reader.int32());
                    break;
                case /* repeated int32 enemy_5ks = 20 [json_name = "enemy5ks"];*/ 20:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemy5Ks.push(reader.int32());
                    else
                        message.enemy5Ks.push(reader.int32());
                    break;
                case /* repeated int32 mvps */ 21:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.mvps.push(reader.int32());
                    else
                        message.mvps.push(reader.int32());
                    break;
                case /* optional uint32 spectators_count */ 22:
                    message.spectatorsCount = reader.uint32();
                    break;
                case /* optional uint32 spectators_count_tv */ 23:
                    message.spectatorsCountTv = reader.uint32();
                    break;
                case /* optional uint32 spectators_count_lnk */ 24:
                    message.spectatorsCountLnk = reader.uint32();
                    break;
                case /* repeated int32 enemy_kills_agg */ 25:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemyKillsAgg.push(reader.int32());
                    else
                        message.enemyKillsAgg.push(reader.int32());
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info */ 26:
                    message.dropInfo = CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo.internalBinaryRead(reader, reader.uint32(), options, message.dropInfo);
                    break;
                case /* optional bool b_switched_teams */ 27:
                    message.bSwitchedTeams = reader.bool();
                    break;
                case /* repeated int32 enemy_2ks = 28 [json_name = "enemy2ks"];*/ 28:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.enemy2Ks.push(reader.int32());
                    else
                        message.enemy2Ks.push(reader.int32());
                    break;
                case /* repeated int32 player_spawned */ 29:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playerSpawned.push(reader.int32());
                    else
                        message.playerSpawned.push(reader.int32());
                    break;
                case /* repeated int32 team_spawn_count */ 30:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamSpawnCount.push(reader.int32());
                    else
                        message.teamSpawnCount.push(reader.int32());
                    break;
                case /* optional uint32 max_rounds */ 31:
                    message.maxRounds = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingServerRoundStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 reservationid = 1; */
        if (message.reservationid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.reservationid);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2; */
        if (message.reservation)
            CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryWrite(message.reservation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string map = 3; */
        if (message.map !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.map);
        /* optional int32 round = 4; */
        if (message.round !== undefined)
            writer.tag(4, WireType.Varint).int32(message.round);
        /* repeated int32 kills = 5; */
        for (let i = 0; i < message.kills.length; i++)
            writer.tag(5, WireType.Varint).int32(message.kills[i]);
        /* repeated int32 assists = 6; */
        for (let i = 0; i < message.assists.length; i++)
            writer.tag(6, WireType.Varint).int32(message.assists[i]);
        /* repeated int32 deaths = 7; */
        for (let i = 0; i < message.deaths.length; i++)
            writer.tag(7, WireType.Varint).int32(message.deaths[i]);
        /* repeated int32 scores = 8; */
        for (let i = 0; i < message.scores.length; i++)
            writer.tag(8, WireType.Varint).int32(message.scores[i]);
        /* repeated int32 pings = 9; */
        for (let i = 0; i < message.pings.length; i++)
            writer.tag(9, WireType.Varint).int32(message.pings[i]);
        /* optional int32 round_result = 10; */
        if (message.roundResult !== undefined)
            writer.tag(10, WireType.Varint).int32(message.roundResult);
        /* optional int32 match_result = 11; */
        if (message.matchResult !== undefined)
            writer.tag(11, WireType.Varint).int32(message.matchResult);
        /* repeated int32 team_scores = 12; */
        for (let i = 0; i < message.teamScores.length; i++)
            writer.tag(12, WireType.Varint).int32(message.teamScores[i]);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13; */
        if (message.confirm)
            CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.internalBinaryWrite(message.confirm, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 reservation_stage = 14; */
        if (message.reservationStage !== undefined)
            writer.tag(14, WireType.Varint).int32(message.reservationStage);
        /* optional int32 match_duration = 15; */
        if (message.matchDuration !== undefined)
            writer.tag(15, WireType.Varint).int32(message.matchDuration);
        /* repeated int32 enemy_kills = 16; */
        for (let i = 0; i < message.enemyKills.length; i++)
            writer.tag(16, WireType.Varint).int32(message.enemyKills[i]);
        /* repeated int32 enemy_headshots = 17; */
        for (let i = 0; i < message.enemyHeadshots.length; i++)
            writer.tag(17, WireType.Varint).int32(message.enemyHeadshots[i]);
        /* repeated int32 enemy_3ks = 18 [json_name = "enemy3ks"]; */
        for (let i = 0; i < message.enemy3Ks.length; i++)
            writer.tag(18, WireType.Varint).int32(message.enemy3Ks[i]);
        /* repeated int32 enemy_4ks = 19 [json_name = "enemy4ks"]; */
        for (let i = 0; i < message.enemy4Ks.length; i++)
            writer.tag(19, WireType.Varint).int32(message.enemy4Ks[i]);
        /* repeated int32 enemy_5ks = 20 [json_name = "enemy5ks"]; */
        for (let i = 0; i < message.enemy5Ks.length; i++)
            writer.tag(20, WireType.Varint).int32(message.enemy5Ks[i]);
        /* repeated int32 mvps = 21; */
        for (let i = 0; i < message.mvps.length; i++)
            writer.tag(21, WireType.Varint).int32(message.mvps[i]);
        /* optional uint32 spectators_count = 22; */
        if (message.spectatorsCount !== undefined)
            writer.tag(22, WireType.Varint).uint32(message.spectatorsCount);
        /* optional uint32 spectators_count_tv = 23; */
        if (message.spectatorsCountTv !== undefined)
            writer.tag(23, WireType.Varint).uint32(message.spectatorsCountTv);
        /* optional uint32 spectators_count_lnk = 24; */
        if (message.spectatorsCountLnk !== undefined)
            writer.tag(24, WireType.Varint).uint32(message.spectatorsCountLnk);
        /* repeated int32 enemy_kills_agg = 25; */
        for (let i = 0; i < message.enemyKillsAgg.length; i++)
            writer.tag(25, WireType.Varint).int32(message.enemyKillsAgg[i]);
        /* optional CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26; */
        if (message.dropInfo)
            CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo.internalBinaryWrite(message.dropInfo, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* optional bool b_switched_teams = 27; */
        if (message.bSwitchedTeams !== undefined)
            writer.tag(27, WireType.Varint).bool(message.bSwitchedTeams);
        /* repeated int32 enemy_2ks = 28 [json_name = "enemy2ks"]; */
        for (let i = 0; i < message.enemy2Ks.length; i++)
            writer.tag(28, WireType.Varint).int32(message.enemy2Ks[i]);
        /* repeated int32 player_spawned = 29; */
        for (let i = 0; i < message.playerSpawned.length; i++)
            writer.tag(29, WireType.Varint).int32(message.playerSpawned[i]);
        /* repeated int32 team_spawn_count = 30; */
        for (let i = 0; i < message.teamSpawnCount.length; i++)
            writer.tag(30, WireType.Varint).int32(message.teamSpawnCount[i]);
        /* optional uint32 max_rounds = 31; */
        if (message.maxRounds !== undefined)
            writer.tag(31, WireType.Varint).uint32(message.maxRounds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingServerRoundStats
 */
export const CMsgGCCStrike15_v2_MatchmakingServerRoundStats = new CMsgGCCStrike15_v2_MatchmakingServerRoundStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo", [
            { no: 1, name: "account_mvp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>): CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo): CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_mvp */ 1:
                    message.accountMvp = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_mvp = 1; */
        if (message.accountMvp !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountMvp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
 */
export const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo = new CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingClient2GCHello$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingClient2GCHello> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingClient2GCHello", []);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingClient2GCHello>): CMsgGCCStrike15_v2_MatchmakingClient2GCHello {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingClient2GCHello>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingClient2GCHello): CMsgGCCStrike15_v2_MatchmakingClient2GCHello {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingClient2GCHello, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingClient2GCHello
 */
export const CMsgGCCStrike15_v2_MatchmakingClient2GCHello = new CMsgGCCStrike15_v2_MatchmakingClient2GCHello$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ClientHello", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ongoingmatch", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve },
            { no: 3, name: "global_stats", kind: "message", T: () => GlobalStatistics },
            { no: 4, name: "penalty_seconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "penalty_reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "vac_banned", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "ranking", kind: "message", T: () => PlayerRankingInfo },
            { no: 8, name: "commendation", kind: "message", T: () => PlayerCommendationInfo },
            { no: 9, name: "medals", kind: "message", T: () => PlayerMedalsInfo },
            { no: 10, name: "my_current_event", kind: "message", T: () => TournamentEvent },
            { no: 11, name: "my_current_event_teams", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TournamentTeam },
            { no: 12, name: "my_current_team", kind: "message", T: () => TournamentTeam },
            { no: 13, name: "my_current_event_stages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TournamentEvent },
            { no: 14, name: "survey_vote", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "activity", kind: "message", T: () => AccountActivity },
            { no: 17, name: "player_level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "player_cur_xp", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "player_xp_bonus_flags", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "rankings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlayerRankingInfo }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>): CMsgGCCStrike15_v2_MatchmakingGC2ClientHello {
        const message = { myCurrentEventTeams: [], myCurrentEventStages: [], rankings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello): CMsgGCCStrike15_v2_MatchmakingGC2ClientHello {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch */ 2:
                    message.ongoingmatch = CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryRead(reader, reader.uint32(), options, message.ongoingmatch);
                    break;
                case /* optional GlobalStatistics global_stats */ 3:
                    message.globalStats = GlobalStatistics.internalBinaryRead(reader, reader.uint32(), options, message.globalStats);
                    break;
                case /* optional uint32 penalty_seconds */ 4:
                    message.penaltySeconds = reader.uint32();
                    break;
                case /* optional uint32 penalty_reason */ 5:
                    message.penaltyReason = reader.uint32();
                    break;
                case /* optional int32 vac_banned */ 6:
                    message.vacBanned = reader.int32();
                    break;
                case /* optional PlayerRankingInfo ranking */ 7:
                    message.ranking = PlayerRankingInfo.internalBinaryRead(reader, reader.uint32(), options, message.ranking);
                    break;
                case /* optional PlayerCommendationInfo commendation */ 8:
                    message.commendation = PlayerCommendationInfo.internalBinaryRead(reader, reader.uint32(), options, message.commendation);
                    break;
                case /* optional PlayerMedalsInfo medals */ 9:
                    message.medals = PlayerMedalsInfo.internalBinaryRead(reader, reader.uint32(), options, message.medals);
                    break;
                case /* optional TournamentEvent my_current_event */ 10:
                    message.myCurrentEvent = TournamentEvent.internalBinaryRead(reader, reader.uint32(), options, message.myCurrentEvent);
                    break;
                case /* repeated TournamentTeam my_current_event_teams */ 11:
                    message.myCurrentEventTeams.push(TournamentTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional TournamentTeam my_current_team */ 12:
                    message.myCurrentTeam = TournamentTeam.internalBinaryRead(reader, reader.uint32(), options, message.myCurrentTeam);
                    break;
                case /* repeated TournamentEvent my_current_event_stages */ 13:
                    message.myCurrentEventStages.push(TournamentEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 survey_vote */ 14:
                    message.surveyVote = reader.uint32();
                    break;
                case /* optional AccountActivity activity */ 15:
                    message.activity = AccountActivity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                case /* optional int32 player_level */ 17:
                    message.playerLevel = reader.int32();
                    break;
                case /* optional int32 player_cur_xp */ 18:
                    message.playerCurXp = reader.int32();
                    break;
                case /* optional int32 player_xp_bonus_flags */ 19:
                    message.playerXpBonusFlags = reader.int32();
                    break;
                case /* repeated PlayerRankingInfo rankings */ 20:
                    message.rankings.push(PlayerRankingInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2; */
        if (message.ongoingmatch)
            CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryWrite(message.ongoingmatch, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional GlobalStatistics global_stats = 3; */
        if (message.globalStats)
            GlobalStatistics.internalBinaryWrite(message.globalStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 penalty_seconds = 4; */
        if (message.penaltySeconds !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.penaltySeconds);
        /* optional uint32 penalty_reason = 5; */
        if (message.penaltyReason !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.penaltyReason);
        /* optional int32 vac_banned = 6; */
        if (message.vacBanned !== undefined)
            writer.tag(6, WireType.Varint).int32(message.vacBanned);
        /* optional PlayerRankingInfo ranking = 7; */
        if (message.ranking)
            PlayerRankingInfo.internalBinaryWrite(message.ranking, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional PlayerCommendationInfo commendation = 8; */
        if (message.commendation)
            PlayerCommendationInfo.internalBinaryWrite(message.commendation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional PlayerMedalsInfo medals = 9; */
        if (message.medals)
            PlayerMedalsInfo.internalBinaryWrite(message.medals, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional TournamentEvent my_current_event = 10; */
        if (message.myCurrentEvent)
            TournamentEvent.internalBinaryWrite(message.myCurrentEvent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated TournamentTeam my_current_event_teams = 11; */
        for (let i = 0; i < message.myCurrentEventTeams.length; i++)
            TournamentTeam.internalBinaryWrite(message.myCurrentEventTeams[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional TournamentTeam my_current_team = 12; */
        if (message.myCurrentTeam)
            TournamentTeam.internalBinaryWrite(message.myCurrentTeam, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated TournamentEvent my_current_event_stages = 13; */
        for (let i = 0; i < message.myCurrentEventStages.length; i++)
            TournamentEvent.internalBinaryWrite(message.myCurrentEventStages[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 survey_vote = 14; */
        if (message.surveyVote !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.surveyVote);
        /* optional AccountActivity activity = 15; */
        if (message.activity)
            AccountActivity.internalBinaryWrite(message.activity, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 player_level = 17; */
        if (message.playerLevel !== undefined)
            writer.tag(17, WireType.Varint).int32(message.playerLevel);
        /* optional int32 player_cur_xp = 18; */
        if (message.playerCurXp !== undefined)
            writer.tag(18, WireType.Varint).int32(message.playerCurXp);
        /* optional int32 player_xp_bonus_flags = 19; */
        if (message.playerXpBonusFlags !== undefined)
            writer.tag(19, WireType.Varint).int32(message.playerXpBonusFlags);
        /* repeated PlayerRankingInfo rankings = 20; */
        for (let i = 0; i < message.rankings.length; i++)
            PlayerRankingInfo.internalBinaryWrite(message.rankings[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello = new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_AccountPrivacySettings$Type extends MessageType<CMsgGCCStrike15_v2_AccountPrivacySettings> {
    constructor() {
        super("CMsgGCCStrike15_v2_AccountPrivacySettings", [
            { no: 1, name: "settings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_AccountPrivacySettings_Setting }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_AccountPrivacySettings>): CMsgGCCStrike15_v2_AccountPrivacySettings {
        const message = { settings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_AccountPrivacySettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_AccountPrivacySettings): CMsgGCCStrike15_v2_AccountPrivacySettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings */ 1:
                    message.settings.push(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_AccountPrivacySettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1; */
        for (let i = 0; i < message.settings.length; i++)
            CMsgGCCStrike15_v2_AccountPrivacySettings_Setting.internalBinaryWrite(message.settings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_AccountPrivacySettings
 */
export const CMsgGCCStrike15_v2_AccountPrivacySettings = new CMsgGCCStrike15_v2_AccountPrivacySettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting$Type extends MessageType<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting> {
    constructor() {
        super("CMsgGCCStrike15_v2_AccountPrivacySettings.Setting", [
            { no: 1, name: "setting_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "setting_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>): CMsgGCCStrike15_v2_AccountPrivacySettings_Setting {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_AccountPrivacySettings_Setting): CMsgGCCStrike15_v2_AccountPrivacySettings_Setting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 setting_type */ 1:
                    message.settingType = reader.uint32();
                    break;
                case /* optional uint32 setting_value */ 2:
                    message.settingValue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 setting_type = 1; */
        if (message.settingType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.settingType);
        /* optional uint32 setting_value = 2; */
        if (message.settingValue !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.settingValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
 */
export const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting = new CMsgGCCStrike15_v2_AccountPrivacySettings_Setting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "abandoned_match", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve },
            { no: 3, name: "penalty_seconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "penalty_reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>): CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon): CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match */ 2:
                    message.abandonedMatch = CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryRead(reader, reader.uint32(), options, message.abandonedMatch);
                    break;
                case /* optional uint32 penalty_seconds */ 3:
                    message.penaltySeconds = reader.uint32();
                    break;
                case /* optional uint32 penalty_reason */ 4:
                    message.penaltyReason = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2; */
        if (message.abandonedMatch)
            CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryWrite(message.abandonedMatch, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 penalty_seconds = 3; */
        if (message.penaltySeconds !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.penaltySeconds);
        /* optional uint32 penalty_reason = 4; */
        if (message.penaltyReason !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.penaltyReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
 */
export const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientGCRankUpdate$Type extends MessageType<CMsgGCCStrike15_v2_ClientGCRankUpdate> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientGCRankUpdate", [
            { no: 1, name: "rankings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlayerRankingInfo }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientGCRankUpdate>): CMsgGCCStrike15_v2_ClientGCRankUpdate {
        const message = { rankings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientGCRankUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientGCRankUpdate): CMsgGCCStrike15_v2_ClientGCRankUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PlayerRankingInfo rankings */ 1:
                    message.rankings.push(PlayerRankingInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientGCRankUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PlayerRankingInfo rankings = 1; */
        for (let i = 0; i < message.rankings.length; i++)
            PlayerRankingInfo.internalBinaryWrite(message.rankings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientGCRankUpdate
 */
export const CMsgGCCStrike15_v2_ClientGCRankUpdate = new CMsgGCCStrike15_v2_ClientGCRankUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate$Type extends MessageType<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate", [
            { no: 1, name: "main_post_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>): CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate): CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string main_post_url */ 1:
                    message.mainPostUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string main_post_url = 1; */
        if (message.mainPostUrl !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.mainPostUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
 */
export const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty$Type extends MessageType<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty> {
    constructor() {
        super("CMsgGCCStrike15_v2_ServerNotificationForUserPenalty", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "seconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "communication_cooldown", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>): CMsgGCCStrike15_v2_ServerNotificationForUserPenalty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty): CMsgGCCStrike15_v2_ServerNotificationForUserPenalty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 reason */ 2:
                    message.reason = reader.uint32();
                    break;
                case /* optional uint32 seconds */ 3:
                    message.seconds = reader.uint32();
                    break;
                case /* optional bool communication_cooldown */ 4:
                    message.communicationCooldown = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint32 reason = 2; */
        if (message.reason !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.reason);
        /* optional uint32 seconds = 3; */
        if (message.seconds !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.seconds);
        /* optional bool communication_cooldown = 4; */
        if (message.communicationCooldown !== undefined)
            writer.tag(4, WireType.Varint).bool(message.communicationCooldown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
 */
export const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty = new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientReportPlayer$Type extends MessageType<CMsgGCCStrike15_v2_ClientReportPlayer> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientReportPlayer", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rpt_aimbot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rpt_wallhack", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "rpt_speedhack", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rpt_teamharm", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rpt_textabuse", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "rpt_voiceabuse", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "report_from_demo", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientReportPlayer>): CMsgGCCStrike15_v2_ClientReportPlayer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientReportPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientReportPlayer): CMsgGCCStrike15_v2_ClientReportPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 rpt_aimbot */ 2:
                    message.rptAimbot = reader.uint32();
                    break;
                case /* optional uint32 rpt_wallhack */ 3:
                    message.rptWallhack = reader.uint32();
                    break;
                case /* optional uint32 rpt_speedhack */ 4:
                    message.rptSpeedhack = reader.uint32();
                    break;
                case /* optional uint32 rpt_teamharm */ 5:
                    message.rptTeamharm = reader.uint32();
                    break;
                case /* optional uint32 rpt_textabuse */ 6:
                    message.rptTextabuse = reader.uint32();
                    break;
                case /* optional uint32 rpt_voiceabuse */ 7:
                    message.rptVoiceabuse = reader.uint32();
                    break;
                case /* optional uint64 match_id */ 8:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional bool report_from_demo */ 9:
                    message.reportFromDemo = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientReportPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint32 rpt_aimbot = 2; */
        if (message.rptAimbot !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.rptAimbot);
        /* optional uint32 rpt_wallhack = 3; */
        if (message.rptWallhack !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.rptWallhack);
        /* optional uint32 rpt_speedhack = 4; */
        if (message.rptSpeedhack !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.rptSpeedhack);
        /* optional uint32 rpt_teamharm = 5; */
        if (message.rptTeamharm !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.rptTeamharm);
        /* optional uint32 rpt_textabuse = 6; */
        if (message.rptTextabuse !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.rptTextabuse);
        /* optional uint32 rpt_voiceabuse = 7; */
        if (message.rptVoiceabuse !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.rptVoiceabuse);
        /* optional uint64 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.matchId);
        /* optional bool report_from_demo = 9; */
        if (message.reportFromDemo !== undefined)
            writer.tag(9, WireType.Varint).bool(message.reportFromDemo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientReportPlayer
 */
export const CMsgGCCStrike15_v2_ClientReportPlayer = new CMsgGCCStrike15_v2_ClientReportPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientCommendPlayer$Type extends MessageType<CMsgGCCStrike15_v2_ClientCommendPlayer> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientCommendPlayer", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "commendation", kind: "message", T: () => PlayerCommendationInfo },
            { no: 10, name: "tokens", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientCommendPlayer>): CMsgGCCStrike15_v2_ClientCommendPlayer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientCommendPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientCommendPlayer): CMsgGCCStrike15_v2_ClientCommendPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint64 match_id */ 8:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional PlayerCommendationInfo commendation */ 9:
                    message.commendation = PlayerCommendationInfo.internalBinaryRead(reader, reader.uint32(), options, message.commendation);
                    break;
                case /* optional uint32 tokens */ 10:
                    message.tokens = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientCommendPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional uint64 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.matchId);
        /* optional PlayerCommendationInfo commendation = 9; */
        if (message.commendation)
            PlayerCommendationInfo.internalBinaryWrite(message.commendation, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 tokens = 10; */
        if (message.tokens !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.tokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientCommendPlayer
 */
export const CMsgGCCStrike15_v2_ClientCommendPlayer = new CMsgGCCStrike15_v2_ClientCommendPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientReportServer$Type extends MessageType<CMsgGCCStrike15_v2_ClientReportServer> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientReportServer", [
            { no: 1, name: "rpt_poorperf", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rpt_abusivemodels", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rpt_badmotd", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "rpt_listingabuse", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rpt_inventoryabuse", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientReportServer>): CMsgGCCStrike15_v2_ClientReportServer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientReportServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientReportServer): CMsgGCCStrike15_v2_ClientReportServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rpt_poorperf */ 1:
                    message.rptPoorperf = reader.uint32();
                    break;
                case /* optional uint32 rpt_abusivemodels */ 2:
                    message.rptAbusivemodels = reader.uint32();
                    break;
                case /* optional uint32 rpt_badmotd */ 3:
                    message.rptBadmotd = reader.uint32();
                    break;
                case /* optional uint32 rpt_listingabuse */ 4:
                    message.rptListingabuse = reader.uint32();
                    break;
                case /* optional uint32 rpt_inventoryabuse */ 5:
                    message.rptInventoryabuse = reader.uint32();
                    break;
                case /* optional uint64 match_id */ 8:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientReportServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 rpt_poorperf = 1; */
        if (message.rptPoorperf !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.rptPoorperf);
        /* optional uint32 rpt_abusivemodels = 2; */
        if (message.rptAbusivemodels !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.rptAbusivemodels);
        /* optional uint32 rpt_badmotd = 3; */
        if (message.rptBadmotd !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.rptBadmotd);
        /* optional uint32 rpt_listingabuse = 4; */
        if (message.rptListingabuse !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.rptListingabuse);
        /* optional uint32 rpt_inventoryabuse = 5; */
        if (message.rptInventoryabuse !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.rptInventoryabuse);
        /* optional uint64 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientReportServer
 */
export const CMsgGCCStrike15_v2_ClientReportServer = new CMsgGCCStrike15_v2_ClientReportServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientReportResponse$Type extends MessageType<CMsgGCCStrike15_v2_ClientReportResponse> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientReportResponse", [
            { no: 1, name: "confirmation_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "server_ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "response_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "response_result", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "tokens", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientReportResponse>): CMsgGCCStrike15_v2_ClientReportResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientReportResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientReportResponse): CMsgGCCStrike15_v2_ClientReportResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 confirmation_id */ 1:
                    message.confirmationId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 account_id */ 2:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 server_ip */ 3:
                    message.serverIp = reader.uint32();
                    break;
                case /* optional uint32 response_type */ 4:
                    message.responseType = reader.uint32();
                    break;
                case /* optional uint32 response_result */ 5:
                    message.responseResult = reader.uint32();
                    break;
                case /* optional uint32 tokens */ 6:
                    message.tokens = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientReportResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 confirmation_id = 1; */
        if (message.confirmationId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.confirmationId);
        /* optional uint32 account_id = 2; */
        if (message.accountId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        /* optional uint32 server_ip = 3; */
        if (message.serverIp !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.serverIp);
        /* optional uint32 response_type = 4; */
        if (message.responseType !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.responseType);
        /* optional uint32 response_result = 5; */
        if (message.responseResult !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.responseResult);
        /* optional uint32 tokens = 6; */
        if (message.tokens !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.tokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientReportResponse
 */
export const CMsgGCCStrike15_v2_ClientReportResponse = new CMsgGCCStrike15_v2_ClientReportResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends$Type extends MessageType<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends", [
            { no: 1, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "serverid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "matchid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "client_launcher", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "data_center_pings", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DataCenterPing }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>): CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends {
        const message = { accountIds: [], dataCenterPings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends): CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id */ 1:
                    message.requestId = reader.uint32();
                    break;
                case /* repeated uint32 account_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountIds.push(reader.uint32());
                    else
                        message.accountIds.push(reader.uint32());
                    break;
                case /* optional uint64 serverid */ 3:
                    message.serverid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 matchid */ 4:
                    message.matchid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 client_launcher */ 5:
                    message.clientLauncher = reader.uint32();
                    break;
                case /* repeated DataCenterPing data_center_pings */ 6:
                    message.dataCenterPings.push(DataCenterPing.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id = 1; */
        if (message.requestId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.requestId);
        /* repeated uint32 account_ids = 2; */
        for (let i = 0; i < message.accountIds.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.accountIds[i]);
        /* optional uint64 serverid = 3; */
        if (message.serverid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.serverid);
        /* optional uint64 matchid = 4; */
        if (message.matchid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.matchid);
        /* optional uint32 client_launcher = 5; */
        if (message.clientLauncher !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.clientLauncher);
        /* repeated DataCenterPing data_center_pings = 6; */
        for (let i = 0; i < message.dataCenterPings.length; i++)
            DataCenterPing.internalBinaryWrite(message.dataCenterPings[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
 */
export const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends = new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchableMatchInfo$Type extends MessageType<WatchableMatchInfo> {
    constructor() {
        super("WatchableMatchInfo", [
            { no: 1, name: "server_ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "tv_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "tv_spectators", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "tv_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "tv_watch_password", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "cl_decryptdata_key", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "cl_decryptdata_key_pub", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "game_mapgroup", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "game_map", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "server_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "reservation_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WatchableMatchInfo>): WatchableMatchInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WatchableMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WatchableMatchInfo): WatchableMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 server_ip */ 1:
                    message.serverIp = reader.uint32();
                    break;
                case /* optional uint32 tv_port */ 2:
                    message.tvPort = reader.uint32();
                    break;
                case /* optional uint32 tv_spectators */ 3:
                    message.tvSpectators = reader.uint32();
                    break;
                case /* optional uint32 tv_time */ 4:
                    message.tvTime = reader.uint32();
                    break;
                case /* optional bytes tv_watch_password */ 5:
                    message.tvWatchPassword = reader.bytes();
                    break;
                case /* optional uint64 cl_decryptdata_key */ 6:
                    message.clDecryptdataKey = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 cl_decryptdata_key_pub */ 7:
                    message.clDecryptdataKeyPub = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 game_type */ 8:
                    message.gameType = reader.uint32();
                    break;
                case /* optional string game_mapgroup */ 9:
                    message.gameMapgroup = reader.string();
                    break;
                case /* optional string game_map */ 10:
                    message.gameMap = reader.string();
                    break;
                case /* optional uint64 server_id */ 11:
                    message.serverId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 match_id */ 12:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 reservation_id */ 13:
                    message.reservationId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WatchableMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 server_ip = 1; */
        if (message.serverIp !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.serverIp);
        /* optional uint32 tv_port = 2; */
        if (message.tvPort !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.tvPort);
        /* optional uint32 tv_spectators = 3; */
        if (message.tvSpectators !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.tvSpectators);
        /* optional uint32 tv_time = 4; */
        if (message.tvTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.tvTime);
        /* optional bytes tv_watch_password = 5; */
        if (message.tvWatchPassword !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.tvWatchPassword);
        /* optional uint64 cl_decryptdata_key = 6; */
        if (message.clDecryptdataKey !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.clDecryptdataKey);
        /* optional uint64 cl_decryptdata_key_pub = 7; */
        if (message.clDecryptdataKeyPub !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.clDecryptdataKeyPub);
        /* optional uint32 game_type = 8; */
        if (message.gameType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gameType);
        /* optional string game_mapgroup = 9; */
        if (message.gameMapgroup !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.gameMapgroup);
        /* optional string game_map = 10; */
        if (message.gameMap !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.gameMap);
        /* optional uint64 server_id = 11; */
        if (message.serverId !== undefined)
            writer.tag(11, WireType.Varint).uint64(message.serverId);
        /* optional uint64 match_id = 12; */
        if (message.matchId !== undefined)
            writer.tag(12, WireType.Varint).uint64(message.matchId);
        /* optional uint64 reservation_id = 13; */
        if (message.reservationId !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.reservationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WatchableMatchInfo
 */
export const WatchableMatchInfo = new WatchableMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientRequestJoinFriendData$Type extends MessageType<CMsgGCCStrike15_v2_ClientRequestJoinFriendData> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientRequestJoinFriendData", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "join_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "join_ipp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "res", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve },
            { no: 6, name: "errormsg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>): CMsgGCCStrike15_v2_ClientRequestJoinFriendData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientRequestJoinFriendData): CMsgGCCStrike15_v2_ClientRequestJoinFriendData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 account_id */ 2:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 join_token */ 3:
                    message.joinToken = reader.uint32();
                    break;
                case /* optional uint32 join_ipp */ 4:
                    message.joinIpp = reader.uint32();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res */ 5:
                    message.res = CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryRead(reader, reader.uint32(), options, message.res);
                    break;
                case /* optional string errormsg */ 6:
                    message.errormsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientRequestJoinFriendData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* optional uint32 account_id = 2; */
        if (message.accountId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        /* optional uint32 join_token = 3; */
        if (message.joinToken !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.joinToken);
        /* optional uint32 join_ipp = 4; */
        if (message.joinIpp !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.joinIpp);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5; */
        if (message.res)
            CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryWrite(message.res, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional string errormsg = 6; */
        if (message.errormsg !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.errormsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientRequestJoinFriendData
 */
export const CMsgGCCStrike15_v2_ClientRequestJoinFriendData = new CMsgGCCStrike15_v2_ClientRequestJoinFriendData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientRequestJoinServerData$Type extends MessageType<CMsgGCCStrike15_v2_ClientRequestJoinServerData> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientRequestJoinServerData", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "serverid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "server_ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "server_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "res", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve },
            { no: 7, name: "errormsg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientRequestJoinServerData>): CMsgGCCStrike15_v2_ClientRequestJoinServerData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientRequestJoinServerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientRequestJoinServerData): CMsgGCCStrike15_v2_ClientRequestJoinServerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 account_id */ 2:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint64 serverid */ 3:
                    message.serverid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 server_ip */ 4:
                    message.serverIp = reader.uint32();
                    break;
                case /* optional uint32 server_port */ 5:
                    message.serverPort = reader.uint32();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res */ 6:
                    message.res = CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryRead(reader, reader.uint32(), options, message.res);
                    break;
                case /* optional string errormsg */ 7:
                    message.errormsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientRequestJoinServerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* optional uint32 account_id = 2; */
        if (message.accountId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        /* optional uint64 serverid = 3; */
        if (message.serverid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.serverid);
        /* optional uint32 server_ip = 4; */
        if (message.serverIp !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.serverIp);
        /* optional uint32 server_port = 5; */
        if (message.serverPort !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.serverPort);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6; */
        if (message.res)
            CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.internalBinaryWrite(message.res, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string errormsg = 7; */
        if (message.errormsg !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.errormsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientRequestJoinServerData
 */
export const CMsgGCCStrike15_v2_ClientRequestJoinServerData = new CMsgGCCStrike15_v2_ClientRequestJoinServerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCstrike15_v2_ClientRequestNewMission$Type extends MessageType<CMsgGCCstrike15_v2_ClientRequestNewMission> {
    constructor() {
        super("CMsgGCCstrike15_v2_ClientRequestNewMission", [
            { no: 2, name: "mission_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "campaign_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCstrike15_v2_ClientRequestNewMission>): CMsgGCCstrike15_v2_ClientRequestNewMission {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCstrike15_v2_ClientRequestNewMission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCstrike15_v2_ClientRequestNewMission): CMsgGCCstrike15_v2_ClientRequestNewMission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mission_id */ 2:
                    message.missionId = reader.uint32();
                    break;
                case /* optional uint32 campaign_id */ 3:
                    message.campaignId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCstrike15_v2_ClientRequestNewMission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mission_id = 2; */
        if (message.missionId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.missionId);
        /* optional uint32 campaign_id = 3; */
        if (message.campaignId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.campaignId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCstrike15_v2_ClientRequestNewMission
 */
export const CMsgGCCstrike15_v2_ClientRequestNewMission = new CMsgGCCstrike15_v2_ClientRequestNewMission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCstrike15_v2_ClientRedeemMissionReward$Type extends MessageType<CMsgGCCstrike15_v2_ClientRedeemMissionReward> {
    constructor() {
        super("CMsgGCCstrike15_v2_ClientRedeemMissionReward", [
            { no: 1, name: "campaign_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "redeem_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "redeemable_balance", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "expected_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCstrike15_v2_ClientRedeemMissionReward>): CMsgGCCstrike15_v2_ClientRedeemMissionReward {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCstrike15_v2_ClientRedeemMissionReward>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCstrike15_v2_ClientRedeemMissionReward): CMsgGCCstrike15_v2_ClientRedeemMissionReward {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 campaign_id */ 1:
                    message.campaignId = reader.uint32();
                    break;
                case /* optional uint32 redeem_id */ 2:
                    message.redeemId = reader.uint32();
                    break;
                case /* optional uint32 redeemable_balance */ 3:
                    message.redeemableBalance = reader.uint32();
                    break;
                case /* optional uint32 expected_cost */ 4:
                    message.expectedCost = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCstrike15_v2_ClientRedeemMissionReward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 campaign_id = 1; */
        if (message.campaignId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.campaignId);
        /* optional uint32 redeem_id = 2; */
        if (message.redeemId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.redeemId);
        /* optional uint32 redeemable_balance = 3; */
        if (message.redeemableBalance !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.redeemableBalance);
        /* optional uint32 expected_cost = 4; */
        if (message.expectedCost !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.expectedCost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCstrike15_v2_ClientRedeemMissionReward
 */
export const CMsgGCCstrike15_v2_ClientRedeemMissionReward = new CMsgGCCstrike15_v2_ClientRedeemMissionReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded$Type extends MessageType<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded> {
    constructor() {
        super("CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded", [
            { no: 1, name: "xp_progress_data", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => XpProgressData },
            { no: 2, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "current_xp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "current_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "upgraded_defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "operation_points_awarded", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>): CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded {
        const message = { xpProgressData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded): CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated XpProgressData xp_progress_data */ 1:
                    message.xpProgressData.push(XpProgressData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 account_id */ 2:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 current_xp */ 3:
                    message.currentXp = reader.uint32();
                    break;
                case /* optional uint32 current_level */ 4:
                    message.currentLevel = reader.uint32();
                    break;
                case /* optional uint32 upgraded_defidx */ 5:
                    message.upgradedDefidx = reader.uint32();
                    break;
                case /* optional uint32 operation_points_awarded */ 6:
                    message.operationPointsAwarded = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated XpProgressData xp_progress_data = 1; */
        for (let i = 0; i < message.xpProgressData.length; i++)
            XpProgressData.internalBinaryWrite(message.xpProgressData[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 account_id = 2; */
        if (message.accountId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        /* optional uint32 current_xp = 3; */
        if (message.currentXp !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.currentXp);
        /* optional uint32 current_level = 4; */
        if (message.currentLevel !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.currentLevel);
        /* optional uint32 upgraded_defidx = 5; */
        if (message.upgradedDefidx !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.upgradedDefidx);
        /* optional uint32 operation_points_awarded = 6; */
        if (message.operationPointsAwarded !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.operationPointsAwarded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
 */
export const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded = new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_ClientDeepStats$Type extends MessageType<CMsgGCCStrike15_ClientDeepStats> {
    constructor() {
        super("CMsgGCCStrike15_ClientDeepStats", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "range", kind: "message", T: () => CMsgGCCStrike15_ClientDeepStats_DeepStatsRange },
            { no: 3, name: "matches", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_ClientDeepStats>): CMsgGCCStrike15_ClientDeepStats {
        const message = { matches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_ClientDeepStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_ClientDeepStats): CMsgGCCStrike15_ClientDeepStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range */ 2:
                    message.range = CMsgGCCStrike15_ClientDeepStats_DeepStatsRange.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* repeated CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches */ 3:
                    message.matches.push(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_ClientDeepStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2; */
        if (message.range)
            CMsgGCCStrike15_ClientDeepStats_DeepStatsRange.internalBinaryWrite(message.range, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3; */
        for (let i = 0; i < message.matches.length; i++)
            CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch.internalBinaryWrite(message.matches[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_ClientDeepStats
 */
export const CMsgGCCStrike15_ClientDeepStats = new CMsgGCCStrike15_ClientDeepStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_ClientDeepStats_DeepStatsRange$Type extends MessageType<CMsgGCCStrike15_ClientDeepStats_DeepStatsRange> {
    constructor() {
        super("CMsgGCCStrike15_ClientDeepStats.DeepStatsRange", [
            { no: 1, name: "begin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "end", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "frozen", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_ClientDeepStats_DeepStatsRange>): CMsgGCCStrike15_ClientDeepStats_DeepStatsRange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_ClientDeepStats_DeepStatsRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_ClientDeepStats_DeepStatsRange): CMsgGCCStrike15_ClientDeepStats_DeepStatsRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 begin */ 1:
                    message.begin = reader.uint32();
                    break;
                case /* optional uint32 end */ 2:
                    message.end = reader.uint32();
                    break;
                case /* optional bool frozen */ 3:
                    message.frozen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 begin = 1; */
        if (message.begin !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.begin);
        /* optional uint32 end = 2; */
        if (message.end !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.end);
        /* optional bool frozen = 3; */
        if (message.frozen !== undefined)
            writer.tag(3, WireType.Varint).bool(message.frozen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_ClientDeepStats.DeepStatsRange
 */
export const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange = new CMsgGCCStrike15_ClientDeepStats_DeepStatsRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch$Type extends MessageType<CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch> {
    constructor() {
        super("CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch", [
            { no: 1, name: "player", kind: "message", T: () => DeepPlayerStatsEntry },
            { no: 2, name: "events", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DeepPlayerMatchEvent }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch>): CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch {
        const message = { events: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch): CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional DeepPlayerStatsEntry player */ 1:
                    message.player = DeepPlayerStatsEntry.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                case /* repeated DeepPlayerMatchEvent events */ 2:
                    message.events.push(DeepPlayerMatchEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional DeepPlayerStatsEntry player = 1; */
        if (message.player)
            DeepPlayerStatsEntry.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated DeepPlayerMatchEvent events = 2; */
        for (let i = 0; i < message.events.length; i++)
            DeepPlayerMatchEvent.internalBinaryWrite(message.events[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch
 */
export const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch = new CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_WatchInfoUsers$Type extends MessageType<CMsgGCCStrike15_v2_WatchInfoUsers> {
    constructor() {
        super("CMsgGCCStrike15_v2_WatchInfoUsers", [
            { no: 1, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "watchable_match_infos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WatchableMatchInfo },
            { no: 5, name: "extended_timeout", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_WatchInfoUsers>): CMsgGCCStrike15_v2_WatchInfoUsers {
        const message = { accountIds: [], watchableMatchInfos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_WatchInfoUsers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_WatchInfoUsers): CMsgGCCStrike15_v2_WatchInfoUsers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id */ 1:
                    message.requestId = reader.uint32();
                    break;
                case /* repeated uint32 account_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountIds.push(reader.uint32());
                    else
                        message.accountIds.push(reader.uint32());
                    break;
                case /* repeated WatchableMatchInfo watchable_match_infos */ 3:
                    message.watchableMatchInfos.push(WatchableMatchInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 extended_timeout */ 5:
                    message.extendedTimeout = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_WatchInfoUsers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id = 1; */
        if (message.requestId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.requestId);
        /* repeated uint32 account_ids = 2; */
        for (let i = 0; i < message.accountIds.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.accountIds[i]);
        /* repeated WatchableMatchInfo watchable_match_infos = 3; */
        for (let i = 0; i < message.watchableMatchInfos.length; i++)
            WatchableMatchInfo.internalBinaryWrite(message.watchableMatchInfos[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 extended_timeout = 5; */
        if (message.extendedTimeout !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.extendedTimeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_WatchInfoUsers
 */
export const CMsgGCCStrike15_v2_WatchInfoUsers = new CMsgGCCStrike15_v2_WatchInfoUsers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientRequestPlayersProfile$Type extends MessageType<CMsgGCCStrike15_v2_ClientRequestPlayersProfile> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientRequestPlayersProfile", [
            { no: 1, name: "request_id__deprecated", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_ids__deprecated", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "request_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>): CMsgGCCStrike15_v2_ClientRequestPlayersProfile {
        const message = { accountIdsDeprecated: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientRequestPlayersProfile): CMsgGCCStrike15_v2_ClientRequestPlayersProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id__deprecated */ 1:
                    message.requestIdDeprecated = reader.uint32();
                    break;
                case /* repeated uint32 account_ids__deprecated */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accountIdsDeprecated.push(reader.uint32());
                    else
                        message.accountIdsDeprecated.push(reader.uint32());
                    break;
                case /* optional uint32 account_id */ 3:
                    message.accountId = reader.uint32();
                    break;
                case /* optional uint32 request_level */ 4:
                    message.requestLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientRequestPlayersProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id__deprecated = 1; */
        if (message.requestIdDeprecated !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.requestIdDeprecated);
        /* repeated uint32 account_ids__deprecated = 2; */
        for (let i = 0; i < message.accountIdsDeprecated.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.accountIdsDeprecated[i]);
        /* optional uint32 account_id = 3; */
        if (message.accountId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.accountId);
        /* optional uint32 request_level = 4; */
        if (message.requestLevel !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.requestLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientRequestPlayersProfile
 */
export const CMsgGCCStrike15_v2_ClientRequestPlayersProfile = new CMsgGCCStrike15_v2_ClientRequestPlayersProfile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_PlayersProfile$Type extends MessageType<CMsgGCCStrike15_v2_PlayersProfile> {
    constructor() {
        super("CMsgGCCStrike15_v2_PlayersProfile", [
            { no: 1, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_profiles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_MatchmakingGC2ClientHello }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_PlayersProfile>): CMsgGCCStrike15_v2_PlayersProfile {
        const message = { accountProfiles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_PlayersProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_PlayersProfile): CMsgGCCStrike15_v2_PlayersProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id */ 1:
                    message.requestId = reader.uint32();
                    break;
                case /* repeated CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles */ 2:
                    message.accountProfiles.push(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_PlayersProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id = 1; */
        if (message.requestId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.requestId);
        /* repeated CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2; */
        for (let i = 0; i < message.accountProfiles.length; i++)
            CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.internalBinaryWrite(message.accountProfiles[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_PlayersProfile
 */
export const CMsgGCCStrike15_v2_PlayersProfile = new CMsgGCCStrike15_v2_PlayersProfile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate$Type extends MessageType<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate> {
    constructor() {
        super("CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate", [
            { no: 1, name: "caseid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "suspectid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "fractionid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rpt_aimbot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rpt_wallhack", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "rpt_speedhack", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "rpt_teamharm", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>): CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate): CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 caseid */ 1:
                    message.caseid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 suspectid */ 3:
                    message.suspectid = reader.uint32();
                    break;
                case /* optional uint32 fractionid */ 4:
                    message.fractionid = reader.uint32();
                    break;
                case /* optional uint32 rpt_aimbot */ 5:
                    message.rptAimbot = reader.uint32();
                    break;
                case /* optional uint32 rpt_wallhack */ 6:
                    message.rptWallhack = reader.uint32();
                    break;
                case /* optional uint32 rpt_speedhack */ 7:
                    message.rptSpeedhack = reader.uint32();
                    break;
                case /* optional uint32 rpt_teamharm */ 8:
                    message.rptTeamharm = reader.uint32();
                    break;
                case /* optional uint32 reason */ 9:
                    message.reason = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 caseid = 1; */
        if (message.caseid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.caseid);
        /* optional uint32 suspectid = 3; */
        if (message.suspectid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.suspectid);
        /* optional uint32 fractionid = 4; */
        if (message.fractionid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.fractionid);
        /* optional uint32 rpt_aimbot = 5; */
        if (message.rptAimbot !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.rptAimbot);
        /* optional uint32 rpt_wallhack = 6; */
        if (message.rptWallhack !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.rptWallhack);
        /* optional uint32 rpt_speedhack = 7; */
        if (message.rptSpeedhack !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.rptSpeedhack);
        /* optional uint32 rpt_teamharm = 8; */
        if (message.rptTeamharm !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.rptTeamharm);
        /* optional uint32 reason = 9; */
        if (message.reason !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
 */
export const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment$Type extends MessageType<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment> {
    constructor() {
        super("CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment", [
            { no: 1, name: "caseid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "caseurl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "verdict", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "throttleseconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "suspectid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "fractionid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "numrounds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "fractionrounds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "streakconvictions", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>): CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment): CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 caseid */ 1:
                    message.caseid = reader.uint64().toBigInt();
                    break;
                case /* optional string caseurl */ 2:
                    message.caseurl = reader.string();
                    break;
                case /* optional uint32 verdict */ 3:
                    message.verdict = reader.uint32();
                    break;
                case /* optional uint32 timestamp */ 4:
                    message.timestamp = reader.uint32();
                    break;
                case /* optional uint32 throttleseconds */ 5:
                    message.throttleseconds = reader.uint32();
                    break;
                case /* optional uint32 suspectid */ 6:
                    message.suspectid = reader.uint32();
                    break;
                case /* optional uint32 fractionid */ 7:
                    message.fractionid = reader.uint32();
                    break;
                case /* optional uint32 numrounds */ 8:
                    message.numrounds = reader.uint32();
                    break;
                case /* optional uint32 fractionrounds */ 9:
                    message.fractionrounds = reader.uint32();
                    break;
                case /* optional int32 streakconvictions */ 10:
                    message.streakconvictions = reader.int32();
                    break;
                case /* optional uint32 reason */ 11:
                    message.reason = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 caseid = 1; */
        if (message.caseid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.caseid);
        /* optional string caseurl = 2; */
        if (message.caseurl !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.caseurl);
        /* optional uint32 verdict = 3; */
        if (message.verdict !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.verdict);
        /* optional uint32 timestamp = 4; */
        if (message.timestamp !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.timestamp);
        /* optional uint32 throttleseconds = 5; */
        if (message.throttleseconds !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.throttleseconds);
        /* optional uint32 suspectid = 6; */
        if (message.suspectid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.suspectid);
        /* optional uint32 fractionid = 7; */
        if (message.fractionid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.fractionid);
        /* optional uint32 numrounds = 8; */
        if (message.numrounds !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.numrounds);
        /* optional uint32 fractionrounds = 9; */
        if (message.fractionrounds !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.fractionrounds);
        /* optional int32 streakconvictions = 10; */
        if (message.streakconvictions !== undefined)
            writer.tag(10, WireType.Varint).int32(message.streakconvictions);
        /* optional uint32 reason = 11; */
        if (message.reason !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
 */
export const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus$Type extends MessageType<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus> {
    constructor() {
        super("CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus", [
            { no: 1, name: "caseid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "statusid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>): CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus): CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 caseid */ 1:
                    message.caseid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 statusid */ 2:
                    message.statusid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 caseid = 1; */
        if (message.caseid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.caseid);
        /* optional uint32 statusid = 2; */
        if (message.statusid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.statusid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
 */
export const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CClientHeaderOverwatchEvidence$Type extends MessageType<CClientHeaderOverwatchEvidence> {
    constructor() {
        super("CClientHeaderOverwatchEvidence", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "caseid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CClientHeaderOverwatchEvidence>): CClientHeaderOverwatchEvidence {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CClientHeaderOverwatchEvidence>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CClientHeaderOverwatchEvidence): CClientHeaderOverwatchEvidence {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint64 caseid */ 2:
                    message.caseid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CClientHeaderOverwatchEvidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint64 caseid = 2; */
        if (message.caseid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.caseid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CClientHeaderOverwatchEvidence
 */
export const CClientHeaderOverwatchEvidence = new CClientHeaderOverwatchEvidence$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ClientTextMsg$Type extends MessageType<CMsgGCCStrike15_v2_GC2ClientTextMsg> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ClientTextMsg", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "payload", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ClientTextMsg>): CMsgGCCStrike15_v2_GC2ClientTextMsg {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ClientTextMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ClientTextMsg): CMsgGCCStrike15_v2_GC2ClientTextMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 type */ 2:
                    message.type = reader.uint32();
                    break;
                case /* optional bytes payload */ 3:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ClientTextMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional uint32 type = 2; */
        if (message.type !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.type);
        /* optional bytes payload = 3; */
        if (message.payload !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ClientTextMsg
 */
export const CMsgGCCStrike15_v2_GC2ClientTextMsg = new CMsgGCCStrike15_v2_GC2ClientTextMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Client2GCTextMsg$Type extends MessageType<CMsgGCCStrike15_v2_Client2GCTextMsg> {
    constructor() {
        super("CMsgGCCStrike15_v2_Client2GCTextMsg", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Client2GCTextMsg>): CMsgGCCStrike15_v2_Client2GCTextMsg {
        const message = { args: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Client2GCTextMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Client2GCTextMsg): CMsgGCCStrike15_v2_Client2GCTextMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* repeated bytes args */ 2:
                    message.args.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Client2GCTextMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* repeated bytes args = 2; */
        for (let i = 0; i < message.args.length; i++)
            writer.tag(2, WireType.LengthDelimited).bytes(message.args[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Client2GCTextMsg
 */
export const CMsgGCCStrike15_v2_Client2GCTextMsg = new CMsgGCCStrike15_v2_Client2GCTextMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchEndRunRewardDrops$Type extends MessageType<CMsgGCCStrike15_v2_MatchEndRunRewardDrops> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchEndRunRewardDrops", [
            { no: 3, name: "serverinfo", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingServerReservationResponse },
            { no: 4, name: "match_end_quest_data", kind: "message", T: () => CMsgGC_ServerQuestUpdateData }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>): CMsgGCCStrike15_v2_MatchEndRunRewardDrops {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchEndRunRewardDrops): CMsgGCCStrike15_v2_MatchEndRunRewardDrops {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo */ 3:
                    message.serverinfo = CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.internalBinaryRead(reader, reader.uint32(), options, message.serverinfo);
                    break;
                case /* optional CMsgGC_ServerQuestUpdateData match_end_quest_data */ 4:
                    message.matchEndQuestData = CMsgGC_ServerQuestUpdateData.internalBinaryRead(reader, reader.uint32(), options, message.matchEndQuestData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchEndRunRewardDrops, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3; */
        if (message.serverinfo)
            CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.internalBinaryWrite(message.serverinfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional CMsgGC_ServerQuestUpdateData match_end_quest_data = 4; */
        if (message.matchEndQuestData)
            CMsgGC_ServerQuestUpdateData.internalBinaryWrite(message.matchEndQuestData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchEndRunRewardDrops
 */
export const CMsgGCCStrike15_v2_MatchEndRunRewardDrops = new CMsgGCCStrike15_v2_MatchEndRunRewardDrops$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CEconItemPreviewDataBlock$Type extends MessageType<CEconItemPreviewDataBlock> {
    constructor() {
        super("CEconItemPreviewDataBlock", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "itemid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "defindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "paintindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rarity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "quality", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "paintwear", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "paintseed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "killeaterscoretype", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "killeatervalue", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "customname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "stickers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CEconItemPreviewDataBlock_Sticker },
            { no: 13, name: "inventory", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "origin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "questid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "dropreason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "musicindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CEconItemPreviewDataBlock>): CEconItemPreviewDataBlock {
        const message = { stickers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CEconItemPreviewDataBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CEconItemPreviewDataBlock): CEconItemPreviewDataBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint64 itemid */ 2:
                    message.itemid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 defindex */ 3:
                    message.defindex = reader.uint32();
                    break;
                case /* optional uint32 paintindex */ 4:
                    message.paintindex = reader.uint32();
                    break;
                case /* optional uint32 rarity */ 5:
                    message.rarity = reader.uint32();
                    break;
                case /* optional uint32 quality */ 6:
                    message.quality = reader.uint32();
                    break;
                case /* optional uint32 paintwear */ 7:
                    message.paintwear = reader.uint32();
                    break;
                case /* optional uint32 paintseed */ 8:
                    message.paintseed = reader.uint32();
                    break;
                case /* optional uint32 killeaterscoretype */ 9:
                    message.killeaterscoretype = reader.uint32();
                    break;
                case /* optional uint32 killeatervalue */ 10:
                    message.killeatervalue = reader.uint32();
                    break;
                case /* optional string customname */ 11:
                    message.customname = reader.string();
                    break;
                case /* repeated CEconItemPreviewDataBlock.Sticker stickers */ 12:
                    message.stickers.push(CEconItemPreviewDataBlock_Sticker.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 inventory */ 13:
                    message.inventory = reader.uint32();
                    break;
                case /* optional uint32 origin */ 14:
                    message.origin = reader.uint32();
                    break;
                case /* optional uint32 questid */ 15:
                    message.questid = reader.uint32();
                    break;
                case /* optional uint32 dropreason */ 16:
                    message.dropreason = reader.uint32();
                    break;
                case /* optional uint32 musicindex */ 17:
                    message.musicindex = reader.uint32();
                    break;
                case /* optional int32 entindex */ 18:
                    message.entindex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CEconItemPreviewDataBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint64 itemid = 2; */
        if (message.itemid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemid);
        /* optional uint32 defindex = 3; */
        if (message.defindex !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.defindex);
        /* optional uint32 paintindex = 4; */
        if (message.paintindex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.paintindex);
        /* optional uint32 rarity = 5; */
        if (message.rarity !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.rarity);
        /* optional uint32 quality = 6; */
        if (message.quality !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.quality);
        /* optional uint32 paintwear = 7; */
        if (message.paintwear !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.paintwear);
        /* optional uint32 paintseed = 8; */
        if (message.paintseed !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.paintseed);
        /* optional uint32 killeaterscoretype = 9; */
        if (message.killeaterscoretype !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.killeaterscoretype);
        /* optional uint32 killeatervalue = 10; */
        if (message.killeatervalue !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.killeatervalue);
        /* optional string customname = 11; */
        if (message.customname !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.customname);
        /* repeated CEconItemPreviewDataBlock.Sticker stickers = 12; */
        for (let i = 0; i < message.stickers.length; i++)
            CEconItemPreviewDataBlock_Sticker.internalBinaryWrite(message.stickers[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 inventory = 13; */
        if (message.inventory !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.inventory);
        /* optional uint32 origin = 14; */
        if (message.origin !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.origin);
        /* optional uint32 questid = 15; */
        if (message.questid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.questid);
        /* optional uint32 dropreason = 16; */
        if (message.dropreason !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.dropreason);
        /* optional uint32 musicindex = 17; */
        if (message.musicindex !== undefined)
            writer.tag(17, WireType.Varint).uint32(message.musicindex);
        /* optional int32 entindex = 18; */
        if (message.entindex !== undefined)
            writer.tag(18, WireType.Varint).int32(message.entindex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CEconItemPreviewDataBlock
 */
export const CEconItemPreviewDataBlock = new CEconItemPreviewDataBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CEconItemPreviewDataBlock_Sticker$Type extends MessageType<CEconItemPreviewDataBlock_Sticker> {
    constructor() {
        super("CEconItemPreviewDataBlock.Sticker", [
            { no: 1, name: "slot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sticker_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "wear", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "scale", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "rotation", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "tint_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CEconItemPreviewDataBlock_Sticker>): CEconItemPreviewDataBlock_Sticker {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CEconItemPreviewDataBlock_Sticker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CEconItemPreviewDataBlock_Sticker): CEconItemPreviewDataBlock_Sticker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 slot */ 1:
                    message.slot = reader.uint32();
                    break;
                case /* optional uint32 sticker_id */ 2:
                    message.stickerId = reader.uint32();
                    break;
                case /* optional float wear */ 3:
                    message.wear = reader.float();
                    break;
                case /* optional float scale */ 4:
                    message.scale = reader.float();
                    break;
                case /* optional float rotation */ 5:
                    message.rotation = reader.float();
                    break;
                case /* optional uint32 tint_id */ 6:
                    message.tintId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CEconItemPreviewDataBlock_Sticker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 slot = 1; */
        if (message.slot !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.slot);
        /* optional uint32 sticker_id = 2; */
        if (message.stickerId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stickerId);
        /* optional float wear = 3; */
        if (message.wear !== undefined)
            writer.tag(3, WireType.Bit32).float(message.wear);
        /* optional float scale = 4; */
        if (message.scale !== undefined)
            writer.tag(4, WireType.Bit32).float(message.scale);
        /* optional float rotation = 5; */
        if (message.rotation !== undefined)
            writer.tag(5, WireType.Bit32).float(message.rotation);
        /* optional uint32 tint_id = 6; */
        if (message.tintId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.tintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CEconItemPreviewDataBlock.Sticker
 */
export const CEconItemPreviewDataBlock_Sticker = new CEconItemPreviewDataBlock_Sticker$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification$Type extends MessageType<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchEndRewardDropsNotification", [
            { no: 6, name: "iteminfo", kind: "message", T: () => CEconItemPreviewDataBlock }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>): CMsgGCCStrike15_v2_MatchEndRewardDropsNotification {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification): CMsgGCCStrike15_v2_MatchEndRewardDropsNotification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CEconItemPreviewDataBlock iteminfo */ 6:
                    message.iteminfo = CEconItemPreviewDataBlock.internalBinaryRead(reader, reader.uint32(), options, message.iteminfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CEconItemPreviewDataBlock iteminfo = 6; */
        if (message.iteminfo)
            CEconItemPreviewDataBlock.internalBinaryWrite(message.iteminfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
 */
export const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification = new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgItemAcknowledged$Type extends MessageType<CMsgItemAcknowledged> {
    constructor() {
        super("CMsgItemAcknowledged", [
            { no: 1, name: "iteminfo", kind: "message", T: () => CEconItemPreviewDataBlock }
        ]);
    }
    create(value?: PartialMessage<CMsgItemAcknowledged>): CMsgItemAcknowledged {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgItemAcknowledged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgItemAcknowledged): CMsgItemAcknowledged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CEconItemPreviewDataBlock iteminfo */ 1:
                    message.iteminfo = CEconItemPreviewDataBlock.internalBinaryRead(reader, reader.uint32(), options, message.iteminfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgItemAcknowledged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CEconItemPreviewDataBlock iteminfo = 1; */
        if (message.iteminfo)
            CEconItemPreviewDataBlock.internalBinaryWrite(message.iteminfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgItemAcknowledged
 */
export const CMsgItemAcknowledged = new CMsgItemAcknowledged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest$Type extends MessageType<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest> {
    constructor() {
        super("CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest", [
            { no: 1, name: "param_s", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "param_a", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "param_d", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "param_m", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>): CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest): CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 param_s */ 1:
                    message.paramS = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 param_a */ 2:
                    message.paramA = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 param_d */ 3:
                    message.paramD = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 param_m */ 4:
                    message.paramM = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 param_s = 1; */
        if (message.paramS !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.paramS);
        /* optional uint64 param_a = 2; */
        if (message.paramA !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.paramA);
        /* optional uint64 param_d = 3; */
        if (message.paramD !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.paramD);
        /* optional uint64 param_m = 4; */
        if (message.paramM !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.paramM);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
 */
export const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse$Type extends MessageType<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse> {
    constructor() {
        super("CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse", [
            { no: 1, name: "iteminfo", kind: "message", T: () => CEconItemPreviewDataBlock }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>): CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse): CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CEconItemPreviewDataBlock iteminfo */ 1:
                    message.iteminfo = CEconItemPreviewDataBlock.internalBinaryRead(reader, reader.uint32(), options, message.iteminfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CEconItemPreviewDataBlock iteminfo = 1; */
        if (message.iteminfo)
            CEconItemPreviewDataBlock.internalBinaryWrite(message.iteminfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
 */
export const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames$Type extends MessageType<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames", []);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>): CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames): CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
 */
export const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser$Type extends MessageType<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>): CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser): CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
 */
export const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames$Type extends MessageType<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchListRequestRecentUserGames", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>): CMsgGCCStrike15_v2_MatchListRequestRecentUserGames {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames): CMsgGCCStrike15_v2_MatchListRequestRecentUserGames {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
 */
export const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames = new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchListRequestTournamentGames$Type extends MessageType<CMsgGCCStrike15_v2_MatchListRequestTournamentGames> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchListRequestTournamentGames", [
            { no: 1, name: "eventid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>): CMsgGCCStrike15_v2_MatchListRequestTournamentGames {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchListRequestTournamentGames): CMsgGCCStrike15_v2_MatchListRequestTournamentGames {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 eventid */ 1:
                    message.eventid = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchListRequestTournamentGames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 eventid = 1; */
        if (message.eventid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.eventid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchListRequestTournamentGames
 */
export const CMsgGCCStrike15_v2_MatchListRequestTournamentGames = new CMsgGCCStrike15_v2_MatchListRequestTournamentGames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo$Type extends MessageType<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchListRequestFullGameInfo", [
            { no: 1, name: "matchid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "outcomeid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>): CMsgGCCStrike15_v2_MatchListRequestFullGameInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo): CMsgGCCStrike15_v2_MatchListRequestFullGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 matchid */ 1:
                    message.matchid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 outcomeid */ 2:
                    message.outcomeid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 token */ 3:
                    message.token = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 matchid = 1; */
        if (message.matchid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.matchid);
        /* optional uint64 outcomeid = 2; */
        if (message.outcomeid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.outcomeid);
        /* optional uint32 token = 3; */
        if (message.token !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
 */
export const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo = new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_MatchInfo$Type extends MessageType<CDataGCCStrike15_v2_MatchInfo> {
    constructor() {
        super("CDataGCCStrike15_v2_MatchInfo", [
            { no: 1, name: "matchid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "matchtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "watchablematchinfo", kind: "message", T: () => WatchableMatchInfo },
            { no: 4, name: "roundstats_legacy", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingServerRoundStats },
            { no: 5, name: "roundstatsall", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_MatchmakingServerRoundStats }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_MatchInfo>): CDataGCCStrike15_v2_MatchInfo {
        const message = { roundstatsall: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_MatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_MatchInfo): CDataGCCStrike15_v2_MatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 matchid */ 1:
                    message.matchid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 matchtime */ 2:
                    message.matchtime = reader.uint32();
                    break;
                case /* optional WatchableMatchInfo watchablematchinfo */ 3:
                    message.watchablematchinfo = WatchableMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.watchablematchinfo);
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy */ 4:
                    message.roundstatsLegacy = CMsgGCCStrike15_v2_MatchmakingServerRoundStats.internalBinaryRead(reader, reader.uint32(), options, message.roundstatsLegacy);
                    break;
                case /* repeated CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall */ 5:
                    message.roundstatsall.push(CMsgGCCStrike15_v2_MatchmakingServerRoundStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_MatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 matchid = 1; */
        if (message.matchid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.matchid);
        /* optional uint32 matchtime = 2; */
        if (message.matchtime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.matchtime);
        /* optional WatchableMatchInfo watchablematchinfo = 3; */
        if (message.watchablematchinfo)
            WatchableMatchInfo.internalBinaryWrite(message.watchablematchinfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4; */
        if (message.roundstatsLegacy)
            CMsgGCCStrike15_v2_MatchmakingServerRoundStats.internalBinaryWrite(message.roundstatsLegacy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5; */
        for (let i = 0; i < message.roundstatsall.length; i++)
            CMsgGCCStrike15_v2_MatchmakingServerRoundStats.internalBinaryWrite(message.roundstatsall[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_MatchInfo
 */
export const CDataGCCStrike15_v2_MatchInfo = new CDataGCCStrike15_v2_MatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentGroupTeam$Type extends MessageType<CDataGCCStrike15_v2_TournamentGroupTeam> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentGroupTeam", [
            { no: 1, name: "team_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "score", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "correctpick", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentGroupTeam>): CDataGCCStrike15_v2_TournamentGroupTeam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentGroupTeam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentGroupTeam): CDataGCCStrike15_v2_TournamentGroupTeam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 team_id */ 1:
                    message.teamId = reader.int32();
                    break;
                case /* optional int32 score */ 2:
                    message.score = reader.int32();
                    break;
                case /* optional bool correctpick */ 3:
                    message.correctpick = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentGroupTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 team_id = 1; */
        if (message.teamId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.teamId);
        /* optional int32 score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Varint).int32(message.score);
        /* optional bool correctpick = 3; */
        if (message.correctpick !== undefined)
            writer.tag(3, WireType.Varint).bool(message.correctpick);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentGroupTeam
 */
export const CDataGCCStrike15_v2_TournamentGroupTeam = new CDataGCCStrike15_v2_TournamentGroupTeam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentGroup$Type extends MessageType<CDataGCCStrike15_v2_TournamentGroup> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentGroup", [
            { no: 1, name: "groupid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "desc", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "picks__deprecated", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "teams", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_TournamentGroupTeam },
            { no: 6, name: "stage_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "picklockuntiltime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "pickableteams", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "points_per_pick", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "picks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_TournamentGroup_Picks }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentGroup>): CDataGCCStrike15_v2_TournamentGroup {
        const message = { teams: [], stageIds: [], picks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentGroup): CDataGCCStrike15_v2_TournamentGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 groupid */ 1:
                    message.groupid = reader.uint32();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string desc */ 3:
                    message.desc = reader.string();
                    break;
                case /* optional uint32 picks__deprecated */ 4:
                    message.picksDeprecated = reader.uint32();
                    break;
                case /* repeated CDataGCCStrike15_v2_TournamentGroupTeam teams */ 5:
                    message.teams.push(CDataGCCStrike15_v2_TournamentGroupTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 stage_ids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.stageIds.push(reader.int32());
                    else
                        message.stageIds.push(reader.int32());
                    break;
                case /* optional uint32 picklockuntiltime */ 7:
                    message.picklockuntiltime = reader.uint32();
                    break;
                case /* optional uint32 pickableteams */ 8:
                    message.pickableteams = reader.uint32();
                    break;
                case /* optional uint32 points_per_pick */ 9:
                    message.pointsPerPick = reader.uint32();
                    break;
                case /* repeated CDataGCCStrike15_v2_TournamentGroup.Picks picks */ 10:
                    message.picks.push(CDataGCCStrike15_v2_TournamentGroup_Picks.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 groupid = 1; */
        if (message.groupid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.groupid);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string desc = 3; */
        if (message.desc !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.desc);
        /* optional uint32 picks__deprecated = 4; */
        if (message.picksDeprecated !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.picksDeprecated);
        /* repeated CDataGCCStrike15_v2_TournamentGroupTeam teams = 5; */
        for (let i = 0; i < message.teams.length; i++)
            CDataGCCStrike15_v2_TournamentGroupTeam.internalBinaryWrite(message.teams[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 stage_ids = 6; */
        for (let i = 0; i < message.stageIds.length; i++)
            writer.tag(6, WireType.Varint).int32(message.stageIds[i]);
        /* optional uint32 picklockuntiltime = 7; */
        if (message.picklockuntiltime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.picklockuntiltime);
        /* optional uint32 pickableteams = 8; */
        if (message.pickableteams !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.pickableteams);
        /* optional uint32 points_per_pick = 9; */
        if (message.pointsPerPick !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.pointsPerPick);
        /* repeated CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10; */
        for (let i = 0; i < message.picks.length; i++)
            CDataGCCStrike15_v2_TournamentGroup_Picks.internalBinaryWrite(message.picks[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentGroup
 */
export const CDataGCCStrike15_v2_TournamentGroup = new CDataGCCStrike15_v2_TournamentGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentGroup_Picks$Type extends MessageType<CDataGCCStrike15_v2_TournamentGroup_Picks> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentGroup.Picks", [
            { no: 1, name: "pickids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentGroup_Picks>): CDataGCCStrike15_v2_TournamentGroup_Picks {
        const message = { pickids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentGroup_Picks>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentGroup_Picks): CDataGCCStrike15_v2_TournamentGroup_Picks {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 pickids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.pickids.push(reader.int32());
                    else
                        message.pickids.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentGroup_Picks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 pickids = 1; */
        for (let i = 0; i < message.pickids.length; i++)
            writer.tag(1, WireType.Varint).int32(message.pickids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentGroup.Picks
 */
export const CDataGCCStrike15_v2_TournamentGroup_Picks = new CDataGCCStrike15_v2_TournamentGroup_Picks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentSection$Type extends MessageType<CDataGCCStrike15_v2_TournamentSection> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentSection", [
            { no: 1, name: "sectionid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "desc", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "groups", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_TournamentGroup }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentSection>): CDataGCCStrike15_v2_TournamentSection {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentSection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentSection): CDataGCCStrike15_v2_TournamentSection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 sectionid */ 1:
                    message.sectionid = reader.uint32();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string desc */ 3:
                    message.desc = reader.string();
                    break;
                case /* repeated CDataGCCStrike15_v2_TournamentGroup groups */ 4:
                    message.groups.push(CDataGCCStrike15_v2_TournamentGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentSection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 sectionid = 1; */
        if (message.sectionid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.sectionid);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string desc = 3; */
        if (message.desc !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.desc);
        /* repeated CDataGCCStrike15_v2_TournamentGroup groups = 4; */
        for (let i = 0; i < message.groups.length; i++)
            CDataGCCStrike15_v2_TournamentGroup.internalBinaryWrite(message.groups[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentSection
 */
export const CDataGCCStrike15_v2_TournamentSection = new CDataGCCStrike15_v2_TournamentSection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDataGCCStrike15_v2_TournamentInfo$Type extends MessageType<CDataGCCStrike15_v2_TournamentInfo> {
    constructor() {
        super("CDataGCCStrike15_v2_TournamentInfo", [
            { no: 1, name: "sections", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_TournamentSection },
            { no: 2, name: "tournament_event", kind: "message", T: () => TournamentEvent },
            { no: 3, name: "tournament_teams", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TournamentTeam }
        ]);
    }
    create(value?: PartialMessage<CDataGCCStrike15_v2_TournamentInfo>): CDataGCCStrike15_v2_TournamentInfo {
        const message = { sections: [], tournamentTeams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CDataGCCStrike15_v2_TournamentInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDataGCCStrike15_v2_TournamentInfo): CDataGCCStrike15_v2_TournamentInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CDataGCCStrike15_v2_TournamentSection sections */ 1:
                    message.sections.push(CDataGCCStrike15_v2_TournamentSection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional TournamentEvent tournament_event */ 2:
                    message.tournamentEvent = TournamentEvent.internalBinaryRead(reader, reader.uint32(), options, message.tournamentEvent);
                    break;
                case /* repeated TournamentTeam tournament_teams */ 3:
                    message.tournamentTeams.push(TournamentTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CDataGCCStrike15_v2_TournamentInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CDataGCCStrike15_v2_TournamentSection sections = 1; */
        for (let i = 0; i < message.sections.length; i++)
            CDataGCCStrike15_v2_TournamentSection.internalBinaryWrite(message.sections[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional TournamentEvent tournament_event = 2; */
        if (message.tournamentEvent)
            TournamentEvent.internalBinaryWrite(message.tournamentEvent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated TournamentTeam tournament_teams = 3; */
        for (let i = 0; i < message.tournamentTeams.length; i++)
            TournamentTeam.internalBinaryWrite(message.tournamentTeams[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CDataGCCStrike15_v2_TournamentInfo
 */
export const CDataGCCStrike15_v2_TournamentInfo = new CDataGCCStrike15_v2_TournamentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchList$Type extends MessageType<CMsgGCCStrike15_v2_MatchList> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchList", [
            { no: 1, name: "msgrequestid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "servertime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "matches", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_MatchInfo },
            { no: 5, name: "streams", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TournamentTeam },
            { no: 6, name: "tournamentinfo", kind: "message", T: () => CDataGCCStrike15_v2_TournamentInfo }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchList>): CMsgGCCStrike15_v2_MatchList {
        const message = { matches: [], streams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchList): CMsgGCCStrike15_v2_MatchList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 msgrequestid */ 1:
                    message.msgrequestid = reader.uint32();
                    break;
                case /* optional uint32 accountid */ 2:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 servertime */ 3:
                    message.servertime = reader.uint32();
                    break;
                case /* repeated CDataGCCStrike15_v2_MatchInfo matches */ 4:
                    message.matches.push(CDataGCCStrike15_v2_MatchInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated TournamentTeam streams */ 5:
                    message.streams.push(TournamentTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional CDataGCCStrike15_v2_TournamentInfo tournamentinfo */ 6:
                    message.tournamentinfo = CDataGCCStrike15_v2_TournamentInfo.internalBinaryRead(reader, reader.uint32(), options, message.tournamentinfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 msgrequestid = 1; */
        if (message.msgrequestid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.msgrequestid);
        /* optional uint32 accountid = 2; */
        if (message.accountid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountid);
        /* optional uint32 servertime = 3; */
        if (message.servertime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.servertime);
        /* repeated CDataGCCStrike15_v2_MatchInfo matches = 4; */
        for (let i = 0; i < message.matches.length; i++)
            CDataGCCStrike15_v2_MatchInfo.internalBinaryWrite(message.matches[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated TournamentTeam streams = 5; */
        for (let i = 0; i < message.streams.length; i++)
            TournamentTeam.internalBinaryWrite(message.streams[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6; */
        if (message.tournamentinfo)
            CDataGCCStrike15_v2_TournamentInfo.internalBinaryWrite(message.tournamentinfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchList
 */
export const CMsgGCCStrike15_v2_MatchList = new CMsgGCCStrike15_v2_MatchList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt$Type extends MessageType<CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt> {
    constructor() {
        super("CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt", [
            { no: 1, name: "eventid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "matches", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CDataGCCStrike15_v2_MatchInfo }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt>): CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt {
        const message = { matches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt): CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 eventid */ 1:
                    message.eventid = reader.int32();
                    break;
                case /* repeated CDataGCCStrike15_v2_MatchInfo matches */ 2:
                    message.matches.push(CDataGCCStrike15_v2_MatchInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 eventid = 1; */
        if (message.eventid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.eventid);
        /* repeated CDataGCCStrike15_v2_MatchInfo matches = 2; */
        for (let i = 0; i < message.matches.length; i++)
            CDataGCCStrike15_v2_MatchInfo.internalBinaryWrite(message.matches[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt
 */
export const CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt = new CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Predictions$Type extends MessageType<CMsgGCCStrike15_v2_Predictions> {
    constructor() {
        super("CMsgGCCStrike15_v2_Predictions", [
            { no: 1, name: "event_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_match_team_picks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Predictions>): CMsgGCCStrike15_v2_Predictions {
        const message = { groupMatchTeamPicks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Predictions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Predictions): CMsgGCCStrike15_v2_Predictions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 event_id */ 1:
                    message.eventId = reader.uint32();
                    break;
                case /* repeated CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks */ 2:
                    message.groupMatchTeamPicks.push(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Predictions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 event_id = 1; */
        if (message.eventId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.eventId);
        /* repeated CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2; */
        for (let i = 0; i < message.groupMatchTeamPicks.length; i++)
            CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick.internalBinaryWrite(message.groupMatchTeamPicks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Predictions
 */
export const CMsgGCCStrike15_v2_Predictions = new CMsgGCCStrike15_v2_Predictions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick$Type extends MessageType<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick> {
    constructor() {
        super("CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick", [
            { no: 1, name: "sectionid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "groupid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "teamid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "itemid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>): CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick): CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 sectionid */ 1:
                    message.sectionid = reader.int32();
                    break;
                case /* optional int32 groupid */ 2:
                    message.groupid = reader.int32();
                    break;
                case /* optional int32 index */ 3:
                    message.index = reader.int32();
                    break;
                case /* optional int32 teamid */ 4:
                    message.teamid = reader.int32();
                    break;
                case /* optional uint64 itemid */ 5:
                    message.itemid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 sectionid = 1; */
        if (message.sectionid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.sectionid);
        /* optional int32 groupid = 2; */
        if (message.groupid !== undefined)
            writer.tag(2, WireType.Varint).int32(message.groupid);
        /* optional int32 index = 3; */
        if (message.index !== undefined)
            writer.tag(3, WireType.Varint).int32(message.index);
        /* optional int32 teamid = 4; */
        if (message.teamid !== undefined)
            writer.tag(4, WireType.Varint).int32(message.teamid);
        /* optional uint64 itemid = 5; */
        if (message.itemid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.itemid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
 */
export const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick = new CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Fantasy$Type extends MessageType<CMsgGCCStrike15_v2_Fantasy> {
    constructor() {
        super("CMsgGCCStrike15_v2_Fantasy", [
            { no: 1, name: "event_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "teams", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_Fantasy_FantasyTeam }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Fantasy>): CMsgGCCStrike15_v2_Fantasy {
        const message = { teams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Fantasy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Fantasy): CMsgGCCStrike15_v2_Fantasy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 event_id */ 1:
                    message.eventId = reader.uint32();
                    break;
                case /* repeated CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams */ 2:
                    message.teams.push(CMsgGCCStrike15_v2_Fantasy_FantasyTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Fantasy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 event_id = 1; */
        if (message.eventId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.eventId);
        /* repeated CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2; */
        for (let i = 0; i < message.teams.length; i++)
            CMsgGCCStrike15_v2_Fantasy_FantasyTeam.internalBinaryWrite(message.teams[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Fantasy
 */
export const CMsgGCCStrike15_v2_Fantasy = new CMsgGCCStrike15_v2_Fantasy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Fantasy_FantasySlot$Type extends MessageType<CMsgGCCStrike15_v2_Fantasy_FantasySlot> {
    constructor() {
        super("CMsgGCCStrike15_v2_Fantasy.FantasySlot", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "pick", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "itemid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Fantasy_FantasySlot>): CMsgGCCStrike15_v2_Fantasy_FantasySlot {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Fantasy_FantasySlot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Fantasy_FantasySlot): CMsgGCCStrike15_v2_Fantasy_FantasySlot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional int32 pick */ 2:
                    message.pick = reader.int32();
                    break;
                case /* optional uint64 itemid */ 3:
                    message.itemid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Fantasy_FantasySlot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional int32 pick = 2; */
        if (message.pick !== undefined)
            writer.tag(2, WireType.Varint).int32(message.pick);
        /* optional uint64 itemid = 3; */
        if (message.itemid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.itemid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Fantasy.FantasySlot
 */
export const CMsgGCCStrike15_v2_Fantasy_FantasySlot = new CMsgGCCStrike15_v2_Fantasy_FantasySlot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Fantasy_FantasyTeam$Type extends MessageType<CMsgGCCStrike15_v2_Fantasy_FantasyTeam> {
    constructor() {
        super("CMsgGCCStrike15_v2_Fantasy.FantasyTeam", [
            { no: 1, name: "sectionid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "slots", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_Fantasy_FantasySlot }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>): CMsgGCCStrike15_v2_Fantasy_FantasyTeam {
        const message = { slots: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Fantasy_FantasyTeam): CMsgGCCStrike15_v2_Fantasy_FantasyTeam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 sectionid */ 1:
                    message.sectionid = reader.int32();
                    break;
                case /* repeated CMsgGCCStrike15_v2_Fantasy.FantasySlot slots */ 2:
                    message.slots.push(CMsgGCCStrike15_v2_Fantasy_FantasySlot.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Fantasy_FantasyTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 sectionid = 1; */
        if (message.sectionid !== undefined)
            writer.tag(1, WireType.Varint).int32(message.sectionid);
        /* repeated CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2; */
        for (let i = 0; i < message.slots.length; i++)
            CMsgGCCStrike15_v2_Fantasy_FantasySlot.internalBinaryWrite(message.slots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Fantasy.FantasyTeam
 */
export const CMsgGCCStrike15_v2_Fantasy_FantasyTeam = new CMsgGCCStrike15_v2_Fantasy_FantasyTeam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CAttribute_String$Type extends MessageType<CAttribute_String> {
    constructor() {
        super("CAttribute_String", [
            { no: 1, name: "value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CAttribute_String>): CAttribute_String {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CAttribute_String>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CAttribute_String): CAttribute_String {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CAttribute_String, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string value = 1; */
        if (message.value !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CAttribute_String
 */
export const CAttribute_String = new CAttribute_String$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCStrike15Welcome$Type extends MessageType<CMsgCStrike15Welcome> {
    constructor() {
        super("CMsgCStrike15Welcome", [
            { no: 5, name: "store_item_hash", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "timeplayedconsecutively", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "time_first_played", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "last_time_played", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "last_ip_address", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 18, name: "gscookieid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "uniqueid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgCStrike15Welcome>): CMsgCStrike15Welcome {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgCStrike15Welcome>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgCStrike15Welcome): CMsgCStrike15Welcome {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_item_hash */ 5:
                    message.storeItemHash = reader.uint32();
                    break;
                case /* optional uint32 timeplayedconsecutively */ 6:
                    message.timeplayedconsecutively = reader.uint32();
                    break;
                case /* optional uint32 time_first_played */ 10:
                    message.timeFirstPlayed = reader.uint32();
                    break;
                case /* optional uint32 last_time_played */ 12:
                    message.lastTimePlayed = reader.uint32();
                    break;
                case /* optional uint32 last_ip_address */ 13:
                    message.lastIpAddress = reader.uint32();
                    break;
                case /* optional uint64 gscookieid */ 18:
                    message.gscookieid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 uniqueid */ 19:
                    message.uniqueid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgCStrike15Welcome, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 store_item_hash = 5; */
        if (message.storeItemHash !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.storeItemHash);
        /* optional uint32 timeplayedconsecutively = 6; */
        if (message.timeplayedconsecutively !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.timeplayedconsecutively);
        /* optional uint32 time_first_played = 10; */
        if (message.timeFirstPlayed !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.timeFirstPlayed);
        /* optional uint32 last_time_played = 12; */
        if (message.lastTimePlayed !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.lastTimePlayed);
        /* optional uint32 last_ip_address = 13; */
        if (message.lastIpAddress !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.lastIpAddress);
        /* optional uint64 gscookieid = 18; */
        if (message.gscookieid !== undefined)
            writer.tag(18, WireType.Varint).uint64(message.gscookieid);
        /* optional uint64 uniqueid = 19; */
        if (message.uniqueid !== undefined)
            writer.tag(19, WireType.Varint).uint64(message.uniqueid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgCStrike15Welcome
 */
export const CMsgCStrike15Welcome = new CMsgCStrike15Welcome$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo$Type extends MessageType<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientVarValueNotificationInfo", [
            { no: 1, name: "value_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value_int", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "server_addr", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "server_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "choked_blocks", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>): CMsgGCCStrike15_v2_ClientVarValueNotificationInfo {
        const message = { chokedBlocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo): CMsgGCCStrike15_v2_ClientVarValueNotificationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string value_name */ 1:
                    message.valueName = reader.string();
                    break;
                case /* optional int32 value_int */ 2:
                    message.valueInt = reader.int32();
                    break;
                case /* optional uint32 server_addr */ 3:
                    message.serverAddr = reader.uint32();
                    break;
                case /* optional uint32 server_port */ 4:
                    message.serverPort = reader.uint32();
                    break;
                case /* repeated string choked_blocks */ 5:
                    message.chokedBlocks.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string value_name = 1; */
        if (message.valueName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.valueName);
        /* optional int32 value_int = 2; */
        if (message.valueInt !== undefined)
            writer.tag(2, WireType.Varint).int32(message.valueInt);
        /* optional uint32 server_addr = 3; */
        if (message.serverAddr !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.serverAddr);
        /* optional uint32 server_port = 4; */
        if (message.serverPort !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.serverPort);
        /* repeated string choked_blocks = 5; */
        for (let i = 0; i < message.chokedBlocks.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.chokedBlocks[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
 */
export const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo = new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo$Type extends MessageType<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo> {
    constructor() {
        super("CMsgGCCStrike15_v2_ServerVarValueNotificationInfo", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "viewangles", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "userdata", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>): CMsgGCCStrike15_v2_ServerVarValueNotificationInfo {
        const message = { viewangles: [], userdata: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo): CMsgGCCStrike15_v2_ServerVarValueNotificationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* repeated uint32 viewangles */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewangles.push(reader.uint32());
                    else
                        message.viewangles.push(reader.uint32());
                    break;
                case /* optional uint32 type */ 3:
                    message.type = reader.uint32();
                    break;
                case /* repeated uint32 userdata */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userdata.push(reader.uint32());
                    else
                        message.userdata.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* repeated uint32 viewangles = 2; */
        for (let i = 0; i < message.viewangles.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.viewangles[i]);
        /* optional uint32 type = 3; */
        if (message.type !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.type);
        /* repeated uint32 userdata = 4; */
        for (let i = 0; i < message.userdata.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.userdata[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
 */
export const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo = new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GiftsLeaderboardRequest$Type extends MessageType<CMsgGCCStrike15_v2_GiftsLeaderboardRequest> {
    constructor() {
        super("CMsgGCCStrike15_v2_GiftsLeaderboardRequest", []);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GiftsLeaderboardRequest>): CMsgGCCStrike15_v2_GiftsLeaderboardRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GiftsLeaderboardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GiftsLeaderboardRequest): CMsgGCCStrike15_v2_GiftsLeaderboardRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GiftsLeaderboardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GiftsLeaderboardRequest
 */
export const CMsgGCCStrike15_v2_GiftsLeaderboardRequest = new CMsgGCCStrike15_v2_GiftsLeaderboardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse$Type extends MessageType<CMsgGCCStrike15_v2_GiftsLeaderboardResponse> {
    constructor() {
        super("CMsgGCCStrike15_v2_GiftsLeaderboardResponse", [
            { no: 1, name: "servertime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_period_seconds", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "total_gifts_given", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "total_givers", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>): CMsgGCCStrike15_v2_GiftsLeaderboardResponse {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GiftsLeaderboardResponse): CMsgGCCStrike15_v2_GiftsLeaderboardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 servertime */ 1:
                    message.servertime = reader.uint32();
                    break;
                case /* optional uint32 time_period_seconds */ 2:
                    message.timePeriodSeconds = reader.uint32();
                    break;
                case /* optional uint32 total_gifts_given */ 3:
                    message.totalGiftsGiven = reader.uint32();
                    break;
                case /* optional uint32 total_givers */ 4:
                    message.totalGivers = reader.uint32();
                    break;
                case /* repeated CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries */ 5:
                    message.entries.push(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GiftsLeaderboardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 servertime = 1; */
        if (message.servertime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.servertime);
        /* optional uint32 time_period_seconds = 2; */
        if (message.timePeriodSeconds !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.timePeriodSeconds);
        /* optional uint32 total_gifts_given = 3; */
        if (message.totalGiftsGiven !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.totalGiftsGiven);
        /* optional uint32 total_givers = 4; */
        if (message.totalGivers !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.totalGivers);
        /* repeated CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5; */
        for (let i = 0; i < message.entries.length; i++)
            CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry.internalBinaryWrite(message.entries[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GiftsLeaderboardResponse
 */
export const CMsgGCCStrike15_v2_GiftsLeaderboardResponse = new CMsgGCCStrike15_v2_GiftsLeaderboardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry$Type extends MessageType<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry> {
    constructor() {
        super("CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "gifts", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>): CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry): CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 gifts */ 2:
                    message.gifts = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint32 gifts = 2; */
        if (message.gifts !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gifts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
 */
export const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry = new CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientSubmitSurveyVote$Type extends MessageType<CMsgGCCStrike15_v2_ClientSubmitSurveyVote> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientSubmitSurveyVote", [
            { no: 1, name: "survey_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "vote", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>): CMsgGCCStrike15_v2_ClientSubmitSurveyVote {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientSubmitSurveyVote): CMsgGCCStrike15_v2_ClientSubmitSurveyVote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 survey_id */ 1:
                    message.surveyId = reader.uint32();
                    break;
                case /* optional uint32 vote */ 2:
                    message.vote = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientSubmitSurveyVote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 survey_id = 1; */
        if (message.surveyId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.surveyId);
        /* optional uint32 vote = 2; */
        if (message.vote !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.vote);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientSubmitSurveyVote
 */
export const CMsgGCCStrike15_v2_ClientSubmitSurveyVote = new CMsgGCCStrike15_v2_ClientSubmitSurveyVote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Server2GCClientValidate$Type extends MessageType<CMsgGCCStrike15_v2_Server2GCClientValidate> {
    constructor() {
        super("CMsgGCCStrike15_v2_Server2GCClientValidate", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Server2GCClientValidate>): CMsgGCCStrike15_v2_Server2GCClientValidate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Server2GCClientValidate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Server2GCClientValidate): CMsgGCCStrike15_v2_Server2GCClientValidate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Server2GCClientValidate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Server2GCClientValidate
 */
export const CMsgGCCStrike15_v2_Server2GCClientValidate = new CMsgGCCStrike15_v2_Server2GCClientValidate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ClientTournamentInfo$Type extends MessageType<CMsgGCCStrike15_v2_GC2ClientTournamentInfo> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ClientTournamentInfo", [
            { no: 1, name: "eventid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stageid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "teamids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>): CMsgGCCStrike15_v2_GC2ClientTournamentInfo {
        const message = { teamids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ClientTournamentInfo): CMsgGCCStrike15_v2_GC2ClientTournamentInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 eventid */ 1:
                    message.eventid = reader.uint32();
                    break;
                case /* optional uint32 stageid */ 2:
                    message.stageid = reader.uint32();
                    break;
                case /* optional uint32 game_type */ 3:
                    message.gameType = reader.uint32();
                    break;
                case /* repeated uint32 teamids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.teamids.push(reader.uint32());
                    else
                        message.teamids.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ClientTournamentInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 eventid = 1; */
        if (message.eventid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.eventid);
        /* optional uint32 stageid = 2; */
        if (message.stageid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageid);
        /* optional uint32 game_type = 3; */
        if (message.gameType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.gameType);
        /* repeated uint32 teamids = 4; */
        for (let i = 0; i < message.teamids.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.teamids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ClientTournamentInfo
 */
export const CMsgGCCStrike15_v2_GC2ClientTournamentInfo = new CMsgGCCStrike15_v2_GC2ClientTournamentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOEconCoupon$Type extends MessageType<CSOEconCoupon> {
    constructor() {
        super("CSOEconCoupon", [
            { no: 1, name: "entryid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { key_field: true } },
            { no: 2, name: "defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "expiration_date", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ }
        ]);
    }
    create(value?: PartialMessage<CSOEconCoupon>): CSOEconCoupon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CSOEconCoupon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSOEconCoupon): CSOEconCoupon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entryid */ 1:
                    message.entryid = reader.uint32();
                    break;
                case /* optional uint32 defidx */ 2:
                    message.defidx = reader.uint32();
                    break;
                case /* optional fixed32 expiration_date */ 3:
                    message.expirationDate = reader.fixed32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSOEconCoupon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entryid = 1; */
        if (message.entryid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.entryid);
        /* optional uint32 defidx = 2; */
        if (message.defidx !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.defidx);
        /* optional fixed32 expiration_date = 3; */
        if (message.expirationDate !== undefined)
            writer.tag(3, WireType.Bit32).fixed32(message.expirationDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSOEconCoupon
 */
export const CSOEconCoupon = new CSOEconCoupon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOQuestProgress$Type extends MessageType<CSOQuestProgress> {
    constructor() {
        super("CSOQuestProgress", [
            { no: 1, name: "questid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { key_field: true } },
            { no: 2, name: "points_remaining", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "bonus_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSOQuestProgress>): CSOQuestProgress {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CSOQuestProgress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSOQuestProgress): CSOQuestProgress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 questid */ 1:
                    message.questid = reader.uint32();
                    break;
                case /* optional uint32 points_remaining */ 2:
                    message.pointsRemaining = reader.uint32();
                    break;
                case /* optional uint32 bonus_points */ 3:
                    message.bonusPoints = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSOQuestProgress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 questid = 1; */
        if (message.questid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.questid);
        /* optional uint32 points_remaining = 2; */
        if (message.pointsRemaining !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.pointsRemaining);
        /* optional uint32 bonus_points = 3; */
        if (message.bonusPoints !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.bonusPoints);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSOQuestProgress
 */
export const CSOQuestProgress = new CSOQuestProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOAccountSeasonalOperation$Type extends MessageType<CSOAccountSeasonalOperation> {
    constructor() {
        super("CSOAccountSeasonalOperation", [
            { no: 1, name: "season_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/, options: { key_field: true } },
            { no: 2, name: "tier_unlocked", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "premium_tiers", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "mission_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "missions_completed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "redeemable_balance", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "season_pass_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSOAccountSeasonalOperation>): CSOAccountSeasonalOperation {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CSOAccountSeasonalOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSOAccountSeasonalOperation): CSOAccountSeasonalOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 season_value */ 1:
                    message.seasonValue = reader.uint32();
                    break;
                case /* optional uint32 tier_unlocked */ 2:
                    message.tierUnlocked = reader.uint32();
                    break;
                case /* optional uint32 premium_tiers */ 3:
                    message.premiumTiers = reader.uint32();
                    break;
                case /* optional uint32 mission_id */ 4:
                    message.missionId = reader.uint32();
                    break;
                case /* optional uint32 missions_completed */ 5:
                    message.missionsCompleted = reader.uint32();
                    break;
                case /* optional uint32 redeemable_balance */ 6:
                    message.redeemableBalance = reader.uint32();
                    break;
                case /* optional uint32 season_pass_time */ 7:
                    message.seasonPassTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSOAccountSeasonalOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 season_value = 1; */
        if (message.seasonValue !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.seasonValue);
        /* optional uint32 tier_unlocked = 2; */
        if (message.tierUnlocked !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.tierUnlocked);
        /* optional uint32 premium_tiers = 3; */
        if (message.premiumTiers !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.premiumTiers);
        /* optional uint32 mission_id = 4; */
        if (message.missionId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.missionId);
        /* optional uint32 missions_completed = 5; */
        if (message.missionsCompleted !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.missionsCompleted);
        /* optional uint32 redeemable_balance = 6; */
        if (message.redeemableBalance !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.redeemableBalance);
        /* optional uint32 season_pass_time = 7; */
        if (message.seasonPassTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.seasonPassTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSOAccountSeasonalOperation
 */
export const CSOAccountSeasonalOperation = new CSOAccountSeasonalOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOAccountRecurringSubscription$Type extends MessageType<CSOAccountRecurringSubscription> {
    constructor() {
        super("CSOAccountRecurringSubscription", [
            { no: 1, name: "time_next_cycle", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_initiated", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSOAccountRecurringSubscription>): CSOAccountRecurringSubscription {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CSOAccountRecurringSubscription>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSOAccountRecurringSubscription): CSOAccountRecurringSubscription {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 time_next_cycle */ 1:
                    message.timeNextCycle = reader.uint32();
                    break;
                case /* optional uint32 time_initiated */ 2:
                    message.timeInitiated = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSOAccountRecurringSubscription, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 time_next_cycle = 1; */
        if (message.timeNextCycle !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.timeNextCycle);
        /* optional uint32 time_initiated = 2; */
        if (message.timeInitiated !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.timeInitiated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSOAccountRecurringSubscription
 */
export const CSOAccountRecurringSubscription = new CSOAccountRecurringSubscription$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOPersonaDataPublic$Type extends MessageType<CSOPersonaDataPublic> {
    constructor() {
        super("CSOPersonaDataPublic", [
            { no: 1, name: "player_level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "commendation", kind: "message", T: () => PlayerCommendationInfo },
            { no: 3, name: "elevated_state", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CSOPersonaDataPublic>): CSOPersonaDataPublic {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CSOPersonaDataPublic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSOPersonaDataPublic): CSOPersonaDataPublic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 player_level */ 1:
                    message.playerLevel = reader.int32();
                    break;
                case /* optional PlayerCommendationInfo commendation */ 2:
                    message.commendation = PlayerCommendationInfo.internalBinaryRead(reader, reader.uint32(), options, message.commendation);
                    break;
                case /* optional bool elevated_state */ 3:
                    message.elevatedState = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSOPersonaDataPublic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 player_level = 1; */
        if (message.playerLevel !== undefined)
            writer.tag(1, WireType.Varint).int32(message.playerLevel);
        /* optional PlayerCommendationInfo commendation = 2; */
        if (message.commendation)
            PlayerCommendationInfo.internalBinaryWrite(message.commendation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool elevated_state = 3; */
        if (message.elevatedState !== undefined)
            writer.tag(3, WireType.Varint).bool(message.elevatedState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSOPersonaDataPublic
 */
export const CSOPersonaDataPublic = new CSOPersonaDataPublic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGC_GlobalGame_Subscribe$Type extends MessageType<CMsgGC_GlobalGame_Subscribe> {
    constructor() {
        super("CMsgGC_GlobalGame_Subscribe", [
            { no: 1, name: "ticket", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGC_GlobalGame_Subscribe>): CMsgGC_GlobalGame_Subscribe {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGC_GlobalGame_Subscribe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGC_GlobalGame_Subscribe): CMsgGC_GlobalGame_Subscribe {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ticket */ 1:
                    message.ticket = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGC_GlobalGame_Subscribe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ticket = 1; */
        if (message.ticket !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.ticket);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGC_GlobalGame_Subscribe
 */
export const CMsgGC_GlobalGame_Subscribe = new CMsgGC_GlobalGame_Subscribe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGC_GlobalGame_Unsubscribe$Type extends MessageType<CMsgGC_GlobalGame_Unsubscribe> {
    constructor() {
        super("CMsgGC_GlobalGame_Unsubscribe", [
            { no: 1, name: "timeleft", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGC_GlobalGame_Unsubscribe>): CMsgGC_GlobalGame_Unsubscribe {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGC_GlobalGame_Unsubscribe>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGC_GlobalGame_Unsubscribe): CMsgGC_GlobalGame_Unsubscribe {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 timeleft */ 1:
                    message.timeleft = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGC_GlobalGame_Unsubscribe, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 timeleft = 1; */
        if (message.timeleft !== undefined)
            writer.tag(1, WireType.Varint).int32(message.timeleft);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGC_GlobalGame_Unsubscribe
 */
export const CMsgGC_GlobalGame_Unsubscribe = new CMsgGC_GlobalGame_Unsubscribe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGC_GlobalGame_Play$Type extends MessageType<CMsgGC_GlobalGame_Play> {
    constructor() {
        super("CMsgGC_GlobalGame_Play", [
            { no: 1, name: "ticket", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "gametimems", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "msperpoint", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGC_GlobalGame_Play>): CMsgGC_GlobalGame_Play {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGC_GlobalGame_Play>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGC_GlobalGame_Play): CMsgGC_GlobalGame_Play {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ticket */ 1:
                    message.ticket = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 gametimems */ 2:
                    message.gametimems = reader.uint32();
                    break;
                case /* optional uint32 msperpoint */ 3:
                    message.msperpoint = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGC_GlobalGame_Play, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ticket = 1; */
        if (message.ticket !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.ticket);
        /* optional uint32 gametimems = 2; */
        if (message.gametimems !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gametimems);
        /* optional uint32 msperpoint = 3; */
        if (message.msperpoint !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.msperpoint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGC_GlobalGame_Play
 */
export const CMsgGC_GlobalGame_Play = new CMsgGC_GlobalGame_Play$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_AcknowledgePenalty$Type extends MessageType<CMsgGCCStrike15_v2_AcknowledgePenalty> {
    constructor() {
        super("CMsgGCCStrike15_v2_AcknowledgePenalty", [
            { no: 1, name: "acknowledged", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_AcknowledgePenalty>): CMsgGCCStrike15_v2_AcknowledgePenalty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_AcknowledgePenalty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_AcknowledgePenalty): CMsgGCCStrike15_v2_AcknowledgePenalty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 acknowledged */ 1:
                    message.acknowledged = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_AcknowledgePenalty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 acknowledged = 1; */
        if (message.acknowledged !== undefined)
            writer.tag(1, WireType.Varint).int32(message.acknowledged);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_AcknowledgePenalty
 */
export const CMsgGCCStrike15_v2_AcknowledgePenalty = new CMsgGCCStrike15_v2_AcknowledgePenalty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin$Type extends MessageType<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin> {
    constructor() {
        super("CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin", [
            { no: 1, name: "defindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "upgradeid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "hours", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "prestigetime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>): CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin): CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 defindex */ 1:
                    message.defindex = reader.uint32();
                    break;
                case /* optional uint64 upgradeid */ 2:
                    message.upgradeid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 hours */ 3:
                    message.hours = reader.uint32();
                    break;
                case /* optional uint32 prestigetime */ 4:
                    message.prestigetime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 defindex = 1; */
        if (message.defindex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.defindex);
        /* optional uint64 upgradeid = 2; */
        if (message.upgradeid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.upgradeid);
        /* optional uint32 hours = 3; */
        if (message.hours !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.hours);
        /* optional uint32 prestigetime = 4; */
        if (message.prestigetime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.prestigetime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
 */
export const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Client2GCStreamUnlock$Type extends MessageType<CMsgGCCStrike15_v2_Client2GCStreamUnlock> {
    constructor() {
        super("CMsgGCCStrike15_v2_Client2GCStreamUnlock", [
            { no: 1, name: "ticket", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "os", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Client2GCStreamUnlock>): CMsgGCCStrike15_v2_Client2GCStreamUnlock {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Client2GCStreamUnlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Client2GCStreamUnlock): CMsgGCCStrike15_v2_Client2GCStreamUnlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ticket */ 1:
                    message.ticket = reader.uint64().toBigInt();
                    break;
                case /* optional int32 os */ 2:
                    message.os = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Client2GCStreamUnlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ticket = 1; */
        if (message.ticket !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.ticket);
        /* optional int32 os = 2; */
        if (message.os !== undefined)
            writer.tag(2, WireType.Varint).int32(message.os);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Client2GCStreamUnlock
 */
export const CMsgGCCStrike15_v2_Client2GCStreamUnlock = new CMsgGCCStrike15_v2_Client2GCStreamUnlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientToGCRequestElevate$Type extends MessageType<CMsgGCCStrike15_v2_ClientToGCRequestElevate> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientToGCRequestElevate", [
            { no: 1, name: "stage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientToGCRequestElevate>): CMsgGCCStrike15_v2_ClientToGCRequestElevate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientToGCRequestElevate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientToGCRequestElevate): CMsgGCCStrike15_v2_ClientToGCRequestElevate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage */ 1:
                    message.stage = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientToGCRequestElevate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage = 1; */
        if (message.stage !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientToGCRequestElevate
 */
export const CMsgGCCStrike15_v2_ClientToGCRequestElevate = new CMsgGCCStrike15_v2_ClientToGCRequestElevate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientToGCChat$Type extends MessageType<CMsgGCCStrike15_v2_ClientToGCChat> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientToGCChat", [
            { no: 1, name: "match_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientToGCChat>): CMsgGCCStrike15_v2_ClientToGCChat {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientToGCChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientToGCChat): CMsgGCCStrike15_v2_ClientToGCChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 match_id */ 1:
                    message.matchId = reader.uint64().toBigInt();
                    break;
                case /* optional string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientToGCChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 match_id = 1; */
        if (message.matchId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.matchId);
        /* optional string text = 2; */
        if (message.text !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientToGCChat
 */
export const CMsgGCCStrike15_v2_ClientToGCChat = new CMsgGCCStrike15_v2_ClientToGCChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GCToClientChat$Type extends MessageType<CMsgGCCStrike15_v2_GCToClientChat> {
    constructor() {
        super("CMsgGCCStrike15_v2_GCToClientChat", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GCToClientChat>): CMsgGCCStrike15_v2_GCToClientChat {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GCToClientChat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GCToClientChat): CMsgGCCStrike15_v2_GCToClientChat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 account_id */ 1:
                    message.accountId = reader.uint32();
                    break;
                case /* optional string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GCToClientChat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountId);
        /* optional string text = 2; */
        if (message.text !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GCToClientChat
 */
export const CMsgGCCStrike15_v2_GCToClientChat = new CMsgGCCStrike15_v2_GCToClientChat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientAuthKeyCode$Type extends MessageType<CMsgGCCStrike15_v2_ClientAuthKeyCode> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientAuthKeyCode", [
            { no: 1, name: "eventid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientAuthKeyCode>): CMsgGCCStrike15_v2_ClientAuthKeyCode {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientAuthKeyCode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientAuthKeyCode): CMsgGCCStrike15_v2_ClientAuthKeyCode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 eventid */ 1:
                    message.eventid = reader.uint32();
                    break;
                case /* optional string code */ 2:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientAuthKeyCode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 eventid = 1; */
        if (message.eventid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.eventid);
        /* optional string code = 2; */
        if (message.code !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientAuthKeyCode
 */
export const CMsgGCCStrike15_v2_ClientAuthKeyCode = new CMsgGCCStrike15_v2_ClientAuthKeyCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_GotvSyncPacket$Type extends MessageType<CMsgGCCStrike15_GotvSyncPacket> {
    constructor() {
        super("CMsgGCCStrike15_GotvSyncPacket", [
            { no: 1, name: "data", kind: "message", T: () => CEngineGotvSyncPacket }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_GotvSyncPacket>): CMsgGCCStrike15_GotvSyncPacket {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_GotvSyncPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_GotvSyncPacket): CMsgGCCStrike15_GotvSyncPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CEngineGotvSyncPacket data */ 1:
                    message.data = CEngineGotvSyncPacket.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_GotvSyncPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CEngineGotvSyncPacket data = 1; */
        if (message.data)
            CEngineGotvSyncPacket.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_GotvSyncPacket
 */
export const CMsgGCCStrike15_GotvSyncPacket = new CMsgGCCStrike15_GotvSyncPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDecalDigitalSignature$Type extends MessageType<PlayerDecalDigitalSignature> {
    constructor() {
        super("PlayerDecalDigitalSignature", [
            { no: 1, name: "signature", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "endpos", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "startpos", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "right", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "tx_defidx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "hitbox", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "creationtime", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "equipslot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "trace_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "normal", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "tint_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerDecalDigitalSignature>): PlayerDecalDigitalSignature {
        const message = { endpos: [], startpos: [], right: [], normal: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerDecalDigitalSignature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerDecalDigitalSignature): PlayerDecalDigitalSignature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes signature */ 1:
                    message.signature = reader.bytes();
                    break;
                case /* optional uint32 accountid */ 2:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 rtime */ 3:
                    message.rtime = reader.uint32();
                    break;
                case /* repeated float endpos */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.endpos.push(reader.float());
                    else
                        message.endpos.push(reader.float());
                    break;
                case /* repeated float startpos */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.startpos.push(reader.float());
                    else
                        message.startpos.push(reader.float());
                    break;
                case /* repeated float right */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.right.push(reader.float());
                    else
                        message.right.push(reader.float());
                    break;
                case /* optional uint32 tx_defidx */ 7:
                    message.txDefidx = reader.uint32();
                    break;
                case /* optional int32 entindex */ 8:
                    message.entindex = reader.int32();
                    break;
                case /* optional uint32 hitbox */ 9:
                    message.hitbox = reader.uint32();
                    break;
                case /* optional float creationtime */ 10:
                    message.creationtime = reader.float();
                    break;
                case /* optional uint32 equipslot */ 11:
                    message.equipslot = reader.uint32();
                    break;
                case /* optional uint32 trace_id */ 12:
                    message.traceId = reader.uint32();
                    break;
                case /* repeated float normal */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.normal.push(reader.float());
                    else
                        message.normal.push(reader.float());
                    break;
                case /* optional uint32 tint_id */ 14:
                    message.tintId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerDecalDigitalSignature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes signature = 1; */
        if (message.signature !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.signature);
        /* optional uint32 accountid = 2; */
        if (message.accountid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.accountid);
        /* optional uint32 rtime = 3; */
        if (message.rtime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.rtime);
        /* repeated float endpos = 4; */
        for (let i = 0; i < message.endpos.length; i++)
            writer.tag(4, WireType.Bit32).float(message.endpos[i]);
        /* repeated float startpos = 5; */
        for (let i = 0; i < message.startpos.length; i++)
            writer.tag(5, WireType.Bit32).float(message.startpos[i]);
        /* repeated float right = 6; */
        for (let i = 0; i < message.right.length; i++)
            writer.tag(6, WireType.Bit32).float(message.right[i]);
        /* optional uint32 tx_defidx = 7; */
        if (message.txDefidx !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.txDefidx);
        /* optional int32 entindex = 8; */
        if (message.entindex !== undefined)
            writer.tag(8, WireType.Varint).int32(message.entindex);
        /* optional uint32 hitbox = 9; */
        if (message.hitbox !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.hitbox);
        /* optional float creationtime = 10; */
        if (message.creationtime !== undefined)
            writer.tag(10, WireType.Bit32).float(message.creationtime);
        /* optional uint32 equipslot = 11; */
        if (message.equipslot !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.equipslot);
        /* optional uint32 trace_id = 12; */
        if (message.traceId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.traceId);
        /* repeated float normal = 13; */
        for (let i = 0; i < message.normal.length; i++)
            writer.tag(13, WireType.Bit32).float(message.normal[i]);
        /* optional uint32 tint_id = 14; */
        if (message.tintId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.tintId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerDecalDigitalSignature
 */
export const PlayerDecalDigitalSignature = new PlayerDecalDigitalSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPlayerDecalSign$Type extends MessageType<CMsgGCCStrike15_v2_ClientPlayerDecalSign> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPlayerDecalSign", [
            { no: 1, name: "data", kind: "message", T: () => PlayerDecalDigitalSignature },
            { no: 2, name: "itemid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPlayerDecalSign>): CMsgGCCStrike15_v2_ClientPlayerDecalSign {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPlayerDecalSign>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPlayerDecalSign): CMsgGCCStrike15_v2_ClientPlayerDecalSign {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerDecalDigitalSignature data */ 1:
                    message.data = PlayerDecalDigitalSignature.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* optional uint64 itemid */ 2:
                    message.itemid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPlayerDecalSign, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerDecalDigitalSignature data = 1; */
        if (message.data)
            PlayerDecalDigitalSignature.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 itemid = 2; */
        if (message.itemid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.itemid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPlayerDecalSign
 */
export const CMsgGCCStrike15_v2_ClientPlayerDecalSign = new CMsgGCCStrike15_v2_ClientPlayerDecalSign$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientLogonFatalError$Type extends MessageType<CMsgGCCStrike15_v2_ClientLogonFatalError> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientLogonFatalError", [
            { no: 1, name: "errorcode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientLogonFatalError>): CMsgGCCStrike15_v2_ClientLogonFatalError {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientLogonFatalError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientLogonFatalError): CMsgGCCStrike15_v2_ClientLogonFatalError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 errorcode */ 1:
                    message.errorcode = reader.uint32();
                    break;
                case /* optional string message */ 2:
                    message.message = reader.string();
                    break;
                case /* optional string country */ 3:
                    message.country = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientLogonFatalError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 errorcode = 1; */
        if (message.errorcode !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.errorcode);
        /* optional string message = 2; */
        if (message.message !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* optional string country = 3; */
        if (message.country !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.country);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientLogonFatalError
 */
export const CMsgGCCStrike15_v2_ClientLogonFatalError = new CMsgGCCStrike15_v2_ClientLogonFatalError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPollState$Type extends MessageType<CMsgGCCStrike15_v2_ClientPollState> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPollState", [
            { no: 1, name: "pollid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPollState>): CMsgGCCStrike15_v2_ClientPollState {
        const message = { names: [], values: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPollState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPollState): CMsgGCCStrike15_v2_ClientPollState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pollid */ 1:
                    message.pollid = reader.uint32();
                    break;
                case /* repeated string names */ 2:
                    message.names.push(reader.string());
                    break;
                case /* repeated int32 values */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.values.push(reader.int32());
                    else
                        message.values.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPollState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 pollid = 1; */
        if (message.pollid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.pollid);
        /* repeated string names = 2; */
        for (let i = 0; i < message.names.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.names[i]);
        /* repeated int32 values = 3; */
        for (let i = 0; i < message.values.length; i++)
            writer.tag(3, WireType.Varint).int32(message.values[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPollState
 */
export const CMsgGCCStrike15_v2_ClientPollState = new CMsgGCCStrike15_v2_ClientPollState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Party_Register$Type extends MessageType<CMsgGCCStrike15_v2_Party_Register> {
    constructor() {
        super("CMsgGCCStrike15_v2_Party_Register", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ver", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "apr", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "ark", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "nby", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "grp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "slots", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "launcher", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Party_Register>): CMsgGCCStrike15_v2_Party_Register {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Party_Register>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Party_Register): CMsgGCCStrike15_v2_Party_Register {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 ver */ 2:
                    message.ver = reader.uint32();
                    break;
                case /* optional uint32 apr */ 3:
                    message.apr = reader.uint32();
                    break;
                case /* optional uint32 ark */ 4:
                    message.ark = reader.uint32();
                    break;
                case /* optional uint32 nby */ 5:
                    message.nby = reader.uint32();
                    break;
                case /* optional uint32 grp */ 6:
                    message.grp = reader.uint32();
                    break;
                case /* optional uint32 slots */ 7:
                    message.slots = reader.uint32();
                    break;
                case /* optional uint32 launcher */ 8:
                    message.launcher = reader.uint32();
                    break;
                case /* optional uint32 game_type */ 9:
                    message.gameType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Party_Register, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional uint32 ver = 2; */
        if (message.ver !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.ver);
        /* optional uint32 apr = 3; */
        if (message.apr !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.apr);
        /* optional uint32 ark = 4; */
        if (message.ark !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.ark);
        /* optional uint32 nby = 5; */
        if (message.nby !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.nby);
        /* optional uint32 grp = 6; */
        if (message.grp !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.grp);
        /* optional uint32 slots = 7; */
        if (message.slots !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.slots);
        /* optional uint32 launcher = 8; */
        if (message.launcher !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.launcher);
        /* optional uint32 game_type = 9; */
        if (message.gameType !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.gameType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Party_Register
 */
export const CMsgGCCStrike15_v2_Party_Register = new CMsgGCCStrike15_v2_Party_Register$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Party_Search$Type extends MessageType<CMsgGCCStrike15_v2_Party_Search> {
    constructor() {
        super("CMsgGCCStrike15_v2_Party_Search", [
            { no: 1, name: "ver", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "apr", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "ark", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "grps", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "launcher", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Party_Search>): CMsgGCCStrike15_v2_Party_Search {
        const message = { grps: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Party_Search>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Party_Search): CMsgGCCStrike15_v2_Party_Search {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 ver */ 1:
                    message.ver = reader.uint32();
                    break;
                case /* optional uint32 apr */ 2:
                    message.apr = reader.uint32();
                    break;
                case /* optional uint32 ark */ 3:
                    message.ark = reader.uint32();
                    break;
                case /* repeated uint32 grps */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.grps.push(reader.uint32());
                    else
                        message.grps.push(reader.uint32());
                    break;
                case /* optional uint32 launcher */ 5:
                    message.launcher = reader.uint32();
                    break;
                case /* optional uint32 game_type */ 6:
                    message.gameType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Party_Search, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 ver = 1; */
        if (message.ver !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.ver);
        /* optional uint32 apr = 2; */
        if (message.apr !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.apr);
        /* optional uint32 ark = 3; */
        if (message.ark !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.ark);
        /* repeated uint32 grps = 4; */
        for (let i = 0; i < message.grps.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.grps[i]);
        /* optional uint32 launcher = 5; */
        if (message.launcher !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.launcher);
        /* optional uint32 game_type = 6; */
        if (message.gameType !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.gameType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Party_Search
 */
export const CMsgGCCStrike15_v2_Party_Search = new CMsgGCCStrike15_v2_Party_Search$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Party_SearchResults$Type extends MessageType<CMsgGCCStrike15_v2_Party_SearchResults> {
    constructor() {
        super("CMsgGCCStrike15_v2_Party_SearchResults", [
            { no: 1, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_Party_SearchResults_Entry }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Party_SearchResults>): CMsgGCCStrike15_v2_Party_SearchResults {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Party_SearchResults>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Party_SearchResults): CMsgGCCStrike15_v2_Party_SearchResults {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCCStrike15_v2_Party_SearchResults.Entry entries */ 1:
                    message.entries.push(CMsgGCCStrike15_v2_Party_SearchResults_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Party_SearchResults, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            CMsgGCCStrike15_v2_Party_SearchResults_Entry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Party_SearchResults
 */
export const CMsgGCCStrike15_v2_Party_SearchResults = new CMsgGCCStrike15_v2_Party_SearchResults$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Party_SearchResults_Entry$Type extends MessageType<CMsgGCCStrike15_v2_Party_SearchResults_Entry> {
    constructor() {
        super("CMsgGCCStrike15_v2_Party_SearchResults.Entry", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "grp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "game_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "apr", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "ark", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "loc", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Party_SearchResults_Entry>): CMsgGCCStrike15_v2_Party_SearchResults_Entry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Party_SearchResults_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Party_SearchResults_Entry): CMsgGCCStrike15_v2_Party_SearchResults_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 grp */ 2:
                    message.grp = reader.uint32();
                    break;
                case /* optional uint32 game_type */ 3:
                    message.gameType = reader.uint32();
                    break;
                case /* optional uint32 apr */ 4:
                    message.apr = reader.uint32();
                    break;
                case /* optional uint32 ark */ 5:
                    message.ark = reader.uint32();
                    break;
                case /* optional uint32 loc */ 6:
                    message.loc = reader.uint32();
                    break;
                case /* optional uint32 accountid */ 7:
                    message.accountid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Party_SearchResults_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional uint32 grp = 2; */
        if (message.grp !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.grp);
        /* optional uint32 game_type = 3; */
        if (message.gameType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.gameType);
        /* optional uint32 apr = 4; */
        if (message.apr !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.apr);
        /* optional uint32 ark = 5; */
        if (message.ark !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.ark);
        /* optional uint32 loc = 6; */
        if (message.loc !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.loc);
        /* optional uint32 accountid = 7; */
        if (message.accountid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.accountid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Party_SearchResults.Entry
 */
export const CMsgGCCStrike15_v2_Party_SearchResults_Entry = new CMsgGCCStrike15_v2_Party_SearchResults_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Party_Invite$Type extends MessageType<CMsgGCCStrike15_v2_Party_Invite> {
    constructor() {
        super("CMsgGCCStrike15_v2_Party_Invite", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "lobbyid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Party_Invite>): CMsgGCCStrike15_v2_Party_Invite {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Party_Invite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Party_Invite): CMsgGCCStrike15_v2_Party_Invite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 lobbyid */ 2:
                    message.lobbyid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Party_Invite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint32 lobbyid = 2; */
        if (message.lobbyid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.lobbyid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Party_Invite
 */
export const CMsgGCCStrike15_v2_Party_Invite = new CMsgGCCStrike15_v2_Party_Invite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Account_RequestCoPlays$Type extends MessageType<CMsgGCCStrike15_v2_Account_RequestCoPlays> {
    constructor() {
        super("CMsgGCCStrike15_v2_Account_RequestCoPlays", [
            { no: 1, name: "players", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_Account_RequestCoPlays_Player },
            { no: 2, name: "servertime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Account_RequestCoPlays>): CMsgGCCStrike15_v2_Account_RequestCoPlays {
        const message = { players: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Account_RequestCoPlays>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Account_RequestCoPlays): CMsgGCCStrike15_v2_Account_RequestCoPlays {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players */ 1:
                    message.players.push(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 servertime */ 2:
                    message.servertime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Account_RequestCoPlays, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1; */
        for (let i = 0; i < message.players.length; i++)
            CMsgGCCStrike15_v2_Account_RequestCoPlays_Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 servertime = 2; */
        if (message.servertime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.servertime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Account_RequestCoPlays
 */
export const CMsgGCCStrike15_v2_Account_RequestCoPlays = new CMsgGCCStrike15_v2_Account_RequestCoPlays$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player$Type extends MessageType<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player> {
    constructor() {
        super("CMsgGCCStrike15_v2_Account_RequestCoPlays.Player", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rtcoplay", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "online", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>): CMsgGCCStrike15_v2_Account_RequestCoPlays_Player {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_Account_RequestCoPlays_Player): CMsgGCCStrike15_v2_Account_RequestCoPlays_Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 rtcoplay */ 2:
                    message.rtcoplay = reader.uint32();
                    break;
                case /* optional bool online */ 3:
                    message.online = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint32 rtcoplay = 2; */
        if (message.rtcoplay !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.rtcoplay);
        /* optional bool online = 3; */
        if (message.online !== undefined)
            writer.tag(3, WireType.Varint).bool(message.online);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
 */
export const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player = new CMsgGCCStrike15_v2_Account_RequestCoPlays_Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientToGCRequestTicket$Type extends MessageType<CMsgGCCStrike15_v2_ClientToGCRequestTicket> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientToGCRequestTicket", [
            { no: 1, name: "authorized_steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "authorized_public_ip", kind: "scalar", opt: true, T: 7 /*ScalarType.FIXED32*/ },
            { no: 3, name: "gameserver_steam_id", kind: "scalar", opt: true, T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "gameserver_sdr_routing", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientToGCRequestTicket>): CMsgGCCStrike15_v2_ClientToGCRequestTicket {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientToGCRequestTicket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientToGCRequestTicket): CMsgGCCStrike15_v2_ClientToGCRequestTicket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional fixed64 authorized_steam_id */ 1:
                    message.authorizedSteamId = reader.fixed64().toBigInt();
                    break;
                case /* optional fixed32 authorized_public_ip */ 2:
                    message.authorizedPublicIp = reader.fixed32();
                    break;
                case /* optional fixed64 gameserver_steam_id */ 3:
                    message.gameserverSteamId = reader.fixed64().toBigInt();
                    break;
                case /* optional string gameserver_sdr_routing */ 5:
                    message.gameserverSdrRouting = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientToGCRequestTicket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional fixed64 authorized_steam_id = 1; */
        if (message.authorizedSteamId !== undefined)
            writer.tag(1, WireType.Bit64).fixed64(message.authorizedSteamId);
        /* optional fixed32 authorized_public_ip = 2; */
        if (message.authorizedPublicIp !== undefined)
            writer.tag(2, WireType.Bit32).fixed32(message.authorizedPublicIp);
        /* optional fixed64 gameserver_steam_id = 3; */
        if (message.gameserverSteamId !== undefined)
            writer.tag(3, WireType.Bit64).fixed64(message.gameserverSteamId);
        /* optional string gameserver_sdr_routing = 5; */
        if (message.gameserverSdrRouting !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.gameserverSdrRouting);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientToGCRequestTicket
 */
export const CMsgGCCStrike15_v2_ClientToGCRequestTicket = new CMsgGCCStrike15_v2_ClientToGCRequestTicket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientSteamDatagramTicket$Type extends MessageType<CMsgGCToClientSteamDatagramTicket> {
    constructor() {
        super("CMsgGCToClientSteamDatagramTicket", [
            { no: 16, name: "serialized_ticket", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCToClientSteamDatagramTicket>): CMsgGCToClientSteamDatagramTicket {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCToClientSteamDatagramTicket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCToClientSteamDatagramTicket): CMsgGCToClientSteamDatagramTicket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes serialized_ticket */ 16:
                    message.serializedTicket = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCToClientSteamDatagramTicket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes serialized_ticket = 16; */
        if (message.serializedTicket !== undefined)
            writer.tag(16, WireType.LengthDelimited).bytes(message.serializedTicket);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientSteamDatagramTicket
 */
export const CMsgGCToClientSteamDatagramTicket = new CMsgGCToClientSteamDatagramTicket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientRequestOffers$Type extends MessageType<CMsgGCCStrike15_v2_ClientRequestOffers> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientRequestOffers", []);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientRequestOffers>): CMsgGCCStrike15_v2_ClientRequestOffers {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientRequestOffers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientRequestOffers): CMsgGCCStrike15_v2_ClientRequestOffers {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientRequestOffers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientRequestOffers
 */
export const CMsgGCCStrike15_v2_ClientRequestOffers = new CMsgGCCStrike15_v2_ClientRequestOffers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientRequestSouvenir$Type extends MessageType<CMsgGCCStrike15_v2_ClientRequestSouvenir> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientRequestSouvenir", [
            { no: 1, name: "itemid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "matchid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "eventid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientRequestSouvenir>): CMsgGCCStrike15_v2_ClientRequestSouvenir {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientRequestSouvenir>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientRequestSouvenir): CMsgGCCStrike15_v2_ClientRequestSouvenir {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 itemid */ 1:
                    message.itemid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 matchid */ 2:
                    message.matchid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 eventid */ 3:
                    message.eventid = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientRequestSouvenir, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 itemid = 1; */
        if (message.itemid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.itemid);
        /* optional uint64 matchid = 2; */
        if (message.matchid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.matchid);
        /* optional int32 eventid = 3; */
        if (message.eventid !== undefined)
            writer.tag(3, WireType.Varint).int32(message.eventid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientRequestSouvenir
 */
export const CMsgGCCStrike15_v2_ClientRequestSouvenir = new CMsgGCCStrike15_v2_ClientRequestSouvenir$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientAccountBalance$Type extends MessageType<CMsgGCCStrike15_v2_ClientAccountBalance> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientAccountBalance", [
            { no: 1, name: "amount", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientAccountBalance>): CMsgGCCStrike15_v2_ClientAccountBalance {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientAccountBalance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientAccountBalance): CMsgGCCStrike15_v2_ClientAccountBalance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 amount */ 1:
                    message.amount = reader.uint64().toBigInt();
                    break;
                case /* optional string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientAccountBalance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 amount = 1; */
        if (message.amount !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.amount);
        /* optional string url = 2; */
        if (message.url !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientAccountBalance
 */
export const CMsgGCCStrike15_v2_ClientAccountBalance = new CMsgGCCStrike15_v2_ClientAccountBalance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPartyJoinRelay$Type extends MessageType<CMsgGCCStrike15_v2_ClientPartyJoinRelay> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPartyJoinRelay", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "lobbyid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPartyJoinRelay>): CMsgGCCStrike15_v2_ClientPartyJoinRelay {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPartyJoinRelay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPartyJoinRelay): CMsgGCCStrike15_v2_ClientPartyJoinRelay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint64 lobbyid */ 2:
                    message.lobbyid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPartyJoinRelay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint64 lobbyid = 2; */
        if (message.lobbyid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.lobbyid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPartyJoinRelay
 */
export const CMsgGCCStrike15_v2_ClientPartyJoinRelay = new CMsgGCCStrike15_v2_ClientPartyJoinRelay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPartyWarning$Type extends MessageType<CMsgGCCStrike15_v2_ClientPartyWarning> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPartyWarning", [
            { no: 1, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_ClientPartyWarning_Entry }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPartyWarning>): CMsgGCCStrike15_v2_ClientPartyWarning {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPartyWarning>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPartyWarning): CMsgGCCStrike15_v2_ClientPartyWarning {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries */ 1:
                    message.entries.push(CMsgGCCStrike15_v2_ClientPartyWarning_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPartyWarning, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            CMsgGCCStrike15_v2_ClientPartyWarning_Entry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPartyWarning
 */
export const CMsgGCCStrike15_v2_ClientPartyWarning = new CMsgGCCStrike15_v2_ClientPartyWarning$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPartyWarning_Entry$Type extends MessageType<CMsgGCCStrike15_v2_ClientPartyWarning_Entry> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPartyWarning.Entry", [
            { no: 1, name: "accountid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "warntype", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPartyWarning_Entry>): CMsgGCCStrike15_v2_ClientPartyWarning_Entry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPartyWarning_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPartyWarning_Entry): CMsgGCCStrike15_v2_ClientPartyWarning_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 accountid */ 1:
                    message.accountid = reader.uint32();
                    break;
                case /* optional uint32 warntype */ 2:
                    message.warntype = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPartyWarning_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 accountid = 1; */
        if (message.accountid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountid);
        /* optional uint32 warntype = 2; */
        if (message.warntype !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.warntype);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPartyWarning.Entry
 */
export const CMsgGCCStrike15_v2_ClientPartyWarning_Entry = new CMsgGCCStrike15_v2_ClientPartyWarning_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_SetEventFavorite$Type extends MessageType<CMsgGCCStrike15_v2_SetEventFavorite> {
    constructor() {
        super("CMsgGCCStrike15_v2_SetEventFavorite", [
            { no: 1, name: "eventid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_favorite", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_SetEventFavorite>): CMsgGCCStrike15_v2_SetEventFavorite {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_SetEventFavorite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_SetEventFavorite): CMsgGCCStrike15_v2_SetEventFavorite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 eventid */ 1:
                    message.eventid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_favorite */ 2:
                    message.isFavorite = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_SetEventFavorite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 eventid = 1; */
        if (message.eventid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.eventid);
        /* optional bool is_favorite = 2; */
        if (message.isFavorite !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isFavorite);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_SetEventFavorite
 */
export const CMsgGCCStrike15_v2_SetEventFavorite = new CMsgGCCStrike15_v2_SetEventFavorite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GetEventFavorites_Request$Type extends MessageType<CMsgGCCStrike15_v2_GetEventFavorites_Request> {
    constructor() {
        super("CMsgGCCStrike15_v2_GetEventFavorites_Request", [
            { no: 1, name: "all_events", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GetEventFavorites_Request>): CMsgGCCStrike15_v2_GetEventFavorites_Request {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GetEventFavorites_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GetEventFavorites_Request): CMsgGCCStrike15_v2_GetEventFavorites_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool all_events */ 1:
                    message.allEvents = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GetEventFavorites_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool all_events = 1; */
        if (message.allEvents !== undefined)
            writer.tag(1, WireType.Varint).bool(message.allEvents);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GetEventFavorites_Request
 */
export const CMsgGCCStrike15_v2_GetEventFavorites_Request = new CMsgGCCStrike15_v2_GetEventFavorites_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GetEventFavorites_Response$Type extends MessageType<CMsgGCCStrike15_v2_GetEventFavorites_Response> {
    constructor() {
        super("CMsgGCCStrike15_v2_GetEventFavorites_Response", [
            { no: 1, name: "all_events", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "json_favorites", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "json_featured", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GetEventFavorites_Response>): CMsgGCCStrike15_v2_GetEventFavorites_Response {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GetEventFavorites_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GetEventFavorites_Response): CMsgGCCStrike15_v2_GetEventFavorites_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool all_events */ 1:
                    message.allEvents = reader.bool();
                    break;
                case /* optional string json_favorites */ 2:
                    message.jsonFavorites = reader.string();
                    break;
                case /* optional string json_featured */ 3:
                    message.jsonFeatured = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GetEventFavorites_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool all_events = 1; */
        if (message.allEvents !== undefined)
            writer.tag(1, WireType.Varint).bool(message.allEvents);
        /* optional string json_favorites = 2; */
        if (message.jsonFavorites !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.jsonFavorites);
        /* optional string json_featured = 3; */
        if (message.jsonFeatured !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.jsonFeatured);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GetEventFavorites_Response
 */
export const CMsgGCCStrike15_v2_GetEventFavorites_Response = new CMsgGCCStrike15_v2_GetEventFavorites_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPerfReport$Type extends MessageType<CMsgGCCStrike15_v2_ClientPerfReport> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPerfReport", [
            { no: 1, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CMsgGCCStrike15_v2_ClientPerfReport_Entry }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPerfReport>): CMsgGCCStrike15_v2_ClientPerfReport {
        const message = { entries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPerfReport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPerfReport): CMsgGCCStrike15_v2_ClientPerfReport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CMsgGCCStrike15_v2_ClientPerfReport.Entry entries */ 1:
                    message.entries.push(CMsgGCCStrike15_v2_ClientPerfReport_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPerfReport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            CMsgGCCStrike15_v2_ClientPerfReport_Entry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPerfReport
 */
export const CMsgGCCStrike15_v2_ClientPerfReport = new CMsgGCCStrike15_v2_ClientPerfReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientPerfReport_Entry$Type extends MessageType<CMsgGCCStrike15_v2_ClientPerfReport_Entry> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientPerfReport.Entry", [
            { no: 1, name: "perfcounter", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "reference", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "actual", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "sourceid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "status", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientPerfReport_Entry>): CMsgGCCStrike15_v2_ClientPerfReport_Entry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientPerfReport_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientPerfReport_Entry): CMsgGCCStrike15_v2_ClientPerfReport_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 perfcounter */ 1:
                    message.perfcounter = reader.uint32();
                    break;
                case /* optional uint32 length */ 2:
                    message.length = reader.uint32();
                    break;
                case /* optional bytes reference */ 3:
                    message.reference = reader.bytes();
                    break;
                case /* optional bytes actual */ 4:
                    message.actual = reader.bytes();
                    break;
                case /* optional uint32 sourceid */ 5:
                    message.sourceid = reader.uint32();
                    break;
                case /* optional uint32 status */ 6:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientPerfReport_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 perfcounter = 1; */
        if (message.perfcounter !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.perfcounter);
        /* optional uint32 length = 2; */
        if (message.length !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.length);
        /* optional bytes reference = 3; */
        if (message.reference !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.reference);
        /* optional bytes actual = 4; */
        if (message.actual !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.actual);
        /* optional uint32 sourceid = 5; */
        if (message.sourceid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sourceid);
        /* optional uint32 status = 6; */
        if (message.status !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientPerfReport.Entry
 */
export const CMsgGCCStrike15_v2_ClientPerfReport_Entry = new CMsgGCCStrike15_v2_ClientPerfReport_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CVDiagnostic$Type extends MessageType<CVDiagnostic> {
    constructor() {
        super("CVDiagnostic", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "extended", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "value", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "string_value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CVDiagnostic>): CVDiagnostic {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CVDiagnostic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CVDiagnostic): CVDiagnostic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 extended */ 2:
                    message.extended = reader.uint32();
                    break;
                case /* optional uint64 value */ 3:
                    message.value = reader.uint64().toBigInt();
                    break;
                case /* optional string string_value */ 4:
                    message.stringValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CVDiagnostic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional uint32 extended = 2; */
        if (message.extended !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.extended);
        /* optional uint64 value = 3; */
        if (message.value !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.value);
        /* optional string string_value = 4; */
        if (message.stringValue !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.stringValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CVDiagnostic
 */
export const CVDiagnostic = new CVDiagnostic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_ClientReportValidation$Type extends MessageType<CMsgGCCStrike15_v2_ClientReportValidation> {
    constructor() {
        super("CMsgGCCStrike15_v2_ClientReportValidation", [
            { no: 1, name: "file_report", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "command_line", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "total_files", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "internal_error", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "trust_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "count_pending", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "count_completed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "process_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "osversion", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "clientreportversion", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "status_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "diagnostic1", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "diagnostic2", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "diagnostic3", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "last_launch_data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "report_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "client_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "diagnostic4", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "diagnostic5", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 20, name: "diagnostics", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CVDiagnostic }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_ClientReportValidation>): CMsgGCCStrike15_v2_ClientReportValidation {
        const message = { diagnostics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_ClientReportValidation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_ClientReportValidation): CMsgGCCStrike15_v2_ClientReportValidation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string file_report */ 1:
                    message.fileReport = reader.string();
                    break;
                case /* optional string command_line */ 2:
                    message.commandLine = reader.string();
                    break;
                case /* optional uint32 total_files */ 3:
                    message.totalFiles = reader.uint32();
                    break;
                case /* optional uint32 internal_error */ 4:
                    message.internalError = reader.uint32();
                    break;
                case /* optional uint32 trust_time */ 5:
                    message.trustTime = reader.uint32();
                    break;
                case /* optional uint32 count_pending */ 6:
                    message.countPending = reader.uint32();
                    break;
                case /* optional uint32 count_completed */ 7:
                    message.countCompleted = reader.uint32();
                    break;
                case /* optional uint32 process_id */ 8:
                    message.processId = reader.uint32();
                    break;
                case /* optional int32 osversion */ 9:
                    message.osversion = reader.int32();
                    break;
                case /* optional uint32 clientreportversion */ 10:
                    message.clientreportversion = reader.uint32();
                    break;
                case /* optional uint32 status_id */ 11:
                    message.statusId = reader.uint32();
                    break;
                case /* optional uint32 diagnostic1 */ 12:
                    message.diagnostic1 = reader.uint32();
                    break;
                case /* optional uint64 diagnostic2 */ 13:
                    message.diagnostic2 = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 diagnostic3 */ 14:
                    message.diagnostic3 = reader.uint64().toBigInt();
                    break;
                case /* optional string last_launch_data */ 15:
                    message.lastLaunchData = reader.string();
                    break;
                case /* optional uint32 report_count */ 16:
                    message.reportCount = reader.uint32();
                    break;
                case /* optional uint64 client_time */ 17:
                    message.clientTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 diagnostic4 */ 18:
                    message.diagnostic4 = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 diagnostic5 */ 19:
                    message.diagnostic5 = reader.uint64().toBigInt();
                    break;
                case /* repeated CVDiagnostic diagnostics */ 20:
                    message.diagnostics.push(CVDiagnostic.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_ClientReportValidation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string file_report = 1; */
        if (message.fileReport !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.fileReport);
        /* optional string command_line = 2; */
        if (message.commandLine !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.commandLine);
        /* optional uint32 total_files = 3; */
        if (message.totalFiles !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.totalFiles);
        /* optional uint32 internal_error = 4; */
        if (message.internalError !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.internalError);
        /* optional uint32 trust_time = 5; */
        if (message.trustTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.trustTime);
        /* optional uint32 count_pending = 6; */
        if (message.countPending !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.countPending);
        /* optional uint32 count_completed = 7; */
        if (message.countCompleted !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.countCompleted);
        /* optional uint32 process_id = 8; */
        if (message.processId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.processId);
        /* optional int32 osversion = 9; */
        if (message.osversion !== undefined)
            writer.tag(9, WireType.Varint).int32(message.osversion);
        /* optional uint32 clientreportversion = 10; */
        if (message.clientreportversion !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.clientreportversion);
        /* optional uint32 status_id = 11; */
        if (message.statusId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.statusId);
        /* optional uint32 diagnostic1 = 12; */
        if (message.diagnostic1 !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.diagnostic1);
        /* optional uint64 diagnostic2 = 13; */
        if (message.diagnostic2 !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.diagnostic2);
        /* optional uint64 diagnostic3 = 14; */
        if (message.diagnostic3 !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.diagnostic3);
        /* optional string last_launch_data = 15; */
        if (message.lastLaunchData !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.lastLaunchData);
        /* optional uint32 report_count = 16; */
        if (message.reportCount !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.reportCount);
        /* optional uint64 client_time = 17; */
        if (message.clientTime !== undefined)
            writer.tag(17, WireType.Varint).uint64(message.clientTime);
        /* optional uint64 diagnostic4 = 18; */
        if (message.diagnostic4 !== undefined)
            writer.tag(18, WireType.Varint).uint64(message.diagnostic4);
        /* optional uint64 diagnostic5 = 19; */
        if (message.diagnostic5 !== undefined)
            writer.tag(19, WireType.Varint).uint64(message.diagnostic5);
        /* repeated CVDiagnostic diagnostics = 20; */
        for (let i = 0; i < message.diagnostics.length; i++)
            CVDiagnostic.internalBinaryWrite(message.diagnostics[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_ClientReportValidation
 */
export const CMsgGCCStrike15_v2_ClientReportValidation = new CMsgGCCStrike15_v2_ClientReportValidation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode$Type extends MessageType<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode", [
            { no: 1, name: "file_report", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "offer_insecure_mode", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "offer_secure_mode", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "show_unsigned_ui", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "kick_user", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "show_trusted_ui", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "show_warning_not_trusted", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "show_warning_not_trusted_2", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "files_prevented_trusted", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode>): CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode): CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string file_report */ 1:
                    message.fileReport = reader.string();
                    break;
                case /* optional bool offer_insecure_mode */ 2:
                    message.offerInsecureMode = reader.bool();
                    break;
                case /* optional bool offer_secure_mode */ 3:
                    message.offerSecureMode = reader.bool();
                    break;
                case /* optional bool show_unsigned_ui */ 4:
                    message.showUnsignedUi = reader.bool();
                    break;
                case /* optional bool kick_user */ 5:
                    message.kickUser = reader.bool();
                    break;
                case /* optional bool show_trusted_ui */ 6:
                    message.showTrustedUi = reader.bool();
                    break;
                case /* optional bool show_warning_not_trusted */ 7:
                    message.showWarningNotTrusted = reader.bool();
                    break;
                case /* optional bool show_warning_not_trusted_2 */ 8:
                    message.showWarningNotTrusted2 = reader.bool();
                    break;
                case /* optional string files_prevented_trusted */ 9:
                    message.filesPreventedTrusted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string file_report = 1; */
        if (message.fileReport !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.fileReport);
        /* optional bool offer_insecure_mode = 2; */
        if (message.offerInsecureMode !== undefined)
            writer.tag(2, WireType.Varint).bool(message.offerInsecureMode);
        /* optional bool offer_secure_mode = 3; */
        if (message.offerSecureMode !== undefined)
            writer.tag(3, WireType.Varint).bool(message.offerSecureMode);
        /* optional bool show_unsigned_ui = 4; */
        if (message.showUnsignedUi !== undefined)
            writer.tag(4, WireType.Varint).bool(message.showUnsignedUi);
        /* optional bool kick_user = 5; */
        if (message.kickUser !== undefined)
            writer.tag(5, WireType.Varint).bool(message.kickUser);
        /* optional bool show_trusted_ui = 6; */
        if (message.showTrustedUi !== undefined)
            writer.tag(6, WireType.Varint).bool(message.showTrustedUi);
        /* optional bool show_warning_not_trusted = 7; */
        if (message.showWarningNotTrusted !== undefined)
            writer.tag(7, WireType.Varint).bool(message.showWarningNotTrusted);
        /* optional bool show_warning_not_trusted_2 = 8; */
        if (message.showWarningNotTrusted2 !== undefined)
            writer.tag(8, WireType.Varint).bool(message.showWarningNotTrusted2);
        /* optional string files_prevented_trusted = 9; */
        if (message.filesPreventedTrusted !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.filesPreventedTrusted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode
 */
export const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode = new CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ClientRequestValidation$Type extends MessageType<CMsgGCCStrike15_v2_GC2ClientRequestValidation> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ClientRequestValidation", [
            { no: 1, name: "full_report", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "module", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ClientRequestValidation>): CMsgGCCStrike15_v2_GC2ClientRequestValidation {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ClientRequestValidation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ClientRequestValidation): CMsgGCCStrike15_v2_GC2ClientRequestValidation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool full_report */ 1:
                    message.fullReport = reader.bool();
                    break;
                case /* optional string module */ 2:
                    message.module = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ClientRequestValidation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool full_report = 1; */
        if (message.fullReport !== undefined)
            writer.tag(1, WireType.Varint).bool(message.fullReport);
        /* optional string module = 2; */
        if (message.module !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.module);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ClientRequestValidation
 */
export const CMsgGCCStrike15_v2_GC2ClientRequestValidation = new CMsgGCCStrike15_v2_GC2ClientRequestValidation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ClientInitSystem$Type extends MessageType<CMsgGCCStrike15_v2_GC2ClientInitSystem> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ClientInitSystem", [
            { no: 1, name: "load", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "outputname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "key_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "sha_hash", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "cookie", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "manifest", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ClientInitSystem>): CMsgGCCStrike15_v2_GC2ClientInitSystem {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ClientInitSystem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ClientInitSystem): CMsgGCCStrike15_v2_GC2ClientInitSystem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool load */ 1:
                    message.load = reader.bool();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string outputname */ 3:
                    message.outputname = reader.string();
                    break;
                case /* optional bytes key_data */ 4:
                    message.keyData = reader.bytes();
                    break;
                case /* optional bytes sha_hash */ 5:
                    message.shaHash = reader.bytes();
                    break;
                case /* optional int32 cookie */ 6:
                    message.cookie = reader.int32();
                    break;
                case /* optional string manifest */ 7:
                    message.manifest = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ClientInitSystem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool load = 1; */
        if (message.load !== undefined)
            writer.tag(1, WireType.Varint).bool(message.load);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string outputname = 3; */
        if (message.outputname !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.outputname);
        /* optional bytes key_data = 4; */
        if (message.keyData !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.keyData);
        /* optional bytes sha_hash = 5; */
        if (message.shaHash !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.shaHash);
        /* optional int32 cookie = 6; */
        if (message.cookie !== undefined)
            writer.tag(6, WireType.Varint).int32(message.cookie);
        /* optional string manifest = 7; */
        if (message.manifest !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.manifest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ClientInitSystem
 */
export const CMsgGCCStrike15_v2_GC2ClientInitSystem = new CMsgGCCStrike15_v2_GC2ClientInitSystem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCCStrike15_v2_GC2ClientInitSystem_Response$Type extends MessageType<CMsgGCCStrike15_v2_GC2ClientInitSystem_Response> {
    constructor() {
        super("CMsgGCCStrike15_v2_GC2ClientInitSystem_Response", [
            { no: 1, name: "success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "diagnostic", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sha_hash", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "response", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "error_code1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "error_code2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "handle", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "einit_result", kind: "enum", opt: true, T: () => ["EInitSystemResult", EInitSystemResult] },
            { no: 9, name: "aux_system1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "aux_system2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CMsgGCCStrike15_v2_GC2ClientInitSystem_Response>): CMsgGCCStrike15_v2_GC2ClientInitSystem_Response {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CMsgGCCStrike15_v2_GC2ClientInitSystem_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CMsgGCCStrike15_v2_GC2ClientInitSystem_Response): CMsgGCCStrike15_v2_GC2ClientInitSystem_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* optional string diagnostic */ 2:
                    message.diagnostic = reader.string();
                    break;
                case /* optional bytes sha_hash */ 3:
                    message.shaHash = reader.bytes();
                    break;
                case /* optional int32 response */ 4:
                    message.response = reader.int32();
                    break;
                case /* optional int32 error_code1 */ 5:
                    message.errorCode1 = reader.int32();
                    break;
                case /* optional int32 error_code2 */ 6:
                    message.errorCode2 = reader.int32();
                    break;
                case /* optional int64 handle */ 7:
                    message.handle = reader.int64().toBigInt();
                    break;
                case /* optional EInitSystemResult einit_result */ 8:
                    message.einitResult = reader.int32();
                    break;
                case /* optional int32 aux_system1 */ 9:
                    message.auxSystem1 = reader.int32();
                    break;
                case /* optional int32 aux_system2 */ 10:
                    message.auxSystem2 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool success = 1; */
        if (message.success !== undefined)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* optional string diagnostic = 2; */
        if (message.diagnostic !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.diagnostic);
        /* optional bytes sha_hash = 3; */
        if (message.shaHash !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.shaHash);
        /* optional int32 response = 4; */
        if (message.response !== undefined)
            writer.tag(4, WireType.Varint).int32(message.response);
        /* optional int32 error_code1 = 5; */
        if (message.errorCode1 !== undefined)
            writer.tag(5, WireType.Varint).int32(message.errorCode1);
        /* optional int32 error_code2 = 6; */
        if (message.errorCode2 !== undefined)
            writer.tag(6, WireType.Varint).int32(message.errorCode2);
        /* optional int64 handle = 7; */
        if (message.handle !== undefined)
            writer.tag(7, WireType.Varint).int64(message.handle);
        /* optional EInitSystemResult einit_result = 8; */
        if (message.einitResult !== undefined)
            writer.tag(8, WireType.Varint).int32(message.einitResult);
        /* optional int32 aux_system1 = 9; */
        if (message.auxSystem1 !== undefined)
            writer.tag(9, WireType.Varint).int32(message.auxSystem1);
        /* optional int32 aux_system2 = 10; */
        if (message.auxSystem2 !== undefined)
            writer.tag(10, WireType.Varint).int32(message.auxSystem2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CMsgGCCStrike15_v2_GC2ClientInitSystem_Response
 */
export const CMsgGCCStrike15_v2_GC2ClientInitSystem_Response = new CMsgGCCStrike15_v2_GC2ClientInitSystem_Response$Type();
