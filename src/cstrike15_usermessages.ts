// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies
// @generated from protobuf file "cstrike15_usermessages.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve } from "./cstrike15_gcmessages";
import { CMsgGCCStrike15_ClientDeepStats } from "./cstrike15_gcmessages";
import { CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded } from "./cstrike15_gcmessages";
import { PlayerDecalDigitalSignature } from "./cstrike15_gcmessages";
import { ScoreLeaderboardData } from "./cstrike15_gcmessages";
import { CEconItemPreviewDataBlock } from "./cstrike15_gcmessages";
import { CMsgVector } from "./netmessages";
import { CMsgRGBA } from "./netmessages";
import { CMsgVector2D } from "./netmessages";
/**
 * @generated from protobuf message CCSUsrMsg_VGUIMenu
 */
export interface CCSUsrMsg_VGUIMenu {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional bool show = 2;
     */
    show?: boolean;
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
     */
    subkeys: CCSUsrMsg_VGUIMenu_Subkey[];
}
/**
 * @generated from protobuf message CCSUsrMsg_VGUIMenu.Subkey
 */
export interface CCSUsrMsg_VGUIMenu_Subkey {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string str = 2;
     */
    str?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_Geiger
 */
export interface CCSUsrMsg_Geiger {
    /**
     * @generated from protobuf field: optional int32 range = 1;
     */
    range?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_Train
 */
export interface CCSUsrMsg_Train {
    /**
     * @generated from protobuf field: optional int32 train = 1;
     */
    train?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_HudText
 */
export interface CCSUsrMsg_HudText {
    /**
     * @generated from protobuf field: optional string text = 1;
     */
    text?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_SayText
 */
export interface CCSUsrMsg_SayText {
    /**
     * @generated from protobuf field: optional int32 ent_idx = 1;
     */
    entIdx?: number;
    /**
     * @generated from protobuf field: optional string text = 2;
     */
    text?: string;
    /**
     * @generated from protobuf field: optional bool chat = 3;
     */
    chat?: boolean;
    /**
     * @generated from protobuf field: optional bool textallchat = 4;
     */
    textallchat?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_SayText2
 */
export interface CCSUsrMsg_SayText2 {
    /**
     * @generated from protobuf field: optional int32 ent_idx = 1;
     */
    entIdx?: number;
    /**
     * @generated from protobuf field: optional bool chat = 2;
     */
    chat?: boolean;
    /**
     * @generated from protobuf field: optional string msg_name = 3;
     */
    msgName?: string;
    /**
     * @generated from protobuf field: repeated string params = 4;
     */
    params: string[];
    /**
     * @generated from protobuf field: optional bool textallchat = 5;
     */
    textallchat?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_TextMsg
 */
export interface CCSUsrMsg_TextMsg {
    /**
     * @generated from protobuf field: optional int32 msg_dst = 1;
     */
    msgDst?: number;
    /**
     * @generated from protobuf field: repeated string params = 3;
     */
    params: string[];
}
/**
 * @generated from protobuf message CCSUsrMsg_HudMsg
 */
export interface CCSUsrMsg_HudMsg {
    /**
     * @generated from protobuf field: optional int32 channel = 1;
     */
    channel?: number;
    /**
     * @generated from protobuf field: optional CMsgVector2D pos = 2;
     */
    pos?: CMsgVector2D;
    /**
     * @generated from protobuf field: optional CMsgRGBA clr1 = 3;
     */
    clr1?: CMsgRGBA;
    /**
     * @generated from protobuf field: optional CMsgRGBA clr2 = 4;
     */
    clr2?: CMsgRGBA;
    /**
     * @generated from protobuf field: optional int32 effect = 5;
     */
    effect?: number;
    /**
     * @generated from protobuf field: optional float fade_in_time = 6;
     */
    fadeInTime?: number;
    /**
     * @generated from protobuf field: optional float fade_out_time = 7;
     */
    fadeOutTime?: number;
    /**
     * @generated from protobuf field: optional float hold_time = 9;
     */
    holdTime?: number;
    /**
     * @generated from protobuf field: optional float fx_time = 10;
     */
    fxTime?: number;
    /**
     * @generated from protobuf field: optional string text = 11;
     */
    text?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_Shake
 */
export interface CCSUsrMsg_Shake {
    /**
     * @generated from protobuf field: optional int32 command = 1;
     */
    command?: number;
    /**
     * @generated from protobuf field: optional float local_amplitude = 2;
     */
    localAmplitude?: number;
    /**
     * @generated from protobuf field: optional float frequency = 3;
     */
    frequency?: number;
    /**
     * @generated from protobuf field: optional float duration = 4;
     */
    duration?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_Fade
 */
export interface CCSUsrMsg_Fade {
    /**
     * @generated from protobuf field: optional int32 duration = 1;
     */
    duration?: number;
    /**
     * @generated from protobuf field: optional int32 hold_time = 2;
     */
    holdTime?: number;
    /**
     * @generated from protobuf field: optional int32 flags = 3;
     */
    flags?: number;
    /**
     * @generated from protobuf field: optional CMsgRGBA clr = 4;
     */
    clr?: CMsgRGBA;
}
/**
 * @generated from protobuf message CCSUsrMsg_Rumble
 */
export interface CCSUsrMsg_Rumble {
    /**
     * @generated from protobuf field: optional int32 index = 1;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional int32 data = 2;
     */
    data?: number;
    /**
     * @generated from protobuf field: optional int32 flags = 3;
     */
    flags?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_CloseCaption
 */
export interface CCSUsrMsg_CloseCaption {
    /**
     * @generated from protobuf field: optional uint32 hash = 1;
     */
    hash?: number;
    /**
     * @generated from protobuf field: optional int32 duration = 2;
     */
    duration?: number;
    /**
     * @generated from protobuf field: optional bool from_player = 3;
     */
    fromPlayer?: boolean;
    /**
     * @generated from protobuf field: optional string cctoken = 4;
     */
    cctoken?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_CloseCaptionDirect
 */
export interface CCSUsrMsg_CloseCaptionDirect {
    /**
     * @generated from protobuf field: optional uint32 hash = 1;
     */
    hash?: number;
    /**
     * @generated from protobuf field: optional int32 duration = 2;
     */
    duration?: number;
    /**
     * @generated from protobuf field: optional bool from_player = 3;
     */
    fromPlayer?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_SendAudio
 */
export interface CCSUsrMsg_SendAudio {
    /**
     * @generated from protobuf field: optional string radio_sound = 1;
     */
    radioSound?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_RawAudio
 */
export interface CCSUsrMsg_RawAudio {
    /**
     * @generated from protobuf field: optional int32 pitch = 1;
     */
    pitch?: number;
    /**
     * @generated from protobuf field: optional int32 entidx = 2;
     */
    entidx?: number;
    /**
     * @generated from protobuf field: optional float duration = 3;
     */
    duration?: number;
    /**
     * @generated from protobuf field: optional string voice_filename = 4;
     */
    voiceFilename?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_VoiceMask
 */
export interface CCSUsrMsg_VoiceMask {
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
     */
    playerMasks: CCSUsrMsg_VoiceMask_PlayerMask[];
    /**
     * @generated from protobuf field: optional bool player_mod_enable = 2;
     */
    playerModEnable?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_VoiceMask.PlayerMask
 */
export interface CCSUsrMsg_VoiceMask_PlayerMask {
    /**
     * @generated from protobuf field: optional int32 game_rules_mask = 1;
     */
    gameRulesMask?: number;
    /**
     * @generated from protobuf field: optional int32 ban_masks = 2;
     */
    banMasks?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_Damage
 */
export interface CCSUsrMsg_Damage {
    /**
     * @generated from protobuf field: optional int32 amount = 1;
     */
    amount?: number;
    /**
     * @generated from protobuf field: optional CMsgVector inflictor_world_pos = 2;
     */
    inflictorWorldPos?: CMsgVector;
    /**
     * @generated from protobuf field: optional int32 victim_entindex = 3;
     */
    victimEntindex?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_RadioText
 */
export interface CCSUsrMsg_RadioText {
    /**
     * @generated from protobuf field: optional int32 msg_dst = 1;
     */
    msgDst?: number;
    /**
     * @generated from protobuf field: optional int32 client = 2;
     */
    client?: number;
    /**
     * @generated from protobuf field: optional string msg_name = 3;
     */
    msgName?: string;
    /**
     * @generated from protobuf field: repeated string params = 4;
     */
    params: string[];
}
/**
 * @generated from protobuf message CCSUsrMsg_HintText
 */
export interface CCSUsrMsg_HintText {
    /**
     * @generated from protobuf field: optional string text = 1;
     */
    text?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_KeyHintText
 */
export interface CCSUsrMsg_KeyHintText {
    /**
     * @generated from protobuf field: repeated string hints = 1;
     */
    hints: string[];
}
/**
 * @generated from protobuf message CCSUsrMsg_ProcessSpottedEntityUpdate
 */
export interface CCSUsrMsg_ProcessSpottedEntityUpdate {
    /**
     * @generated from protobuf field: optional bool new_update = 1;
     */
    newUpdate?: boolean;
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
     */
    entityUpdates: CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate[];
}
/**
 * @generated from protobuf message CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate
 */
export interface CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate {
    /**
     * @generated from protobuf field: optional int32 entity_idx = 1;
     */
    entityIdx?: number;
    /**
     * @generated from protobuf field: optional int32 class_id = 2;
     */
    classId?: number;
    /**
     * @generated from protobuf field: optional int32 origin_x = 3;
     */
    originX?: number;
    /**
     * @generated from protobuf field: optional int32 origin_y = 4;
     */
    originY?: number;
    /**
     * @generated from protobuf field: optional int32 origin_z = 5;
     */
    originZ?: number;
    /**
     * @generated from protobuf field: optional int32 angle_y = 6;
     */
    angleY?: number;
    /**
     * @generated from protobuf field: optional bool defuser = 7;
     */
    defuser?: boolean;
    /**
     * @generated from protobuf field: optional bool player_has_defuser = 8;
     */
    playerHasDefuser?: boolean;
    /**
     * @generated from protobuf field: optional bool player_has_c4 = 9;
     */
    playerHasC4?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_SendPlayerItemDrops
 */
export interface CCSUsrMsg_SendPlayerItemDrops {
    /**
     * @generated from protobuf field: repeated CEconItemPreviewDataBlock entity_updates = 1;
     */
    entityUpdates: CEconItemPreviewDataBlock[];
}
/**
 * @generated from protobuf message CCSUsrMsg_SendPlayerItemFound
 */
export interface CCSUsrMsg_SendPlayerItemFound {
    /**
     * @generated from protobuf field: optional CEconItemPreviewDataBlock iteminfo = 1;
     */
    iteminfo?: CEconItemPreviewDataBlock;
    /**
     * @generated from protobuf field: optional int32 entindex = 2;
     */
    entindex?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_ReloadEffect
 */
export interface CCSUsrMsg_ReloadEffect {
    /**
     * @generated from protobuf field: optional int32 entidx = 1;
     */
    entidx?: number;
    /**
     * @generated from protobuf field: optional int32 actanim = 2;
     */
    actanim?: number;
    /**
     * @generated from protobuf field: optional float origin_x = 3;
     */
    originX?: number;
    /**
     * @generated from protobuf field: optional float origin_y = 4;
     */
    originY?: number;
    /**
     * @generated from protobuf field: optional float origin_z = 5;
     */
    originZ?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_WeaponSound
 */
export interface CCSUsrMsg_WeaponSound {
    /**
     * @generated from protobuf field: optional int32 entidx = 1;
     */
    entidx?: number;
    /**
     * @generated from protobuf field: optional float origin_x = 2;
     */
    originX?: number;
    /**
     * @generated from protobuf field: optional float origin_y = 3;
     */
    originY?: number;
    /**
     * @generated from protobuf field: optional float origin_z = 4;
     */
    originZ?: number;
    /**
     * @generated from protobuf field: optional string sound = 5;
     */
    sound?: string;
    /**
     * @generated from protobuf field: optional float timestamp = 6;
     */
    timestamp?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_UpdateScreenHealthBar
 */
export interface CCSUsrMsg_UpdateScreenHealthBar {
    /**
     * @generated from protobuf field: optional int32 entidx = 1;
     */
    entidx?: number;
    /**
     * @generated from protobuf field: optional float healthratio_old = 2;
     */
    healthratioOld?: number;
    /**
     * @generated from protobuf field: optional float healthratio_new = 3;
     */
    healthratioNew?: number;
    /**
     * @generated from protobuf field: optional int32 style = 4;
     */
    style?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_EntityOutlineHighlight
 */
export interface CCSUsrMsg_EntityOutlineHighlight {
    /**
     * @generated from protobuf field: optional int32 entidx = 1;
     */
    entidx?: number;
    /**
     * @generated from protobuf field: optional bool removehighlight = 2;
     */
    removehighlight?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_AdjustMoney
 */
export interface CCSUsrMsg_AdjustMoney {
    /**
     * @generated from protobuf field: optional int32 amount = 1;
     */
    amount?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_ReportHit
 */
export interface CCSUsrMsg_ReportHit {
    /**
     * @generated from protobuf field: optional float pos_x = 1;
     */
    posX?: number;
    /**
     * @generated from protobuf field: optional float pos_y = 2;
     */
    posY?: number;
    /**
     * @generated from protobuf field: optional float timestamp = 4;
     */
    timestamp?: number;
    /**
     * @generated from protobuf field: optional float pos_z = 3;
     */
    posZ?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_KillCam
 */
export interface CCSUsrMsg_KillCam {
    /**
     * @generated from protobuf field: optional int32 obs_mode = 1;
     */
    obsMode?: number;
    /**
     * @generated from protobuf field: optional int32 first_target = 2;
     */
    firstTarget?: number;
    /**
     * @generated from protobuf field: optional int32 second_target = 3;
     */
    secondTarget?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_DesiredTimescale
 */
export interface CCSUsrMsg_DesiredTimescale {
    /**
     * @generated from protobuf field: optional float desired_timescale = 1;
     */
    desiredTimescale?: number;
    /**
     * @generated from protobuf field: optional float duration_realtime_sec = 2;
     */
    durationRealtimeSec?: number;
    /**
     * @generated from protobuf field: optional int32 interpolator_type = 3;
     */
    interpolatorType?: number;
    /**
     * @generated from protobuf field: optional float start_blend_time = 4;
     */
    startBlendTime?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_CurrentTimescale
 */
export interface CCSUsrMsg_CurrentTimescale {
    /**
     * @generated from protobuf field: optional float cur_timescale = 1;
     */
    curTimescale?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_AchievementEvent
 */
export interface CCSUsrMsg_AchievementEvent {
    /**
     * @generated from protobuf field: optional int32 achievement = 1;
     */
    achievement?: number;
    /**
     * @generated from protobuf field: optional int32 count = 2;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional int32 user_id = 3;
     */
    userId?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_MatchEndConditions
 */
export interface CCSUsrMsg_MatchEndConditions {
    /**
     * @generated from protobuf field: optional int32 fraglimit = 1;
     */
    fraglimit?: number;
    /**
     * @generated from protobuf field: optional int32 mp_maxrounds = 2;
     */
    mpMaxrounds?: number;
    /**
     * @generated from protobuf field: optional int32 mp_winlimit = 3;
     */
    mpWinlimit?: number;
    /**
     * @generated from protobuf field: optional int32 mp_timelimit = 4;
     */
    mpTimelimit?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_PlayerStatsUpdate
 */
export interface CCSUsrMsg_PlayerStatsUpdate {
    /**
     * @generated from protobuf field: optional int32 version = 1;
     */
    version?: number;
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
     */
    stats: CCSUsrMsg_PlayerStatsUpdate_Stat[];
    /**
     * @generated from protobuf field: optional int32 user_id = 5;
     */
    userId?: number;
    /**
     * @generated from protobuf field: optional int32 crc = 6;
     */
    crc?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_PlayerStatsUpdate.Stat
 */
export interface CCSUsrMsg_PlayerStatsUpdate_Stat {
    /**
     * @generated from protobuf field: optional int32 idx = 1;
     */
    idx?: number;
    /**
     * @generated from protobuf field: optional int32 delta = 2;
     */
    delta?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_DisplayInventory
 */
export interface CCSUsrMsg_DisplayInventory {
    /**
     * @generated from protobuf field: optional bool display = 1;
     */
    display?: boolean;
    /**
     * @generated from protobuf field: optional int32 user_id = 2;
     */
    userId?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_QuestProgress
 */
export interface CCSUsrMsg_QuestProgress {
    /**
     * @generated from protobuf field: optional uint32 quest_id = 1;
     */
    questId?: number;
    /**
     * @generated from protobuf field: optional uint32 normal_points = 2;
     */
    normalPoints?: number;
    /**
     * @generated from protobuf field: optional uint32 bonus_points = 3;
     */
    bonusPoints?: number;
    /**
     * @generated from protobuf field: optional bool is_event_quest = 4;
     */
    isEventQuest?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_ScoreLeaderboardData
 */
export interface CCSUsrMsg_ScoreLeaderboardData {
    /**
     * @generated from protobuf field: optional ScoreLeaderboardData data = 1;
     */
    data?: ScoreLeaderboardData;
}
/**
 * @generated from protobuf message CCSUsrMsg_PlayerDecalDigitalSignature
 */
export interface CCSUsrMsg_PlayerDecalDigitalSignature {
    /**
     * @generated from protobuf field: optional PlayerDecalDigitalSignature data = 1;
     */
    data?: PlayerDecalDigitalSignature;
}
/**
 * @generated from protobuf message CCSUsrMsg_XRankGet
 */
export interface CCSUsrMsg_XRankGet {
    /**
     * @generated from protobuf field: optional int32 mode_idx = 1;
     */
    modeIdx?: number;
    /**
     * @generated from protobuf field: optional int32 controller = 2;
     */
    controller?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_XRankUpd
 */
export interface CCSUsrMsg_XRankUpd {
    /**
     * @generated from protobuf field: optional int32 mode_idx = 1;
     */
    modeIdx?: number;
    /**
     * @generated from protobuf field: optional int32 controller = 2;
     */
    controller?: number;
    /**
     * @generated from protobuf field: optional int32 ranking = 3;
     */
    ranking?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_CallVoteFailed
 */
export interface CCSUsrMsg_CallVoteFailed {
    /**
     * @generated from protobuf field: optional int32 reason = 1;
     */
    reason?: number;
    /**
     * @generated from protobuf field: optional int32 time = 2;
     */
    time?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_VoteStart
 */
export interface CCSUsrMsg_VoteStart {
    /**
     * @generated from protobuf field: optional int32 team = 1;
     */
    team?: number;
    /**
     * @generated from protobuf field: optional int32 ent_idx = 2;
     */
    entIdx?: number;
    /**
     * @generated from protobuf field: optional int32 vote_type = 3;
     */
    voteType?: number;
    /**
     * @generated from protobuf field: optional string disp_str = 4;
     */
    dispStr?: string;
    /**
     * @generated from protobuf field: optional string details_str = 5;
     */
    detailsStr?: string;
    /**
     * @generated from protobuf field: optional string other_team_str = 6;
     */
    otherTeamStr?: string;
    /**
     * @generated from protobuf field: optional bool is_yes_no_vote = 7;
     */
    isYesNoVote?: boolean;
    /**
     * @generated from protobuf field: optional int32 entidx_target = 8;
     */
    entidxTarget?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_VotePass
 */
export interface CCSUsrMsg_VotePass {
    /**
     * @generated from protobuf field: optional int32 team = 1;
     */
    team?: number;
    /**
     * @generated from protobuf field: optional int32 vote_type = 2;
     */
    voteType?: number;
    /**
     * @generated from protobuf field: optional string disp_str = 3;
     */
    dispStr?: string;
    /**
     * @generated from protobuf field: optional string details_str = 4;
     */
    detailsStr?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_VoteFailed
 */
export interface CCSUsrMsg_VoteFailed {
    /**
     * @generated from protobuf field: optional int32 team = 1;
     */
    team?: number;
    /**
     * @generated from protobuf field: optional int32 reason = 2;
     */
    reason?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_VoteSetup
 */
export interface CCSUsrMsg_VoteSetup {
    /**
     * @generated from protobuf field: repeated string potential_issues = 1;
     */
    potentialIssues: string[];
}
/**
 * @generated from protobuf message CCSUsrMsg_SendLastKillerDamageToClient
 */
export interface CCSUsrMsg_SendLastKillerDamageToClient {
    /**
     * @generated from protobuf field: optional int32 num_hits_given = 1;
     */
    numHitsGiven?: number;
    /**
     * @generated from protobuf field: optional int32 damage_given = 2;
     */
    damageGiven?: number;
    /**
     * @generated from protobuf field: optional int32 num_hits_taken = 3;
     */
    numHitsTaken?: number;
    /**
     * @generated from protobuf field: optional int32 damage_taken = 4;
     */
    damageTaken?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_ServerRankUpdate
 */
export interface CCSUsrMsg_ServerRankUpdate {
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
     */
    rankUpdate: CCSUsrMsg_ServerRankUpdate_RankUpdate[];
}
/**
 * @generated from protobuf message CCSUsrMsg_ServerRankUpdate.RankUpdate
 */
export interface CCSUsrMsg_ServerRankUpdate_RankUpdate {
    /**
     * @generated from protobuf field: optional int32 account_id = 1;
     */
    accountId?: number;
    /**
     * @generated from protobuf field: optional int32 rank_old = 2;
     */
    rankOld?: number;
    /**
     * @generated from protobuf field: optional int32 rank_new = 3;
     */
    rankNew?: number;
    /**
     * @generated from protobuf field: optional int32 num_wins = 4;
     */
    numWins?: number;
    /**
     * @generated from protobuf field: optional float rank_change = 5;
     */
    rankChange?: number;
    /**
     * @generated from protobuf field: optional int32 rank_type_id = 6;
     */
    rankTypeId?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_XpUpdate
 */
export interface CCSUsrMsg_XpUpdate {
    /**
     * @generated from protobuf field: optional CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
     */
    data?: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded;
}
/**
 * @generated from protobuf message CCSUsrMsg_ItemPickup
 */
export interface CCSUsrMsg_ItemPickup {
    /**
     * @generated from protobuf field: optional string item = 1;
     */
    item?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_ShowMenu
 */
export interface CCSUsrMsg_ShowMenu {
    /**
     * @generated from protobuf field: optional int32 bits_valid_slots = 1;
     */
    bitsValidSlots?: number;
    /**
     * @generated from protobuf field: optional int32 display_time = 2;
     */
    displayTime?: number;
    /**
     * @generated from protobuf field: optional string menu_string = 3;
     */
    menuString?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_BarTime
 */
export interface CCSUsrMsg_BarTime {
    /**
     * @generated from protobuf field: optional string time = 1;
     */
    time?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_AmmoDenied
 */
export interface CCSUsrMsg_AmmoDenied {
    /**
     * @generated from protobuf field: optional int32 ammoIdx = 1;
     */
    ammoIdx?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_MarkAchievement
 */
export interface CCSUsrMsg_MarkAchievement {
    /**
     * @generated from protobuf field: optional string achievement = 1;
     */
    achievement?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_MatchStatsUpdate
 */
export interface CCSUsrMsg_MatchStatsUpdate {
    /**
     * @generated from protobuf field: optional string update = 1;
     */
    update?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_ItemDrop
 */
export interface CCSUsrMsg_ItemDrop {
    /**
     * @generated from protobuf field: optional int64 itemid = 1;
     */
    itemid?: bigint;
    /**
     * @generated from protobuf field: optional bool death = 2;
     */
    death?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_GlowPropTurnOff
 */
export interface CCSUsrMsg_GlowPropTurnOff {
    /**
     * @generated from protobuf field: optional int32 entidx = 1;
     */
    entidx?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundBackupFilenames
 */
export interface CCSUsrMsg_RoundBackupFilenames {
    /**
     * @generated from protobuf field: optional int32 count = 1;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional int32 index = 2;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional string filename = 3;
     */
    filename?: string;
    /**
     * @generated from protobuf field: optional string nicename = 4;
     */
    nicename?: string;
}
/**
 * @generated from protobuf message CCSUsrMsg_SSUI
 */
export interface CCSUsrMsg_SSUI {
    /**
     * @generated from protobuf field: optional bool show = 1;
     */
    show?: boolean;
    /**
     * @generated from protobuf field: optional float start_time = 2;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional float end_time = 3;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_SurvivalStats
 */
export interface CCSUsrMsg_SurvivalStats {
    /**
     * @generated from protobuf field: optional uint64 xuid = 1;
     */
    xuid?: bigint;
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_SurvivalStats.Fact facts = 2;
     */
    facts: CCSUsrMsg_SurvivalStats_Fact[];
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_SurvivalStats.Placement users = 3;
     */
    users: CCSUsrMsg_SurvivalStats_Placement[];
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_SurvivalStats.Damage damages = 5;
     */
    damages: CCSUsrMsg_SurvivalStats_Damage[];
    /**
     * @generated from protobuf field: optional int32 ticknumber = 4;
     */
    ticknumber?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_SurvivalStats.Fact
 */
export interface CCSUsrMsg_SurvivalStats_Fact {
    /**
     * @generated from protobuf field: optional int32 type = 1;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional int32 display = 2;
     */
    display?: number;
    /**
     * @generated from protobuf field: optional int32 value = 3;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional float interestingness = 4;
     */
    interestingness?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_SurvivalStats.Placement
 */
export interface CCSUsrMsg_SurvivalStats_Placement {
    /**
     * @generated from protobuf field: optional uint64 xuid = 1;
     */
    xuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 teamnumber = 2;
     */
    teamnumber?: number;
    /**
     * @generated from protobuf field: optional int32 placement = 3;
     */
    placement?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_SurvivalStats.Damage
 */
export interface CCSUsrMsg_SurvivalStats_Damage {
    /**
     * @generated from protobuf field: optional uint64 xuid = 1;
     */
    xuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 to = 2;
     */
    to?: number;
    /**
     * @generated from protobuf field: optional int32 to_hits = 3;
     */
    toHits?: number;
    /**
     * @generated from protobuf field: optional int32 from = 4;
     */
    from?: number;
    /**
     * @generated from protobuf field: optional int32 from_hits = 5;
     */
    fromHits?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_EndOfMatchAllPlayersData
 */
export interface CCSUsrMsg_EndOfMatchAllPlayersData {
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
     */
    allplayerdata: CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData[];
    /**
     * @generated from protobuf field: optional int32 scene = 2;
     */
    scene?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_EndOfMatchAllPlayersData.Accolade
 */
export interface CCSUsrMsg_EndOfMatchAllPlayersData_Accolade {
    /**
     * @generated from protobuf field: optional int32 eaccolade = 1;
     */
    eaccolade?: number;
    /**
     * @generated from protobuf field: optional float value = 2;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional int32 position = 3;
     */
    position?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData
 */
export interface CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData {
    /**
     * @generated from protobuf field: optional int32 entindex = 1;
     */
    entindex?: number;
    /**
     * @generated from protobuf field: optional uint64 xuid = 2;
     */
    xuid?: bigint;
    /**
     * @generated from protobuf field: optional string name = 3;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional int32 teamnumber = 4;
     */
    teamnumber?: number;
    /**
     * @generated from protobuf field: optional CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
     */
    nomination?: CCSUsrMsg_EndOfMatchAllPlayersData_Accolade;
    /**
     * @generated from protobuf field: repeated CEconItemPreviewDataBlock items = 6;
     */
    items: CEconItemPreviewDataBlock[];
    /**
     * @generated from protobuf field: optional int32 playercolor = 7;
     */
    playercolor?: number;
    /**
     * @generated from protobuf field: optional bool isbot = 8;
     */
    isbot?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundImpactScoreData
 */
export interface CCSUsrMsg_RoundImpactScoreData {
    /**
     * @generated from protobuf field: optional CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions = 1;
     */
    initConditions?: CCSUsrMsg_RoundImpactScoreData_InitialConditions;
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data = 2;
     */
    allRisEventData: CCSUsrMsg_RoundImpactScoreData_RisEvent[];
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent
 */
export interface CCSUsrMsg_RoundImpactScoreData_RisEvent {
    /**
     * @generated from protobuf field: optional float timestamp = 1;
     */
    timestamp?: number;
    /**
     * @generated from protobuf field: optional int32 terrorist_odds = 2;
     */
    terroristOdds?: number;
    /**
     * @generated from protobuf field: optional int32 ct_alive = 3;
     */
    ctAlive?: number;
    /**
     * @generated from protobuf field: optional int32 t_alive = 4;
     */
    tAlive?: number;
    /**
     * @generated from protobuf field: optional CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data = 5;
     */
    victimData?: CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim;
    /**
     * @generated from protobuf field: optional CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data = 6;
     */
    objectiveData?: CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective;
    /**
     * @generated from protobuf field: repeated CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data = 7;
     */
    allDamageData: CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage[];
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim
 */
export interface CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim {
    /**
     * @generated from protobuf field: optional int32 team_number = 1;
     */
    teamNumber?: number;
    /**
     * @generated from protobuf field: optional int32 entindex = 2;
     */
    entindex?: number;
    /**
     * @generated from protobuf field: optional uint64 xuid = 3;
     */
    xuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 color = 4;
     */
    color?: number;
    /**
     * @generated from protobuf field: optional bool is_bot = 5;
     */
    isBot?: boolean;
    /**
     * @generated from protobuf field: optional bool is_dead = 6;
     */
    isDead?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective
 */
export interface CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective {
    /**
     * @generated from protobuf field: optional int32 type = 1;
     */
    type?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage
 */
export interface CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage {
    /**
     * @generated from protobuf field: optional int32 target_entindex = 1;
     */
    targetEntindex?: number;
    /**
     * @generated from protobuf field: optional uint64 target_xuid = 2;
     */
    targetXuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 health_removed = 3;
     */
    healthRemoved?: number;
    /**
     * @generated from protobuf field: optional int32 num_hits = 4;
     */
    numHits?: number;
    /**
     * @generated from protobuf field: optional int32 return_health_removed = 5;
     */
    returnHealthRemoved?: number;
    /**
     * @generated from protobuf field: optional int32 num_return_hits = 6;
     */
    numReturnHits?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_RoundImpactScoreData.InitialConditions
 */
export interface CCSUsrMsg_RoundImpactScoreData_InitialConditions {
    /**
     * @generated from protobuf field: optional int32 ct_equip_value = 1;
     */
    ctEquipValue?: number;
    /**
     * @generated from protobuf field: optional int32 t_equip_value = 2;
     */
    tEquipValue?: number;
    /**
     * @generated from protobuf field: optional int32 terrorist_odds = 3;
     */
    terroristOdds?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_CurrentRoundOdds
 */
export interface CCSUsrMsg_CurrentRoundOdds {
    /**
     * @generated from protobuf field: optional int32 odds = 1;
     */
    odds?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_DeepStats
 */
export interface CCSUsrMsg_DeepStats {
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_ClientDeepStats stats = 1;
     */
    stats?: CMsgGCCStrike15_ClientDeepStats;
}
/**
 * @generated from protobuf message CCSUsrMsg_ResetHud
 */
export interface CCSUsrMsg_ResetHud {
    /**
     * @generated from protobuf field: optional bool reset = 1;
     */
    reset?: boolean;
}
/**
 * @generated from protobuf message CCSUsrMsg_GameTitle
 */
export interface CCSUsrMsg_GameTitle {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_RequestState
 */
export interface CCSUsrMsg_RequestState {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_StopSpectatorMode
 */
export interface CCSUsrMsg_StopSpectatorMode {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_DisconnectToLobby
 */
export interface CCSUsrMsg_DisconnectToLobby {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_WarmupHasEnded
 */
export interface CCSUsrMsg_WarmupHasEnded {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_ClientInfo
 */
export interface CCSUsrMsg_ClientInfo {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message CCSUsrMsg_ServerRankRevealAll
 */
export interface CCSUsrMsg_ServerRankRevealAll {
    /**
     * @generated from protobuf field: optional int32 seconds_till_shutdown = 1;
     */
    secondsTillShutdown?: number;
    /**
     * @generated from protobuf field: optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
     */
    reservation?: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
}
/**
 * @generated from protobuf message CCSUsrMsg_UtilMsg
 */
export interface CCSUsrMsg_UtilMsg {
    /**
     * @generated from protobuf field: optional string util_action = 1;
     */
    utilAction?: string;
    /**
     * @generated from protobuf field: optional int32 util1 = 2;
     */
    util1?: number;
    /**
     * @generated from protobuf field: optional int32 util2 = 3;
     */
    util2?: number;
    /**
     * @generated from protobuf field: optional int32 util3 = 4;
     */
    util3?: number;
    /**
     * @generated from protobuf field: optional int32 util4 = 5;
     */
    util4?: number;
    /**
     * @generated from protobuf field: optional int32 util5 = 6;
     */
    util5?: number;
}
/**
 * @generated from protobuf enum ECstrike15UserMessages
 */
export enum ECstrike15UserMessages {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: CS_UM_VGUIMenu = 1;
     */
    CS_UM_VGUIMenu = 1,
    /**
     * @generated from protobuf enum value: CS_UM_Geiger = 2;
     */
    CS_UM_Geiger = 2,
    /**
     * @generated from protobuf enum value: CS_UM_Train = 3;
     */
    CS_UM_Train = 3,
    /**
     * @generated from protobuf enum value: CS_UM_HudText = 4;
     */
    CS_UM_HudText = 4,
    /**
     * @generated from protobuf enum value: CS_UM_SayText = 5;
     */
    CS_UM_SayText = 5,
    /**
     * @generated from protobuf enum value: CS_UM_SayText2 = 6;
     */
    CS_UM_SayText2 = 6,
    /**
     * @generated from protobuf enum value: CS_UM_TextMsg = 7;
     */
    CS_UM_TextMsg = 7,
    /**
     * @generated from protobuf enum value: CS_UM_HudMsg = 8;
     */
    CS_UM_HudMsg = 8,
    /**
     * @generated from protobuf enum value: CS_UM_ResetHud = 9;
     */
    CS_UM_ResetHud = 9,
    /**
     * @generated from protobuf enum value: CS_UM_GameTitle = 10;
     */
    CS_UM_GameTitle = 10,
    /**
     * @generated from protobuf enum value: CS_UM_Shake = 12;
     */
    CS_UM_Shake = 12,
    /**
     * @generated from protobuf enum value: CS_UM_Fade = 13;
     */
    CS_UM_Fade = 13,
    /**
     * @generated from protobuf enum value: CS_UM_Rumble = 14;
     */
    CS_UM_Rumble = 14,
    /**
     * @generated from protobuf enum value: CS_UM_CloseCaption = 15;
     */
    CS_UM_CloseCaption = 15,
    /**
     * @generated from protobuf enum value: CS_UM_CloseCaptionDirect = 16;
     */
    CS_UM_CloseCaptionDirect = 16,
    /**
     * @generated from protobuf enum value: CS_UM_SendAudio = 17;
     */
    CS_UM_SendAudio = 17,
    /**
     * @generated from protobuf enum value: CS_UM_RawAudio = 18;
     */
    CS_UM_RawAudio = 18,
    /**
     * @generated from protobuf enum value: CS_UM_VoiceMask = 19;
     */
    CS_UM_VoiceMask = 19,
    /**
     * @generated from protobuf enum value: CS_UM_RequestState = 20;
     */
    CS_UM_RequestState = 20,
    /**
     * @generated from protobuf enum value: CS_UM_Damage = 21;
     */
    CS_UM_Damage = 21,
    /**
     * @generated from protobuf enum value: CS_UM_RadioText = 22;
     */
    CS_UM_RadioText = 22,
    /**
     * @generated from protobuf enum value: CS_UM_HintText = 23;
     */
    CS_UM_HintText = 23,
    /**
     * @generated from protobuf enum value: CS_UM_KeyHintText = 24;
     */
    CS_UM_KeyHintText = 24,
    /**
     * @generated from protobuf enum value: CS_UM_ProcessSpottedEntityUpdate = 25;
     */
    CS_UM_ProcessSpottedEntityUpdate = 25,
    /**
     * @generated from protobuf enum value: CS_UM_ReloadEffect = 26;
     */
    CS_UM_ReloadEffect = 26,
    /**
     * @generated from protobuf enum value: CS_UM_AdjustMoney = 27;
     */
    CS_UM_AdjustMoney = 27,
    /**
     * @generated from protobuf enum value: CS_UM_UpdateTeamMoney = 28;
     */
    CS_UM_UpdateTeamMoney = 28,
    /**
     * @generated from protobuf enum value: CS_UM_StopSpectatorMode = 29;
     */
    CS_UM_StopSpectatorMode = 29,
    /**
     * @generated from protobuf enum value: CS_UM_KillCam = 30;
     */
    CS_UM_KillCam = 30,
    /**
     * @generated from protobuf enum value: CS_UM_DesiredTimescale = 31;
     */
    CS_UM_DesiredTimescale = 31,
    /**
     * @generated from protobuf enum value: CS_UM_CurrentTimescale = 32;
     */
    CS_UM_CurrentTimescale = 32,
    /**
     * @generated from protobuf enum value: CS_UM_AchievementEvent = 33;
     */
    CS_UM_AchievementEvent = 33,
    /**
     * @generated from protobuf enum value: CS_UM_MatchEndConditions = 34;
     */
    CS_UM_MatchEndConditions = 34,
    /**
     * @generated from protobuf enum value: CS_UM_DisconnectToLobby = 35;
     */
    CS_UM_DisconnectToLobby = 35,
    /**
     * @generated from protobuf enum value: CS_UM_PlayerStatsUpdate = 36;
     */
    CS_UM_PlayerStatsUpdate = 36,
    /**
     * @generated from protobuf enum value: CS_UM_DisplayInventory = 37;
     */
    CS_UM_DisplayInventory = 37,
    /**
     * @generated from protobuf enum value: CS_UM_WarmupHasEnded = 38;
     */
    CS_UM_WarmupHasEnded = 38,
    /**
     * @generated from protobuf enum value: CS_UM_ClientInfo = 39;
     */
    CS_UM_ClientInfo = 39,
    /**
     * @generated from protobuf enum value: CS_UM_XRankGet = 40;
     */
    CS_UM_XRankGet = 40,
    /**
     * @generated from protobuf enum value: CS_UM_XRankUpd = 41;
     */
    CS_UM_XRankUpd = 41,
    /**
     * @generated from protobuf enum value: CS_UM_CallVoteFailed = 45;
     */
    CS_UM_CallVoteFailed = 45,
    /**
     * @generated from protobuf enum value: CS_UM_VoteStart = 46;
     */
    CS_UM_VoteStart = 46,
    /**
     * @generated from protobuf enum value: CS_UM_VotePass = 47;
     */
    CS_UM_VotePass = 47,
    /**
     * @generated from protobuf enum value: CS_UM_VoteFailed = 48;
     */
    CS_UM_VoteFailed = 48,
    /**
     * @generated from protobuf enum value: CS_UM_VoteSetup = 49;
     */
    CS_UM_VoteSetup = 49,
    /**
     * @generated from protobuf enum value: CS_UM_ServerRankRevealAll = 50;
     */
    CS_UM_ServerRankRevealAll = 50,
    /**
     * @generated from protobuf enum value: CS_UM_SendLastKillerDamageToClient = 51;
     */
    CS_UM_SendLastKillerDamageToClient = 51,
    /**
     * @generated from protobuf enum value: CS_UM_ServerRankUpdate = 52;
     */
    CS_UM_ServerRankUpdate = 52,
    /**
     * @generated from protobuf enum value: CS_UM_ItemPickup = 53;
     */
    CS_UM_ItemPickup = 53,
    /**
     * @generated from protobuf enum value: CS_UM_ShowMenu = 54;
     */
    CS_UM_ShowMenu = 54,
    /**
     * @generated from protobuf enum value: CS_UM_BarTime = 55;
     */
    CS_UM_BarTime = 55,
    /**
     * @generated from protobuf enum value: CS_UM_AmmoDenied = 56;
     */
    CS_UM_AmmoDenied = 56,
    /**
     * @generated from protobuf enum value: CS_UM_MarkAchievement = 57;
     */
    CS_UM_MarkAchievement = 57,
    /**
     * @generated from protobuf enum value: CS_UM_MatchStatsUpdate = 58;
     */
    CS_UM_MatchStatsUpdate = 58,
    /**
     * @generated from protobuf enum value: CS_UM_ItemDrop = 59;
     */
    CS_UM_ItemDrop = 59,
    /**
     * @generated from protobuf enum value: CS_UM_GlowPropTurnOff = 60;
     */
    CS_UM_GlowPropTurnOff = 60,
    /**
     * @generated from protobuf enum value: CS_UM_SendPlayerItemDrops = 61;
     */
    CS_UM_SendPlayerItemDrops = 61,
    /**
     * @generated from protobuf enum value: CS_UM_RoundBackupFilenames = 62;
     */
    CS_UM_RoundBackupFilenames = 62,
    /**
     * @generated from protobuf enum value: CS_UM_SendPlayerItemFound = 63;
     */
    CS_UM_SendPlayerItemFound = 63,
    /**
     * @generated from protobuf enum value: CS_UM_ReportHit = 64;
     */
    CS_UM_ReportHit = 64,
    /**
     * @generated from protobuf enum value: CS_UM_XpUpdate = 65;
     */
    CS_UM_XpUpdate = 65,
    /**
     * @generated from protobuf enum value: CS_UM_QuestProgress = 66;
     */
    CS_UM_QuestProgress = 66,
    /**
     * @generated from protobuf enum value: CS_UM_ScoreLeaderboardData = 67;
     */
    CS_UM_ScoreLeaderboardData = 67,
    /**
     * @generated from protobuf enum value: CS_UM_PlayerDecalDigitalSignature = 68;
     */
    CS_UM_PlayerDecalDigitalSignature = 68,
    /**
     * @generated from protobuf enum value: CS_UM_WeaponSound = 69;
     */
    CS_UM_WeaponSound = 69,
    /**
     * @generated from protobuf enum value: CS_UM_UpdateScreenHealthBar = 70;
     */
    CS_UM_UpdateScreenHealthBar = 70,
    /**
     * @generated from protobuf enum value: CS_UM_EntityOutlineHighlight = 71;
     */
    CS_UM_EntityOutlineHighlight = 71,
    /**
     * @generated from protobuf enum value: CS_UM_SSUI = 72;
     */
    CS_UM_SSUI = 72,
    /**
     * @generated from protobuf enum value: CS_UM_SurvivalStats = 73;
     */
    CS_UM_SurvivalStats = 73,
    /**
     * @generated from protobuf enum value: CS_UM_DisconnectToLobby2 = 74;
     */
    CS_UM_DisconnectToLobby2 = 74,
    /**
     * @generated from protobuf enum value: CS_UM_EndOfMatchAllPlayersData = 75;
     */
    CS_UM_EndOfMatchAllPlayersData = 75,
    /**
     * @generated from protobuf enum value: CS_UM_RoundImpactScoreData = 79;
     */
    CS_UM_RoundImpactScoreData = 79,
    /**
     * @generated from protobuf enum value: CS_UM_CurrentRoundOdds = 80;
     */
    CS_UM_CurrentRoundOdds = 80,
    /**
     * @generated from protobuf enum value: CS_UM_DeepStats = 81;
     */
    CS_UM_DeepStats = 81,
    /**
     * @generated from protobuf enum value: CS_UM_UtilMsg = 82;
     */
    CS_UM_UtilMsg = 82
}
/**
 * @generated from protobuf enum ECSUsrMsg_DisconnectToLobby_Action
 */
export enum ECSUsrMsg_DisconnectToLobby_Action {
    /**
     * @generated from protobuf enum value: k_ECSUsrMsg_DisconnectToLobby_Action_Default = 0;
     */
    k_ECSUsrMsg_DisconnectToLobby_Action_Default = 0,
    /**
     * @generated from protobuf enum value: k_ECSUsrMsg_DisconnectToLobby_Action_GoQueue = 1;
     */
    k_ECSUsrMsg_DisconnectToLobby_Action_GoQueue = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VGUIMenu$Type extends MessageType<CCSUsrMsg_VGUIMenu> {
    constructor() {
        super("CCSUsrMsg_VGUIMenu", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "show", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "subkeys", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_VGUIMenu_Subkey }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VGUIMenu>): CCSUsrMsg_VGUIMenu {
        const message = { subkeys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VGUIMenu>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VGUIMenu): CCSUsrMsg_VGUIMenu {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional bool show */ 2:
                    message.show = reader.bool();
                    break;
                case /* repeated CCSUsrMsg_VGUIMenu.Subkey subkeys */ 3:
                    message.subkeys.push(CCSUsrMsg_VGUIMenu_Subkey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VGUIMenu, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional bool show = 2; */
        if (message.show !== undefined)
            writer.tag(2, WireType.Varint).bool(message.show);
        /* repeated CCSUsrMsg_VGUIMenu.Subkey subkeys = 3; */
        for (let i = 0; i < message.subkeys.length; i++)
            CCSUsrMsg_VGUIMenu_Subkey.internalBinaryWrite(message.subkeys[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VGUIMenu
 */
export const CCSUsrMsg_VGUIMenu = new CCSUsrMsg_VGUIMenu$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VGUIMenu_Subkey$Type extends MessageType<CCSUsrMsg_VGUIMenu_Subkey> {
    constructor() {
        super("CCSUsrMsg_VGUIMenu.Subkey", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VGUIMenu_Subkey>): CCSUsrMsg_VGUIMenu_Subkey {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VGUIMenu_Subkey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VGUIMenu_Subkey): CCSUsrMsg_VGUIMenu_Subkey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string str */ 2:
                    message.str = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VGUIMenu_Subkey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string str = 2; */
        if (message.str !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.str);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VGUIMenu.Subkey
 */
export const CCSUsrMsg_VGUIMenu_Subkey = new CCSUsrMsg_VGUIMenu_Subkey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_Geiger$Type extends MessageType<CCSUsrMsg_Geiger> {
    constructor() {
        super("CCSUsrMsg_Geiger", [
            { no: 1, name: "range", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_Geiger>): CCSUsrMsg_Geiger {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_Geiger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_Geiger): CCSUsrMsg_Geiger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 range */ 1:
                    message.range = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_Geiger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 range = 1; */
        if (message.range !== undefined)
            writer.tag(1, WireType.Varint).int32(message.range);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_Geiger
 */
export const CCSUsrMsg_Geiger = new CCSUsrMsg_Geiger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_Train$Type extends MessageType<CCSUsrMsg_Train> {
    constructor() {
        super("CCSUsrMsg_Train", [
            { no: 1, name: "train", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_Train>): CCSUsrMsg_Train {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_Train>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_Train): CCSUsrMsg_Train {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 train */ 1:
                    message.train = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_Train, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 train = 1; */
        if (message.train !== undefined)
            writer.tag(1, WireType.Varint).int32(message.train);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_Train
 */
export const CCSUsrMsg_Train = new CCSUsrMsg_Train$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_HudText$Type extends MessageType<CCSUsrMsg_HudText> {
    constructor() {
        super("CCSUsrMsg_HudText", [
            { no: 1, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_HudText>): CCSUsrMsg_HudText {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_HudText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_HudText): CCSUsrMsg_HudText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_HudText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string text = 1; */
        if (message.text !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_HudText
 */
export const CCSUsrMsg_HudText = new CCSUsrMsg_HudText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SayText$Type extends MessageType<CCSUsrMsg_SayText> {
    constructor() {
        super("CCSUsrMsg_SayText", [
            { no: 1, name: "ent_idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "textallchat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SayText>): CCSUsrMsg_SayText {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SayText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SayText): CCSUsrMsg_SayText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ent_idx */ 1:
                    message.entIdx = reader.int32();
                    break;
                case /* optional string text */ 2:
                    message.text = reader.string();
                    break;
                case /* optional bool chat */ 3:
                    message.chat = reader.bool();
                    break;
                case /* optional bool textallchat */ 4:
                    message.textallchat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SayText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ent_idx = 1; */
        if (message.entIdx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entIdx);
        /* optional string text = 2; */
        if (message.text !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* optional bool chat = 3; */
        if (message.chat !== undefined)
            writer.tag(3, WireType.Varint).bool(message.chat);
        /* optional bool textallchat = 4; */
        if (message.textallchat !== undefined)
            writer.tag(4, WireType.Varint).bool(message.textallchat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SayText
 */
export const CCSUsrMsg_SayText = new CCSUsrMsg_SayText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SayText2$Type extends MessageType<CCSUsrMsg_SayText2> {
    constructor() {
        super("CCSUsrMsg_SayText2", [
            { no: 1, name: "ent_idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "chat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "msg_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "params", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "textallchat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SayText2>): CCSUsrMsg_SayText2 {
        const message = { params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SayText2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SayText2): CCSUsrMsg_SayText2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ent_idx */ 1:
                    message.entIdx = reader.int32();
                    break;
                case /* optional bool chat */ 2:
                    message.chat = reader.bool();
                    break;
                case /* optional string msg_name */ 3:
                    message.msgName = reader.string();
                    break;
                case /* repeated string params */ 4:
                    message.params.push(reader.string());
                    break;
                case /* optional bool textallchat */ 5:
                    message.textallchat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SayText2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ent_idx = 1; */
        if (message.entIdx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entIdx);
        /* optional bool chat = 2; */
        if (message.chat !== undefined)
            writer.tag(2, WireType.Varint).bool(message.chat);
        /* optional string msg_name = 3; */
        if (message.msgName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.msgName);
        /* repeated string params = 4; */
        for (let i = 0; i < message.params.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.params[i]);
        /* optional bool textallchat = 5; */
        if (message.textallchat !== undefined)
            writer.tag(5, WireType.Varint).bool(message.textallchat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SayText2
 */
export const CCSUsrMsg_SayText2 = new CCSUsrMsg_SayText2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_TextMsg$Type extends MessageType<CCSUsrMsg_TextMsg> {
    constructor() {
        super("CCSUsrMsg_TextMsg", [
            { no: 1, name: "msg_dst", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "params", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_TextMsg>): CCSUsrMsg_TextMsg {
        const message = { params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_TextMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_TextMsg): CCSUsrMsg_TextMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 msg_dst */ 1:
                    message.msgDst = reader.int32();
                    break;
                case /* repeated string params */ 3:
                    message.params.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_TextMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 msg_dst = 1; */
        if (message.msgDst !== undefined)
            writer.tag(1, WireType.Varint).int32(message.msgDst);
        /* repeated string params = 3; */
        for (let i = 0; i < message.params.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.params[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_TextMsg
 */
export const CCSUsrMsg_TextMsg = new CCSUsrMsg_TextMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_HudMsg$Type extends MessageType<CCSUsrMsg_HudMsg> {
    constructor() {
        super("CCSUsrMsg_HudMsg", [
            { no: 1, name: "channel", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "pos", kind: "message", T: () => CMsgVector2D },
            { no: 3, name: "clr1", kind: "message", T: () => CMsgRGBA },
            { no: 4, name: "clr2", kind: "message", T: () => CMsgRGBA },
            { no: 5, name: "effect", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "fade_in_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "fade_out_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "hold_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "fx_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_HudMsg>): CCSUsrMsg_HudMsg {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_HudMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_HudMsg): CCSUsrMsg_HudMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 channel */ 1:
                    message.channel = reader.int32();
                    break;
                case /* optional CMsgVector2D pos */ 2:
                    message.pos = CMsgVector2D.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional CMsgRGBA clr1 */ 3:
                    message.clr1 = CMsgRGBA.internalBinaryRead(reader, reader.uint32(), options, message.clr1);
                    break;
                case /* optional CMsgRGBA clr2 */ 4:
                    message.clr2 = CMsgRGBA.internalBinaryRead(reader, reader.uint32(), options, message.clr2);
                    break;
                case /* optional int32 effect */ 5:
                    message.effect = reader.int32();
                    break;
                case /* optional float fade_in_time */ 6:
                    message.fadeInTime = reader.float();
                    break;
                case /* optional float fade_out_time */ 7:
                    message.fadeOutTime = reader.float();
                    break;
                case /* optional float hold_time */ 9:
                    message.holdTime = reader.float();
                    break;
                case /* optional float fx_time */ 10:
                    message.fxTime = reader.float();
                    break;
                case /* optional string text */ 11:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_HudMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 channel = 1; */
        if (message.channel !== undefined)
            writer.tag(1, WireType.Varint).int32(message.channel);
        /* optional CMsgVector2D pos = 2; */
        if (message.pos)
            CMsgVector2D.internalBinaryWrite(message.pos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional CMsgRGBA clr1 = 3; */
        if (message.clr1)
            CMsgRGBA.internalBinaryWrite(message.clr1, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional CMsgRGBA clr2 = 4; */
        if (message.clr2)
            CMsgRGBA.internalBinaryWrite(message.clr2, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 effect = 5; */
        if (message.effect !== undefined)
            writer.tag(5, WireType.Varint).int32(message.effect);
        /* optional float fade_in_time = 6; */
        if (message.fadeInTime !== undefined)
            writer.tag(6, WireType.Bit32).float(message.fadeInTime);
        /* optional float fade_out_time = 7; */
        if (message.fadeOutTime !== undefined)
            writer.tag(7, WireType.Bit32).float(message.fadeOutTime);
        /* optional float hold_time = 9; */
        if (message.holdTime !== undefined)
            writer.tag(9, WireType.Bit32).float(message.holdTime);
        /* optional float fx_time = 10; */
        if (message.fxTime !== undefined)
            writer.tag(10, WireType.Bit32).float(message.fxTime);
        /* optional string text = 11; */
        if (message.text !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_HudMsg
 */
export const CCSUsrMsg_HudMsg = new CCSUsrMsg_HudMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_Shake$Type extends MessageType<CCSUsrMsg_Shake> {
    constructor() {
        super("CCSUsrMsg_Shake", [
            { no: 1, name: "command", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "local_amplitude", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "frequency", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "duration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_Shake>): CCSUsrMsg_Shake {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_Shake>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_Shake): CCSUsrMsg_Shake {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 command */ 1:
                    message.command = reader.int32();
                    break;
                case /* optional float local_amplitude */ 2:
                    message.localAmplitude = reader.float();
                    break;
                case /* optional float frequency */ 3:
                    message.frequency = reader.float();
                    break;
                case /* optional float duration */ 4:
                    message.duration = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_Shake, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 command = 1; */
        if (message.command !== undefined)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* optional float local_amplitude = 2; */
        if (message.localAmplitude !== undefined)
            writer.tag(2, WireType.Bit32).float(message.localAmplitude);
        /* optional float frequency = 3; */
        if (message.frequency !== undefined)
            writer.tag(3, WireType.Bit32).float(message.frequency);
        /* optional float duration = 4; */
        if (message.duration !== undefined)
            writer.tag(4, WireType.Bit32).float(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_Shake
 */
export const CCSUsrMsg_Shake = new CCSUsrMsg_Shake$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_Fade$Type extends MessageType<CCSUsrMsg_Fade> {
    constructor() {
        super("CCSUsrMsg_Fade", [
            { no: 1, name: "duration", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "hold_time", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "flags", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "clr", kind: "message", T: () => CMsgRGBA }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_Fade>): CCSUsrMsg_Fade {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_Fade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_Fade): CCSUsrMsg_Fade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 duration */ 1:
                    message.duration = reader.int32();
                    break;
                case /* optional int32 hold_time */ 2:
                    message.holdTime = reader.int32();
                    break;
                case /* optional int32 flags */ 3:
                    message.flags = reader.int32();
                    break;
                case /* optional CMsgRGBA clr */ 4:
                    message.clr = CMsgRGBA.internalBinaryRead(reader, reader.uint32(), options, message.clr);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_Fade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 duration = 1; */
        if (message.duration !== undefined)
            writer.tag(1, WireType.Varint).int32(message.duration);
        /* optional int32 hold_time = 2; */
        if (message.holdTime !== undefined)
            writer.tag(2, WireType.Varint).int32(message.holdTime);
        /* optional int32 flags = 3; */
        if (message.flags !== undefined)
            writer.tag(3, WireType.Varint).int32(message.flags);
        /* optional CMsgRGBA clr = 4; */
        if (message.clr)
            CMsgRGBA.internalBinaryWrite(message.clr, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_Fade
 */
export const CCSUsrMsg_Fade = new CCSUsrMsg_Fade$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_Rumble$Type extends MessageType<CCSUsrMsg_Rumble> {
    constructor() {
        super("CCSUsrMsg_Rumble", [
            { no: 1, name: "index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "flags", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_Rumble>): CCSUsrMsg_Rumble {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_Rumble>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_Rumble): CCSUsrMsg_Rumble {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* optional int32 data */ 2:
                    message.data = reader.int32();
                    break;
                case /* optional int32 flags */ 3:
                    message.flags = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_Rumble, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 index = 1; */
        if (message.index !== undefined)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* optional int32 data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.Varint).int32(message.data);
        /* optional int32 flags = 3; */
        if (message.flags !== undefined)
            writer.tag(3, WireType.Varint).int32(message.flags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_Rumble
 */
export const CCSUsrMsg_Rumble = new CCSUsrMsg_Rumble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_CloseCaption$Type extends MessageType<CCSUsrMsg_CloseCaption> {
    constructor() {
        super("CCSUsrMsg_CloseCaption", [
            { no: 1, name: "hash", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from_player", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "cctoken", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_CloseCaption>): CCSUsrMsg_CloseCaption {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_CloseCaption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_CloseCaption): CCSUsrMsg_CloseCaption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 hash */ 1:
                    message.hash = reader.uint32();
                    break;
                case /* optional int32 duration */ 2:
                    message.duration = reader.int32();
                    break;
                case /* optional bool from_player */ 3:
                    message.fromPlayer = reader.bool();
                    break;
                case /* optional string cctoken */ 4:
                    message.cctoken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_CloseCaption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 hash = 1; */
        if (message.hash !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.hash);
        /* optional int32 duration = 2; */
        if (message.duration !== undefined)
            writer.tag(2, WireType.Varint).int32(message.duration);
        /* optional bool from_player = 3; */
        if (message.fromPlayer !== undefined)
            writer.tag(3, WireType.Varint).bool(message.fromPlayer);
        /* optional string cctoken = 4; */
        if (message.cctoken !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.cctoken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_CloseCaption
 */
export const CCSUsrMsg_CloseCaption = new CCSUsrMsg_CloseCaption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_CloseCaptionDirect$Type extends MessageType<CCSUsrMsg_CloseCaptionDirect> {
    constructor() {
        super("CCSUsrMsg_CloseCaptionDirect", [
            { no: 1, name: "hash", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from_player", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_CloseCaptionDirect>): CCSUsrMsg_CloseCaptionDirect {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_CloseCaptionDirect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_CloseCaptionDirect): CCSUsrMsg_CloseCaptionDirect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 hash */ 1:
                    message.hash = reader.uint32();
                    break;
                case /* optional int32 duration */ 2:
                    message.duration = reader.int32();
                    break;
                case /* optional bool from_player */ 3:
                    message.fromPlayer = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_CloseCaptionDirect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 hash = 1; */
        if (message.hash !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.hash);
        /* optional int32 duration = 2; */
        if (message.duration !== undefined)
            writer.tag(2, WireType.Varint).int32(message.duration);
        /* optional bool from_player = 3; */
        if (message.fromPlayer !== undefined)
            writer.tag(3, WireType.Varint).bool(message.fromPlayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_CloseCaptionDirect
 */
export const CCSUsrMsg_CloseCaptionDirect = new CCSUsrMsg_CloseCaptionDirect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SendAudio$Type extends MessageType<CCSUsrMsg_SendAudio> {
    constructor() {
        super("CCSUsrMsg_SendAudio", [
            { no: 1, name: "radio_sound", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SendAudio>): CCSUsrMsg_SendAudio {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SendAudio>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SendAudio): CCSUsrMsg_SendAudio {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string radio_sound */ 1:
                    message.radioSound = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SendAudio, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string radio_sound = 1; */
        if (message.radioSound !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.radioSound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SendAudio
 */
export const CCSUsrMsg_SendAudio = new CCSUsrMsg_SendAudio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RawAudio$Type extends MessageType<CCSUsrMsg_RawAudio> {
    constructor() {
        super("CCSUsrMsg_RawAudio", [
            { no: 1, name: "pitch", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "entidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "duration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "voice_filename", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RawAudio>): CCSUsrMsg_RawAudio {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RawAudio>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RawAudio): CCSUsrMsg_RawAudio {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 pitch */ 1:
                    message.pitch = reader.int32();
                    break;
                case /* optional int32 entidx */ 2:
                    message.entidx = reader.int32();
                    break;
                case /* optional float duration */ 3:
                    message.duration = reader.float();
                    break;
                case /* optional string voice_filename */ 4:
                    message.voiceFilename = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RawAudio, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 pitch = 1; */
        if (message.pitch !== undefined)
            writer.tag(1, WireType.Varint).int32(message.pitch);
        /* optional int32 entidx = 2; */
        if (message.entidx !== undefined)
            writer.tag(2, WireType.Varint).int32(message.entidx);
        /* optional float duration = 3; */
        if (message.duration !== undefined)
            writer.tag(3, WireType.Bit32).float(message.duration);
        /* optional string voice_filename = 4; */
        if (message.voiceFilename !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.voiceFilename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RawAudio
 */
export const CCSUsrMsg_RawAudio = new CCSUsrMsg_RawAudio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VoiceMask$Type extends MessageType<CCSUsrMsg_VoiceMask> {
    constructor() {
        super("CCSUsrMsg_VoiceMask", [
            { no: 1, name: "player_masks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_VoiceMask_PlayerMask },
            { no: 2, name: "player_mod_enable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VoiceMask>): CCSUsrMsg_VoiceMask {
        const message = { playerMasks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VoiceMask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VoiceMask): CCSUsrMsg_VoiceMask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CCSUsrMsg_VoiceMask.PlayerMask player_masks */ 1:
                    message.playerMasks.push(CCSUsrMsg_VoiceMask_PlayerMask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool player_mod_enable */ 2:
                    message.playerModEnable = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VoiceMask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1; */
        for (let i = 0; i < message.playerMasks.length; i++)
            CCSUsrMsg_VoiceMask_PlayerMask.internalBinaryWrite(message.playerMasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool player_mod_enable = 2; */
        if (message.playerModEnable !== undefined)
            writer.tag(2, WireType.Varint).bool(message.playerModEnable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VoiceMask
 */
export const CCSUsrMsg_VoiceMask = new CCSUsrMsg_VoiceMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VoiceMask_PlayerMask$Type extends MessageType<CCSUsrMsg_VoiceMask_PlayerMask> {
    constructor() {
        super("CCSUsrMsg_VoiceMask.PlayerMask", [
            { no: 1, name: "game_rules_mask", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ban_masks", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VoiceMask_PlayerMask>): CCSUsrMsg_VoiceMask_PlayerMask {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VoiceMask_PlayerMask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VoiceMask_PlayerMask): CCSUsrMsg_VoiceMask_PlayerMask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 game_rules_mask */ 1:
                    message.gameRulesMask = reader.int32();
                    break;
                case /* optional int32 ban_masks */ 2:
                    message.banMasks = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VoiceMask_PlayerMask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 game_rules_mask = 1; */
        if (message.gameRulesMask !== undefined)
            writer.tag(1, WireType.Varint).int32(message.gameRulesMask);
        /* optional int32 ban_masks = 2; */
        if (message.banMasks !== undefined)
            writer.tag(2, WireType.Varint).int32(message.banMasks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VoiceMask.PlayerMask
 */
export const CCSUsrMsg_VoiceMask_PlayerMask = new CCSUsrMsg_VoiceMask_PlayerMask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_Damage$Type extends MessageType<CCSUsrMsg_Damage> {
    constructor() {
        super("CCSUsrMsg_Damage", [
            { no: 1, name: "amount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "inflictor_world_pos", kind: "message", T: () => CMsgVector },
            { no: 3, name: "victim_entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_Damage>): CCSUsrMsg_Damage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_Damage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_Damage): CCSUsrMsg_Damage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 amount */ 1:
                    message.amount = reader.int32();
                    break;
                case /* optional CMsgVector inflictor_world_pos */ 2:
                    message.inflictorWorldPos = CMsgVector.internalBinaryRead(reader, reader.uint32(), options, message.inflictorWorldPos);
                    break;
                case /* optional int32 victim_entindex */ 3:
                    message.victimEntindex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_Damage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 amount = 1; */
        if (message.amount !== undefined)
            writer.tag(1, WireType.Varint).int32(message.amount);
        /* optional CMsgVector inflictor_world_pos = 2; */
        if (message.inflictorWorldPos)
            CMsgVector.internalBinaryWrite(message.inflictorWorldPos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 victim_entindex = 3; */
        if (message.victimEntindex !== undefined)
            writer.tag(3, WireType.Varint).int32(message.victimEntindex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_Damage
 */
export const CCSUsrMsg_Damage = new CCSUsrMsg_Damage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RadioText$Type extends MessageType<CCSUsrMsg_RadioText> {
    constructor() {
        super("CCSUsrMsg_RadioText", [
            { no: 1, name: "msg_dst", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "client", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "msg_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "params", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RadioText>): CCSUsrMsg_RadioText {
        const message = { params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RadioText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RadioText): CCSUsrMsg_RadioText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 msg_dst */ 1:
                    message.msgDst = reader.int32();
                    break;
                case /* optional int32 client */ 2:
                    message.client = reader.int32();
                    break;
                case /* optional string msg_name */ 3:
                    message.msgName = reader.string();
                    break;
                case /* repeated string params */ 4:
                    message.params.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RadioText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 msg_dst = 1; */
        if (message.msgDst !== undefined)
            writer.tag(1, WireType.Varint).int32(message.msgDst);
        /* optional int32 client = 2; */
        if (message.client !== undefined)
            writer.tag(2, WireType.Varint).int32(message.client);
        /* optional string msg_name = 3; */
        if (message.msgName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.msgName);
        /* repeated string params = 4; */
        for (let i = 0; i < message.params.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.params[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RadioText
 */
export const CCSUsrMsg_RadioText = new CCSUsrMsg_RadioText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_HintText$Type extends MessageType<CCSUsrMsg_HintText> {
    constructor() {
        super("CCSUsrMsg_HintText", [
            { no: 1, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_HintText>): CCSUsrMsg_HintText {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_HintText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_HintText): CCSUsrMsg_HintText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_HintText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string text = 1; */
        if (message.text !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_HintText
 */
export const CCSUsrMsg_HintText = new CCSUsrMsg_HintText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_KeyHintText$Type extends MessageType<CCSUsrMsg_KeyHintText> {
    constructor() {
        super("CCSUsrMsg_KeyHintText", [
            { no: 1, name: "hints", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_KeyHintText>): CCSUsrMsg_KeyHintText {
        const message = { hints: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_KeyHintText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_KeyHintText): CCSUsrMsg_KeyHintText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string hints */ 1:
                    message.hints.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_KeyHintText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string hints = 1; */
        for (let i = 0; i < message.hints.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.hints[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_KeyHintText
 */
export const CCSUsrMsg_KeyHintText = new CCSUsrMsg_KeyHintText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ProcessSpottedEntityUpdate$Type extends MessageType<CCSUsrMsg_ProcessSpottedEntityUpdate> {
    constructor() {
        super("CCSUsrMsg_ProcessSpottedEntityUpdate", [
            { no: 1, name: "new_update", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "entity_updates", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ProcessSpottedEntityUpdate>): CCSUsrMsg_ProcessSpottedEntityUpdate {
        const message = { entityUpdates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ProcessSpottedEntityUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ProcessSpottedEntityUpdate): CCSUsrMsg_ProcessSpottedEntityUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool new_update */ 1:
                    message.newUpdate = reader.bool();
                    break;
                case /* repeated CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates */ 2:
                    message.entityUpdates.push(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ProcessSpottedEntityUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool new_update = 1; */
        if (message.newUpdate !== undefined)
            writer.tag(1, WireType.Varint).bool(message.newUpdate);
        /* repeated CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2; */
        for (let i = 0; i < message.entityUpdates.length; i++)
            CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate.internalBinaryWrite(message.entityUpdates[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ProcessSpottedEntityUpdate
 */
export const CCSUsrMsg_ProcessSpottedEntityUpdate = new CCSUsrMsg_ProcessSpottedEntityUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate$Type extends MessageType<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate> {
    constructor() {
        super("CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate", [
            { no: 1, name: "entity_idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "class_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "origin_x", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "origin_y", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "origin_z", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "angle_y", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "defuser", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "player_has_defuser", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "player_has_c4", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate>): CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate): CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entity_idx */ 1:
                    message.entityIdx = reader.int32();
                    break;
                case /* optional int32 class_id */ 2:
                    message.classId = reader.int32();
                    break;
                case /* optional int32 origin_x */ 3:
                    message.originX = reader.int32();
                    break;
                case /* optional int32 origin_y */ 4:
                    message.originY = reader.int32();
                    break;
                case /* optional int32 origin_z */ 5:
                    message.originZ = reader.int32();
                    break;
                case /* optional int32 angle_y */ 6:
                    message.angleY = reader.int32();
                    break;
                case /* optional bool defuser */ 7:
                    message.defuser = reader.bool();
                    break;
                case /* optional bool player_has_defuser */ 8:
                    message.playerHasDefuser = reader.bool();
                    break;
                case /* optional bool player_has_c4 */ 9:
                    message.playerHasC4 = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entity_idx = 1; */
        if (message.entityIdx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entityIdx);
        /* optional int32 class_id = 2; */
        if (message.classId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.classId);
        /* optional int32 origin_x = 3; */
        if (message.originX !== undefined)
            writer.tag(3, WireType.Varint).int32(message.originX);
        /* optional int32 origin_y = 4; */
        if (message.originY !== undefined)
            writer.tag(4, WireType.Varint).int32(message.originY);
        /* optional int32 origin_z = 5; */
        if (message.originZ !== undefined)
            writer.tag(5, WireType.Varint).int32(message.originZ);
        /* optional int32 angle_y = 6; */
        if (message.angleY !== undefined)
            writer.tag(6, WireType.Varint).int32(message.angleY);
        /* optional bool defuser = 7; */
        if (message.defuser !== undefined)
            writer.tag(7, WireType.Varint).bool(message.defuser);
        /* optional bool player_has_defuser = 8; */
        if (message.playerHasDefuser !== undefined)
            writer.tag(8, WireType.Varint).bool(message.playerHasDefuser);
        /* optional bool player_has_c4 = 9; */
        if (message.playerHasC4 !== undefined)
            writer.tag(9, WireType.Varint).bool(message.playerHasC4);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate
 */
export const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate = new CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SendPlayerItemDrops$Type extends MessageType<CCSUsrMsg_SendPlayerItemDrops> {
    constructor() {
        super("CCSUsrMsg_SendPlayerItemDrops", [
            { no: 1, name: "entity_updates", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CEconItemPreviewDataBlock }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SendPlayerItemDrops>): CCSUsrMsg_SendPlayerItemDrops {
        const message = { entityUpdates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SendPlayerItemDrops>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SendPlayerItemDrops): CCSUsrMsg_SendPlayerItemDrops {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CEconItemPreviewDataBlock entity_updates */ 1:
                    message.entityUpdates.push(CEconItemPreviewDataBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SendPlayerItemDrops, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CEconItemPreviewDataBlock entity_updates = 1; */
        for (let i = 0; i < message.entityUpdates.length; i++)
            CEconItemPreviewDataBlock.internalBinaryWrite(message.entityUpdates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SendPlayerItemDrops
 */
export const CCSUsrMsg_SendPlayerItemDrops = new CCSUsrMsg_SendPlayerItemDrops$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SendPlayerItemFound$Type extends MessageType<CCSUsrMsg_SendPlayerItemFound> {
    constructor() {
        super("CCSUsrMsg_SendPlayerItemFound", [
            { no: 1, name: "iteminfo", kind: "message", T: () => CEconItemPreviewDataBlock },
            { no: 2, name: "entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SendPlayerItemFound>): CCSUsrMsg_SendPlayerItemFound {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SendPlayerItemFound>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SendPlayerItemFound): CCSUsrMsg_SendPlayerItemFound {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CEconItemPreviewDataBlock iteminfo */ 1:
                    message.iteminfo = CEconItemPreviewDataBlock.internalBinaryRead(reader, reader.uint32(), options, message.iteminfo);
                    break;
                case /* optional int32 entindex */ 2:
                    message.entindex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SendPlayerItemFound, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CEconItemPreviewDataBlock iteminfo = 1; */
        if (message.iteminfo)
            CEconItemPreviewDataBlock.internalBinaryWrite(message.iteminfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 entindex = 2; */
        if (message.entindex !== undefined)
            writer.tag(2, WireType.Varint).int32(message.entindex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SendPlayerItemFound
 */
export const CCSUsrMsg_SendPlayerItemFound = new CCSUsrMsg_SendPlayerItemFound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ReloadEffect$Type extends MessageType<CCSUsrMsg_ReloadEffect> {
    constructor() {
        super("CCSUsrMsg_ReloadEffect", [
            { no: 1, name: "entidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "actanim", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "origin_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "origin_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "origin_z", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ReloadEffect>): CCSUsrMsg_ReloadEffect {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ReloadEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ReloadEffect): CCSUsrMsg_ReloadEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entidx */ 1:
                    message.entidx = reader.int32();
                    break;
                case /* optional int32 actanim */ 2:
                    message.actanim = reader.int32();
                    break;
                case /* optional float origin_x */ 3:
                    message.originX = reader.float();
                    break;
                case /* optional float origin_y */ 4:
                    message.originY = reader.float();
                    break;
                case /* optional float origin_z */ 5:
                    message.originZ = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ReloadEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entidx = 1; */
        if (message.entidx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entidx);
        /* optional int32 actanim = 2; */
        if (message.actanim !== undefined)
            writer.tag(2, WireType.Varint).int32(message.actanim);
        /* optional float origin_x = 3; */
        if (message.originX !== undefined)
            writer.tag(3, WireType.Bit32).float(message.originX);
        /* optional float origin_y = 4; */
        if (message.originY !== undefined)
            writer.tag(4, WireType.Bit32).float(message.originY);
        /* optional float origin_z = 5; */
        if (message.originZ !== undefined)
            writer.tag(5, WireType.Bit32).float(message.originZ);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ReloadEffect
 */
export const CCSUsrMsg_ReloadEffect = new CCSUsrMsg_ReloadEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_WeaponSound$Type extends MessageType<CCSUsrMsg_WeaponSound> {
    constructor() {
        super("CCSUsrMsg_WeaponSound", [
            { no: 1, name: "entidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "origin_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "origin_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "origin_z", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "sound", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_WeaponSound>): CCSUsrMsg_WeaponSound {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_WeaponSound>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_WeaponSound): CCSUsrMsg_WeaponSound {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entidx */ 1:
                    message.entidx = reader.int32();
                    break;
                case /* optional float origin_x */ 2:
                    message.originX = reader.float();
                    break;
                case /* optional float origin_y */ 3:
                    message.originY = reader.float();
                    break;
                case /* optional float origin_z */ 4:
                    message.originZ = reader.float();
                    break;
                case /* optional string sound */ 5:
                    message.sound = reader.string();
                    break;
                case /* optional float timestamp */ 6:
                    message.timestamp = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_WeaponSound, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entidx = 1; */
        if (message.entidx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entidx);
        /* optional float origin_x = 2; */
        if (message.originX !== undefined)
            writer.tag(2, WireType.Bit32).float(message.originX);
        /* optional float origin_y = 3; */
        if (message.originY !== undefined)
            writer.tag(3, WireType.Bit32).float(message.originY);
        /* optional float origin_z = 4; */
        if (message.originZ !== undefined)
            writer.tag(4, WireType.Bit32).float(message.originZ);
        /* optional string sound = 5; */
        if (message.sound !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.sound);
        /* optional float timestamp = 6; */
        if (message.timestamp !== undefined)
            writer.tag(6, WireType.Bit32).float(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_WeaponSound
 */
export const CCSUsrMsg_WeaponSound = new CCSUsrMsg_WeaponSound$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_UpdateScreenHealthBar$Type extends MessageType<CCSUsrMsg_UpdateScreenHealthBar> {
    constructor() {
        super("CCSUsrMsg_UpdateScreenHealthBar", [
            { no: 1, name: "entidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "healthratio_old", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "healthratio_new", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "style", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_UpdateScreenHealthBar>): CCSUsrMsg_UpdateScreenHealthBar {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_UpdateScreenHealthBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_UpdateScreenHealthBar): CCSUsrMsg_UpdateScreenHealthBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entidx */ 1:
                    message.entidx = reader.int32();
                    break;
                case /* optional float healthratio_old */ 2:
                    message.healthratioOld = reader.float();
                    break;
                case /* optional float healthratio_new */ 3:
                    message.healthratioNew = reader.float();
                    break;
                case /* optional int32 style */ 4:
                    message.style = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_UpdateScreenHealthBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entidx = 1; */
        if (message.entidx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entidx);
        /* optional float healthratio_old = 2; */
        if (message.healthratioOld !== undefined)
            writer.tag(2, WireType.Bit32).float(message.healthratioOld);
        /* optional float healthratio_new = 3; */
        if (message.healthratioNew !== undefined)
            writer.tag(3, WireType.Bit32).float(message.healthratioNew);
        /* optional int32 style = 4; */
        if (message.style !== undefined)
            writer.tag(4, WireType.Varint).int32(message.style);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_UpdateScreenHealthBar
 */
export const CCSUsrMsg_UpdateScreenHealthBar = new CCSUsrMsg_UpdateScreenHealthBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_EntityOutlineHighlight$Type extends MessageType<CCSUsrMsg_EntityOutlineHighlight> {
    constructor() {
        super("CCSUsrMsg_EntityOutlineHighlight", [
            { no: 1, name: "entidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "removehighlight", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_EntityOutlineHighlight>): CCSUsrMsg_EntityOutlineHighlight {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_EntityOutlineHighlight>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_EntityOutlineHighlight): CCSUsrMsg_EntityOutlineHighlight {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entidx */ 1:
                    message.entidx = reader.int32();
                    break;
                case /* optional bool removehighlight */ 2:
                    message.removehighlight = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_EntityOutlineHighlight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entidx = 1; */
        if (message.entidx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entidx);
        /* optional bool removehighlight = 2; */
        if (message.removehighlight !== undefined)
            writer.tag(2, WireType.Varint).bool(message.removehighlight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_EntityOutlineHighlight
 */
export const CCSUsrMsg_EntityOutlineHighlight = new CCSUsrMsg_EntityOutlineHighlight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_AdjustMoney$Type extends MessageType<CCSUsrMsg_AdjustMoney> {
    constructor() {
        super("CCSUsrMsg_AdjustMoney", [
            { no: 1, name: "amount", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_AdjustMoney>): CCSUsrMsg_AdjustMoney {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_AdjustMoney>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_AdjustMoney): CCSUsrMsg_AdjustMoney {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 amount */ 1:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_AdjustMoney, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 amount = 1; */
        if (message.amount !== undefined)
            writer.tag(1, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_AdjustMoney
 */
export const CCSUsrMsg_AdjustMoney = new CCSUsrMsg_AdjustMoney$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ReportHit$Type extends MessageType<CCSUsrMsg_ReportHit> {
    constructor() {
        super("CCSUsrMsg_ReportHit", [
            { no: 1, name: "pos_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "pos_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "timestamp", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "pos_z", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ReportHit>): CCSUsrMsg_ReportHit {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ReportHit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ReportHit): CCSUsrMsg_ReportHit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float pos_x */ 1:
                    message.posX = reader.float();
                    break;
                case /* optional float pos_y */ 2:
                    message.posY = reader.float();
                    break;
                case /* optional float timestamp */ 4:
                    message.timestamp = reader.float();
                    break;
                case /* optional float pos_z */ 3:
                    message.posZ = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ReportHit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float pos_x = 1; */
        if (message.posX !== undefined)
            writer.tag(1, WireType.Bit32).float(message.posX);
        /* optional float pos_y = 2; */
        if (message.posY !== undefined)
            writer.tag(2, WireType.Bit32).float(message.posY);
        /* optional float timestamp = 4; */
        if (message.timestamp !== undefined)
            writer.tag(4, WireType.Bit32).float(message.timestamp);
        /* optional float pos_z = 3; */
        if (message.posZ !== undefined)
            writer.tag(3, WireType.Bit32).float(message.posZ);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ReportHit
 */
export const CCSUsrMsg_ReportHit = new CCSUsrMsg_ReportHit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_KillCam$Type extends MessageType<CCSUsrMsg_KillCam> {
    constructor() {
        super("CCSUsrMsg_KillCam", [
            { no: 1, name: "obs_mode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "first_target", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "second_target", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_KillCam>): CCSUsrMsg_KillCam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_KillCam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_KillCam): CCSUsrMsg_KillCam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 obs_mode */ 1:
                    message.obsMode = reader.int32();
                    break;
                case /* optional int32 first_target */ 2:
                    message.firstTarget = reader.int32();
                    break;
                case /* optional int32 second_target */ 3:
                    message.secondTarget = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_KillCam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 obs_mode = 1; */
        if (message.obsMode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.obsMode);
        /* optional int32 first_target = 2; */
        if (message.firstTarget !== undefined)
            writer.tag(2, WireType.Varint).int32(message.firstTarget);
        /* optional int32 second_target = 3; */
        if (message.secondTarget !== undefined)
            writer.tag(3, WireType.Varint).int32(message.secondTarget);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_KillCam
 */
export const CCSUsrMsg_KillCam = new CCSUsrMsg_KillCam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_DesiredTimescale$Type extends MessageType<CCSUsrMsg_DesiredTimescale> {
    constructor() {
        super("CCSUsrMsg_DesiredTimescale", [
            { no: 1, name: "desired_timescale", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "duration_realtime_sec", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "interpolator_type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "start_blend_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_DesiredTimescale>): CCSUsrMsg_DesiredTimescale {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_DesiredTimescale>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_DesiredTimescale): CCSUsrMsg_DesiredTimescale {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float desired_timescale */ 1:
                    message.desiredTimescale = reader.float();
                    break;
                case /* optional float duration_realtime_sec */ 2:
                    message.durationRealtimeSec = reader.float();
                    break;
                case /* optional int32 interpolator_type */ 3:
                    message.interpolatorType = reader.int32();
                    break;
                case /* optional float start_blend_time */ 4:
                    message.startBlendTime = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_DesiredTimescale, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float desired_timescale = 1; */
        if (message.desiredTimescale !== undefined)
            writer.tag(1, WireType.Bit32).float(message.desiredTimescale);
        /* optional float duration_realtime_sec = 2; */
        if (message.durationRealtimeSec !== undefined)
            writer.tag(2, WireType.Bit32).float(message.durationRealtimeSec);
        /* optional int32 interpolator_type = 3; */
        if (message.interpolatorType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.interpolatorType);
        /* optional float start_blend_time = 4; */
        if (message.startBlendTime !== undefined)
            writer.tag(4, WireType.Bit32).float(message.startBlendTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_DesiredTimescale
 */
export const CCSUsrMsg_DesiredTimescale = new CCSUsrMsg_DesiredTimescale$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_CurrentTimescale$Type extends MessageType<CCSUsrMsg_CurrentTimescale> {
    constructor() {
        super("CCSUsrMsg_CurrentTimescale", [
            { no: 1, name: "cur_timescale", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_CurrentTimescale>): CCSUsrMsg_CurrentTimescale {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_CurrentTimescale>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_CurrentTimescale): CCSUsrMsg_CurrentTimescale {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float cur_timescale */ 1:
                    message.curTimescale = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_CurrentTimescale, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float cur_timescale = 1; */
        if (message.curTimescale !== undefined)
            writer.tag(1, WireType.Bit32).float(message.curTimescale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_CurrentTimescale
 */
export const CCSUsrMsg_CurrentTimescale = new CCSUsrMsg_CurrentTimescale$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_AchievementEvent$Type extends MessageType<CCSUsrMsg_AchievementEvent> {
    constructor() {
        super("CCSUsrMsg_AchievementEvent", [
            { no: 1, name: "achievement", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_AchievementEvent>): CCSUsrMsg_AchievementEvent {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_AchievementEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_AchievementEvent): CCSUsrMsg_AchievementEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 achievement */ 1:
                    message.achievement = reader.int32();
                    break;
                case /* optional int32 count */ 2:
                    message.count = reader.int32();
                    break;
                case /* optional int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_AchievementEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 achievement = 1; */
        if (message.achievement !== undefined)
            writer.tag(1, WireType.Varint).int32(message.achievement);
        /* optional int32 count = 2; */
        if (message.count !== undefined)
            writer.tag(2, WireType.Varint).int32(message.count);
        /* optional int32 user_id = 3; */
        if (message.userId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_AchievementEvent
 */
export const CCSUsrMsg_AchievementEvent = new CCSUsrMsg_AchievementEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_MatchEndConditions$Type extends MessageType<CCSUsrMsg_MatchEndConditions> {
    constructor() {
        super("CCSUsrMsg_MatchEndConditions", [
            { no: 1, name: "fraglimit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "mp_maxrounds", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "mp_winlimit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "mp_timelimit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_MatchEndConditions>): CCSUsrMsg_MatchEndConditions {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_MatchEndConditions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_MatchEndConditions): CCSUsrMsg_MatchEndConditions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 fraglimit */ 1:
                    message.fraglimit = reader.int32();
                    break;
                case /* optional int32 mp_maxrounds */ 2:
                    message.mpMaxrounds = reader.int32();
                    break;
                case /* optional int32 mp_winlimit */ 3:
                    message.mpWinlimit = reader.int32();
                    break;
                case /* optional int32 mp_timelimit */ 4:
                    message.mpTimelimit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_MatchEndConditions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 fraglimit = 1; */
        if (message.fraglimit !== undefined)
            writer.tag(1, WireType.Varint).int32(message.fraglimit);
        /* optional int32 mp_maxrounds = 2; */
        if (message.mpMaxrounds !== undefined)
            writer.tag(2, WireType.Varint).int32(message.mpMaxrounds);
        /* optional int32 mp_winlimit = 3; */
        if (message.mpWinlimit !== undefined)
            writer.tag(3, WireType.Varint).int32(message.mpWinlimit);
        /* optional int32 mp_timelimit = 4; */
        if (message.mpTimelimit !== undefined)
            writer.tag(4, WireType.Varint).int32(message.mpTimelimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_MatchEndConditions
 */
export const CCSUsrMsg_MatchEndConditions = new CCSUsrMsg_MatchEndConditions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_PlayerStatsUpdate$Type extends MessageType<CCSUsrMsg_PlayerStatsUpdate> {
    constructor() {
        super("CCSUsrMsg_PlayerStatsUpdate", [
            { no: 1, name: "version", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "stats", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_PlayerStatsUpdate_Stat },
            { no: 5, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "crc", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_PlayerStatsUpdate>): CCSUsrMsg_PlayerStatsUpdate {
        const message = { stats: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_PlayerStatsUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_PlayerStatsUpdate): CCSUsrMsg_PlayerStatsUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 version */ 1:
                    message.version = reader.int32();
                    break;
                case /* repeated CCSUsrMsg_PlayerStatsUpdate.Stat stats */ 4:
                    message.stats.push(CCSUsrMsg_PlayerStatsUpdate_Stat.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 user_id */ 5:
                    message.userId = reader.int32();
                    break;
                case /* optional int32 crc */ 6:
                    message.crc = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_PlayerStatsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 version = 1; */
        if (message.version !== undefined)
            writer.tag(1, WireType.Varint).int32(message.version);
        /* repeated CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4; */
        for (let i = 0; i < message.stats.length; i++)
            CCSUsrMsg_PlayerStatsUpdate_Stat.internalBinaryWrite(message.stats[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 user_id = 5; */
        if (message.userId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.userId);
        /* optional int32 crc = 6; */
        if (message.crc !== undefined)
            writer.tag(6, WireType.Varint).int32(message.crc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_PlayerStatsUpdate
 */
export const CCSUsrMsg_PlayerStatsUpdate = new CCSUsrMsg_PlayerStatsUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_PlayerStatsUpdate_Stat$Type extends MessageType<CCSUsrMsg_PlayerStatsUpdate_Stat> {
    constructor() {
        super("CCSUsrMsg_PlayerStatsUpdate.Stat", [
            { no: 1, name: "idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "delta", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_PlayerStatsUpdate_Stat>): CCSUsrMsg_PlayerStatsUpdate_Stat {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_PlayerStatsUpdate_Stat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_PlayerStatsUpdate_Stat): CCSUsrMsg_PlayerStatsUpdate_Stat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 idx */ 1:
                    message.idx = reader.int32();
                    break;
                case /* optional int32 delta */ 2:
                    message.delta = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_PlayerStatsUpdate_Stat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 idx = 1; */
        if (message.idx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.idx);
        /* optional int32 delta = 2; */
        if (message.delta !== undefined)
            writer.tag(2, WireType.Varint).int32(message.delta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_PlayerStatsUpdate.Stat
 */
export const CCSUsrMsg_PlayerStatsUpdate_Stat = new CCSUsrMsg_PlayerStatsUpdate_Stat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_DisplayInventory$Type extends MessageType<CCSUsrMsg_DisplayInventory> {
    constructor() {
        super("CCSUsrMsg_DisplayInventory", [
            { no: 1, name: "display", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_DisplayInventory>): CCSUsrMsg_DisplayInventory {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_DisplayInventory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_DisplayInventory): CCSUsrMsg_DisplayInventory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool display */ 1:
                    message.display = reader.bool();
                    break;
                case /* optional int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_DisplayInventory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool display = 1; */
        if (message.display !== undefined)
            writer.tag(1, WireType.Varint).bool(message.display);
        /* optional int32 user_id = 2; */
        if (message.userId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_DisplayInventory
 */
export const CCSUsrMsg_DisplayInventory = new CCSUsrMsg_DisplayInventory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_QuestProgress$Type extends MessageType<CCSUsrMsg_QuestProgress> {
    constructor() {
        super("CCSUsrMsg_QuestProgress", [
            { no: 1, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "normal_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "bonus_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_event_quest", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_QuestProgress>): CCSUsrMsg_QuestProgress {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_QuestProgress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_QuestProgress): CCSUsrMsg_QuestProgress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quest_id */ 1:
                    message.questId = reader.uint32();
                    break;
                case /* optional uint32 normal_points */ 2:
                    message.normalPoints = reader.uint32();
                    break;
                case /* optional uint32 bonus_points */ 3:
                    message.bonusPoints = reader.uint32();
                    break;
                case /* optional bool is_event_quest */ 4:
                    message.isEventQuest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_QuestProgress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quest_id = 1; */
        if (message.questId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.questId);
        /* optional uint32 normal_points = 2; */
        if (message.normalPoints !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.normalPoints);
        /* optional uint32 bonus_points = 3; */
        if (message.bonusPoints !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.bonusPoints);
        /* optional bool is_event_quest = 4; */
        if (message.isEventQuest !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isEventQuest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_QuestProgress
 */
export const CCSUsrMsg_QuestProgress = new CCSUsrMsg_QuestProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ScoreLeaderboardData$Type extends MessageType<CCSUsrMsg_ScoreLeaderboardData> {
    constructor() {
        super("CCSUsrMsg_ScoreLeaderboardData", [
            { no: 1, name: "data", kind: "message", T: () => ScoreLeaderboardData }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ScoreLeaderboardData>): CCSUsrMsg_ScoreLeaderboardData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ScoreLeaderboardData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ScoreLeaderboardData): CCSUsrMsg_ScoreLeaderboardData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ScoreLeaderboardData data */ 1:
                    message.data = ScoreLeaderboardData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ScoreLeaderboardData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ScoreLeaderboardData data = 1; */
        if (message.data)
            ScoreLeaderboardData.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ScoreLeaderboardData
 */
export const CCSUsrMsg_ScoreLeaderboardData = new CCSUsrMsg_ScoreLeaderboardData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_PlayerDecalDigitalSignature$Type extends MessageType<CCSUsrMsg_PlayerDecalDigitalSignature> {
    constructor() {
        super("CCSUsrMsg_PlayerDecalDigitalSignature", [
            { no: 1, name: "data", kind: "message", T: () => PlayerDecalDigitalSignature }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_PlayerDecalDigitalSignature>): CCSUsrMsg_PlayerDecalDigitalSignature {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_PlayerDecalDigitalSignature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_PlayerDecalDigitalSignature): CCSUsrMsg_PlayerDecalDigitalSignature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional PlayerDecalDigitalSignature data */ 1:
                    message.data = PlayerDecalDigitalSignature.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_PlayerDecalDigitalSignature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional PlayerDecalDigitalSignature data = 1; */
        if (message.data)
            PlayerDecalDigitalSignature.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_PlayerDecalDigitalSignature
 */
export const CCSUsrMsg_PlayerDecalDigitalSignature = new CCSUsrMsg_PlayerDecalDigitalSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_XRankGet$Type extends MessageType<CCSUsrMsg_XRankGet> {
    constructor() {
        super("CCSUsrMsg_XRankGet", [
            { no: 1, name: "mode_idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "controller", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_XRankGet>): CCSUsrMsg_XRankGet {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_XRankGet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_XRankGet): CCSUsrMsg_XRankGet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 mode_idx */ 1:
                    message.modeIdx = reader.int32();
                    break;
                case /* optional int32 controller */ 2:
                    message.controller = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_XRankGet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 mode_idx = 1; */
        if (message.modeIdx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.modeIdx);
        /* optional int32 controller = 2; */
        if (message.controller !== undefined)
            writer.tag(2, WireType.Varint).int32(message.controller);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_XRankGet
 */
export const CCSUsrMsg_XRankGet = new CCSUsrMsg_XRankGet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_XRankUpd$Type extends MessageType<CCSUsrMsg_XRankUpd> {
    constructor() {
        super("CCSUsrMsg_XRankUpd", [
            { no: 1, name: "mode_idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "controller", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ranking", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_XRankUpd>): CCSUsrMsg_XRankUpd {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_XRankUpd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_XRankUpd): CCSUsrMsg_XRankUpd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 mode_idx */ 1:
                    message.modeIdx = reader.int32();
                    break;
                case /* optional int32 controller */ 2:
                    message.controller = reader.int32();
                    break;
                case /* optional int32 ranking */ 3:
                    message.ranking = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_XRankUpd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 mode_idx = 1; */
        if (message.modeIdx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.modeIdx);
        /* optional int32 controller = 2; */
        if (message.controller !== undefined)
            writer.tag(2, WireType.Varint).int32(message.controller);
        /* optional int32 ranking = 3; */
        if (message.ranking !== undefined)
            writer.tag(3, WireType.Varint).int32(message.ranking);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_XRankUpd
 */
export const CCSUsrMsg_XRankUpd = new CCSUsrMsg_XRankUpd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_CallVoteFailed$Type extends MessageType<CCSUsrMsg_CallVoteFailed> {
    constructor() {
        super("CCSUsrMsg_CallVoteFailed", [
            { no: 1, name: "reason", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "time", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_CallVoteFailed>): CCSUsrMsg_CallVoteFailed {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_CallVoteFailed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_CallVoteFailed): CCSUsrMsg_CallVoteFailed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* optional int32 time */ 2:
                    message.time = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_CallVoteFailed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 reason = 1; */
        if (message.reason !== undefined)
            writer.tag(1, WireType.Varint).int32(message.reason);
        /* optional int32 time = 2; */
        if (message.time !== undefined)
            writer.tag(2, WireType.Varint).int32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_CallVoteFailed
 */
export const CCSUsrMsg_CallVoteFailed = new CCSUsrMsg_CallVoteFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VoteStart$Type extends MessageType<CCSUsrMsg_VoteStart> {
    constructor() {
        super("CCSUsrMsg_VoteStart", [
            { no: 1, name: "team", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "ent_idx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "vote_type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "disp_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "details_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "other_team_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "is_yes_no_vote", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "entidx_target", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VoteStart>): CCSUsrMsg_VoteStart {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VoteStart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VoteStart): CCSUsrMsg_VoteStart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 team */ 1:
                    message.team = reader.int32();
                    break;
                case /* optional int32 ent_idx */ 2:
                    message.entIdx = reader.int32();
                    break;
                case /* optional int32 vote_type */ 3:
                    message.voteType = reader.int32();
                    break;
                case /* optional string disp_str */ 4:
                    message.dispStr = reader.string();
                    break;
                case /* optional string details_str */ 5:
                    message.detailsStr = reader.string();
                    break;
                case /* optional string other_team_str */ 6:
                    message.otherTeamStr = reader.string();
                    break;
                case /* optional bool is_yes_no_vote */ 7:
                    message.isYesNoVote = reader.bool();
                    break;
                case /* optional int32 entidx_target */ 8:
                    message.entidxTarget = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VoteStart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 team = 1; */
        if (message.team !== undefined)
            writer.tag(1, WireType.Varint).int32(message.team);
        /* optional int32 ent_idx = 2; */
        if (message.entIdx !== undefined)
            writer.tag(2, WireType.Varint).int32(message.entIdx);
        /* optional int32 vote_type = 3; */
        if (message.voteType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.voteType);
        /* optional string disp_str = 4; */
        if (message.dispStr !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.dispStr);
        /* optional string details_str = 5; */
        if (message.detailsStr !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.detailsStr);
        /* optional string other_team_str = 6; */
        if (message.otherTeamStr !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.otherTeamStr);
        /* optional bool is_yes_no_vote = 7; */
        if (message.isYesNoVote !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isYesNoVote);
        /* optional int32 entidx_target = 8; */
        if (message.entidxTarget !== undefined)
            writer.tag(8, WireType.Varint).int32(message.entidxTarget);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VoteStart
 */
export const CCSUsrMsg_VoteStart = new CCSUsrMsg_VoteStart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VotePass$Type extends MessageType<CCSUsrMsg_VotePass> {
    constructor() {
        super("CCSUsrMsg_VotePass", [
            { no: 1, name: "team", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "vote_type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "disp_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "details_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VotePass>): CCSUsrMsg_VotePass {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VotePass>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VotePass): CCSUsrMsg_VotePass {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 team */ 1:
                    message.team = reader.int32();
                    break;
                case /* optional int32 vote_type */ 2:
                    message.voteType = reader.int32();
                    break;
                case /* optional string disp_str */ 3:
                    message.dispStr = reader.string();
                    break;
                case /* optional string details_str */ 4:
                    message.detailsStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VotePass, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 team = 1; */
        if (message.team !== undefined)
            writer.tag(1, WireType.Varint).int32(message.team);
        /* optional int32 vote_type = 2; */
        if (message.voteType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.voteType);
        /* optional string disp_str = 3; */
        if (message.dispStr !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.dispStr);
        /* optional string details_str = 4; */
        if (message.detailsStr !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.detailsStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VotePass
 */
export const CCSUsrMsg_VotePass = new CCSUsrMsg_VotePass$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VoteFailed$Type extends MessageType<CCSUsrMsg_VoteFailed> {
    constructor() {
        super("CCSUsrMsg_VoteFailed", [
            { no: 1, name: "team", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "reason", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VoteFailed>): CCSUsrMsg_VoteFailed {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VoteFailed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VoteFailed): CCSUsrMsg_VoteFailed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 team */ 1:
                    message.team = reader.int32();
                    break;
                case /* optional int32 reason */ 2:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VoteFailed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 team = 1; */
        if (message.team !== undefined)
            writer.tag(1, WireType.Varint).int32(message.team);
        /* optional int32 reason = 2; */
        if (message.reason !== undefined)
            writer.tag(2, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VoteFailed
 */
export const CCSUsrMsg_VoteFailed = new CCSUsrMsg_VoteFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_VoteSetup$Type extends MessageType<CCSUsrMsg_VoteSetup> {
    constructor() {
        super("CCSUsrMsg_VoteSetup", [
            { no: 1, name: "potential_issues", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_VoteSetup>): CCSUsrMsg_VoteSetup {
        const message = { potentialIssues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_VoteSetup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_VoteSetup): CCSUsrMsg_VoteSetup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string potential_issues */ 1:
                    message.potentialIssues.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_VoteSetup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string potential_issues = 1; */
        for (let i = 0; i < message.potentialIssues.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.potentialIssues[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_VoteSetup
 */
export const CCSUsrMsg_VoteSetup = new CCSUsrMsg_VoteSetup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SendLastKillerDamageToClient$Type extends MessageType<CCSUsrMsg_SendLastKillerDamageToClient> {
    constructor() {
        super("CCSUsrMsg_SendLastKillerDamageToClient", [
            { no: 1, name: "num_hits_given", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "damage_given", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "num_hits_taken", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "damage_taken", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SendLastKillerDamageToClient>): CCSUsrMsg_SendLastKillerDamageToClient {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SendLastKillerDamageToClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SendLastKillerDamageToClient): CCSUsrMsg_SendLastKillerDamageToClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 num_hits_given */ 1:
                    message.numHitsGiven = reader.int32();
                    break;
                case /* optional int32 damage_given */ 2:
                    message.damageGiven = reader.int32();
                    break;
                case /* optional int32 num_hits_taken */ 3:
                    message.numHitsTaken = reader.int32();
                    break;
                case /* optional int32 damage_taken */ 4:
                    message.damageTaken = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SendLastKillerDamageToClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 num_hits_given = 1; */
        if (message.numHitsGiven !== undefined)
            writer.tag(1, WireType.Varint).int32(message.numHitsGiven);
        /* optional int32 damage_given = 2; */
        if (message.damageGiven !== undefined)
            writer.tag(2, WireType.Varint).int32(message.damageGiven);
        /* optional int32 num_hits_taken = 3; */
        if (message.numHitsTaken !== undefined)
            writer.tag(3, WireType.Varint).int32(message.numHitsTaken);
        /* optional int32 damage_taken = 4; */
        if (message.damageTaken !== undefined)
            writer.tag(4, WireType.Varint).int32(message.damageTaken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SendLastKillerDamageToClient
 */
export const CCSUsrMsg_SendLastKillerDamageToClient = new CCSUsrMsg_SendLastKillerDamageToClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ServerRankUpdate$Type extends MessageType<CCSUsrMsg_ServerRankUpdate> {
    constructor() {
        super("CCSUsrMsg_ServerRankUpdate", [
            { no: 1, name: "rank_update", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_ServerRankUpdate_RankUpdate }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ServerRankUpdate>): CCSUsrMsg_ServerRankUpdate {
        const message = { rankUpdate: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ServerRankUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ServerRankUpdate): CCSUsrMsg_ServerRankUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update */ 1:
                    message.rankUpdate.push(CCSUsrMsg_ServerRankUpdate_RankUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ServerRankUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1; */
        for (let i = 0; i < message.rankUpdate.length; i++)
            CCSUsrMsg_ServerRankUpdate_RankUpdate.internalBinaryWrite(message.rankUpdate[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ServerRankUpdate
 */
export const CCSUsrMsg_ServerRankUpdate = new CCSUsrMsg_ServerRankUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ServerRankUpdate_RankUpdate$Type extends MessageType<CCSUsrMsg_ServerRankUpdate_RankUpdate> {
    constructor() {
        super("CCSUsrMsg_ServerRankUpdate.RankUpdate", [
            { no: 1, name: "account_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "rank_old", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rank_new", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "num_wins", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "rank_change", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "rank_type_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ServerRankUpdate_RankUpdate>): CCSUsrMsg_ServerRankUpdate_RankUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ServerRankUpdate_RankUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ServerRankUpdate_RankUpdate): CCSUsrMsg_ServerRankUpdate_RankUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 account_id */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* optional int32 rank_old */ 2:
                    message.rankOld = reader.int32();
                    break;
                case /* optional int32 rank_new */ 3:
                    message.rankNew = reader.int32();
                    break;
                case /* optional int32 num_wins */ 4:
                    message.numWins = reader.int32();
                    break;
                case /* optional float rank_change */ 5:
                    message.rankChange = reader.float();
                    break;
                case /* optional int32 rank_type_id */ 6:
                    message.rankTypeId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ServerRankUpdate_RankUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 account_id = 1; */
        if (message.accountId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* optional int32 rank_old = 2; */
        if (message.rankOld !== undefined)
            writer.tag(2, WireType.Varint).int32(message.rankOld);
        /* optional int32 rank_new = 3; */
        if (message.rankNew !== undefined)
            writer.tag(3, WireType.Varint).int32(message.rankNew);
        /* optional int32 num_wins = 4; */
        if (message.numWins !== undefined)
            writer.tag(4, WireType.Varint).int32(message.numWins);
        /* optional float rank_change = 5; */
        if (message.rankChange !== undefined)
            writer.tag(5, WireType.Bit32).float(message.rankChange);
        /* optional int32 rank_type_id = 6; */
        if (message.rankTypeId !== undefined)
            writer.tag(6, WireType.Varint).int32(message.rankTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ServerRankUpdate.RankUpdate
 */
export const CCSUsrMsg_ServerRankUpdate_RankUpdate = new CCSUsrMsg_ServerRankUpdate_RankUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_XpUpdate$Type extends MessageType<CCSUsrMsg_XpUpdate> {
    constructor() {
        super("CCSUsrMsg_XpUpdate", [
            { no: 1, name: "data", kind: "message", T: () => CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_XpUpdate>): CCSUsrMsg_XpUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_XpUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_XpUpdate): CCSUsrMsg_XpUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data */ 1:
                    message.data = CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_XpUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1; */
        if (message.data)
            CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_XpUpdate
 */
export const CCSUsrMsg_XpUpdate = new CCSUsrMsg_XpUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ItemPickup$Type extends MessageType<CCSUsrMsg_ItemPickup> {
    constructor() {
        super("CCSUsrMsg_ItemPickup", [
            { no: 1, name: "item", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ItemPickup>): CCSUsrMsg_ItemPickup {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ItemPickup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ItemPickup): CCSUsrMsg_ItemPickup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string item */ 1:
                    message.item = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ItemPickup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string item = 1; */
        if (message.item !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.item);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ItemPickup
 */
export const CCSUsrMsg_ItemPickup = new CCSUsrMsg_ItemPickup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ShowMenu$Type extends MessageType<CCSUsrMsg_ShowMenu> {
    constructor() {
        super("CCSUsrMsg_ShowMenu", [
            { no: 1, name: "bits_valid_slots", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "display_time", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "menu_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ShowMenu>): CCSUsrMsg_ShowMenu {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ShowMenu>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ShowMenu): CCSUsrMsg_ShowMenu {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 bits_valid_slots */ 1:
                    message.bitsValidSlots = reader.int32();
                    break;
                case /* optional int32 display_time */ 2:
                    message.displayTime = reader.int32();
                    break;
                case /* optional string menu_string */ 3:
                    message.menuString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ShowMenu, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 bits_valid_slots = 1; */
        if (message.bitsValidSlots !== undefined)
            writer.tag(1, WireType.Varint).int32(message.bitsValidSlots);
        /* optional int32 display_time = 2; */
        if (message.displayTime !== undefined)
            writer.tag(2, WireType.Varint).int32(message.displayTime);
        /* optional string menu_string = 3; */
        if (message.menuString !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.menuString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ShowMenu
 */
export const CCSUsrMsg_ShowMenu = new CCSUsrMsg_ShowMenu$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_BarTime$Type extends MessageType<CCSUsrMsg_BarTime> {
    constructor() {
        super("CCSUsrMsg_BarTime", [
            { no: 1, name: "time", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_BarTime>): CCSUsrMsg_BarTime {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_BarTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_BarTime): CCSUsrMsg_BarTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string time */ 1:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_BarTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string time = 1; */
        if (message.time !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_BarTime
 */
export const CCSUsrMsg_BarTime = new CCSUsrMsg_BarTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_AmmoDenied$Type extends MessageType<CCSUsrMsg_AmmoDenied> {
    constructor() {
        super("CCSUsrMsg_AmmoDenied", [
            { no: 1, name: "ammoIdx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_AmmoDenied>): CCSUsrMsg_AmmoDenied {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_AmmoDenied>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_AmmoDenied): CCSUsrMsg_AmmoDenied {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ammoIdx */ 1:
                    message.ammoIdx = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_AmmoDenied, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ammoIdx = 1; */
        if (message.ammoIdx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.ammoIdx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_AmmoDenied
 */
export const CCSUsrMsg_AmmoDenied = new CCSUsrMsg_AmmoDenied$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_MarkAchievement$Type extends MessageType<CCSUsrMsg_MarkAchievement> {
    constructor() {
        super("CCSUsrMsg_MarkAchievement", [
            { no: 1, name: "achievement", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_MarkAchievement>): CCSUsrMsg_MarkAchievement {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_MarkAchievement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_MarkAchievement): CCSUsrMsg_MarkAchievement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string achievement */ 1:
                    message.achievement = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_MarkAchievement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string achievement = 1; */
        if (message.achievement !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.achievement);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_MarkAchievement
 */
export const CCSUsrMsg_MarkAchievement = new CCSUsrMsg_MarkAchievement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_MatchStatsUpdate$Type extends MessageType<CCSUsrMsg_MatchStatsUpdate> {
    constructor() {
        super("CCSUsrMsg_MatchStatsUpdate", [
            { no: 1, name: "update", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_MatchStatsUpdate>): CCSUsrMsg_MatchStatsUpdate {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_MatchStatsUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_MatchStatsUpdate): CCSUsrMsg_MatchStatsUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string update */ 1:
                    message.update = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_MatchStatsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string update = 1; */
        if (message.update !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.update);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_MatchStatsUpdate
 */
export const CCSUsrMsg_MatchStatsUpdate = new CCSUsrMsg_MatchStatsUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ItemDrop$Type extends MessageType<CCSUsrMsg_ItemDrop> {
    constructor() {
        super("CCSUsrMsg_ItemDrop", [
            { no: 1, name: "itemid", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "death", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ItemDrop>): CCSUsrMsg_ItemDrop {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ItemDrop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ItemDrop): CCSUsrMsg_ItemDrop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 itemid */ 1:
                    message.itemid = reader.int64().toBigInt();
                    break;
                case /* optional bool death */ 2:
                    message.death = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ItemDrop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 itemid = 1; */
        if (message.itemid !== undefined)
            writer.tag(1, WireType.Varint).int64(message.itemid);
        /* optional bool death = 2; */
        if (message.death !== undefined)
            writer.tag(2, WireType.Varint).bool(message.death);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ItemDrop
 */
export const CCSUsrMsg_ItemDrop = new CCSUsrMsg_ItemDrop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_GlowPropTurnOff$Type extends MessageType<CCSUsrMsg_GlowPropTurnOff> {
    constructor() {
        super("CCSUsrMsg_GlowPropTurnOff", [
            { no: 1, name: "entidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_GlowPropTurnOff>): CCSUsrMsg_GlowPropTurnOff {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_GlowPropTurnOff>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_GlowPropTurnOff): CCSUsrMsg_GlowPropTurnOff {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entidx */ 1:
                    message.entidx = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_GlowPropTurnOff, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entidx = 1; */
        if (message.entidx !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entidx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_GlowPropTurnOff
 */
export const CCSUsrMsg_GlowPropTurnOff = new CCSUsrMsg_GlowPropTurnOff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundBackupFilenames$Type extends MessageType<CCSUsrMsg_RoundBackupFilenames> {
    constructor() {
        super("CCSUsrMsg_RoundBackupFilenames", [
            { no: 1, name: "count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "filename", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nicename", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundBackupFilenames>): CCSUsrMsg_RoundBackupFilenames {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundBackupFilenames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundBackupFilenames): CCSUsrMsg_RoundBackupFilenames {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 count */ 1:
                    message.count = reader.int32();
                    break;
                case /* optional int32 index */ 2:
                    message.index = reader.int32();
                    break;
                case /* optional string filename */ 3:
                    message.filename = reader.string();
                    break;
                case /* optional string nicename */ 4:
                    message.nicename = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundBackupFilenames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 count = 1; */
        if (message.count !== undefined)
            writer.tag(1, WireType.Varint).int32(message.count);
        /* optional int32 index = 2; */
        if (message.index !== undefined)
            writer.tag(2, WireType.Varint).int32(message.index);
        /* optional string filename = 3; */
        if (message.filename !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.filename);
        /* optional string nicename = 4; */
        if (message.nicename !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.nicename);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundBackupFilenames
 */
export const CCSUsrMsg_RoundBackupFilenames = new CCSUsrMsg_RoundBackupFilenames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SSUI$Type extends MessageType<CCSUsrMsg_SSUI> {
    constructor() {
        super("CCSUsrMsg_SSUI", [
            { no: 1, name: "show", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "start_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "end_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SSUI>): CCSUsrMsg_SSUI {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SSUI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SSUI): CCSUsrMsg_SSUI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool show */ 1:
                    message.show = reader.bool();
                    break;
                case /* optional float start_time */ 2:
                    message.startTime = reader.float();
                    break;
                case /* optional float end_time */ 3:
                    message.endTime = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SSUI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool show = 1; */
        if (message.show !== undefined)
            writer.tag(1, WireType.Varint).bool(message.show);
        /* optional float start_time = 2; */
        if (message.startTime !== undefined)
            writer.tag(2, WireType.Bit32).float(message.startTime);
        /* optional float end_time = 3; */
        if (message.endTime !== undefined)
            writer.tag(3, WireType.Bit32).float(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SSUI
 */
export const CCSUsrMsg_SSUI = new CCSUsrMsg_SSUI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SurvivalStats$Type extends MessageType<CCSUsrMsg_SurvivalStats> {
    constructor() {
        super("CCSUsrMsg_SurvivalStats", [
            { no: 1, name: "xuid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "facts", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_SurvivalStats_Fact },
            { no: 3, name: "users", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_SurvivalStats_Placement },
            { no: 5, name: "damages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_SurvivalStats_Damage },
            { no: 4, name: "ticknumber", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SurvivalStats>): CCSUsrMsg_SurvivalStats {
        const message = { facts: [], users: [], damages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SurvivalStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SurvivalStats): CCSUsrMsg_SurvivalStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 xuid */ 1:
                    message.xuid = reader.uint64().toBigInt();
                    break;
                case /* repeated CCSUsrMsg_SurvivalStats.Fact facts */ 2:
                    message.facts.push(CCSUsrMsg_SurvivalStats_Fact.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CCSUsrMsg_SurvivalStats.Placement users */ 3:
                    message.users.push(CCSUsrMsg_SurvivalStats_Placement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CCSUsrMsg_SurvivalStats.Damage damages */ 5:
                    message.damages.push(CCSUsrMsg_SurvivalStats_Damage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 ticknumber */ 4:
                    message.ticknumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SurvivalStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 xuid = 1; */
        if (message.xuid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.xuid);
        /* repeated CCSUsrMsg_SurvivalStats.Fact facts = 2; */
        for (let i = 0; i < message.facts.length; i++)
            CCSUsrMsg_SurvivalStats_Fact.internalBinaryWrite(message.facts[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CCSUsrMsg_SurvivalStats.Placement users = 3; */
        for (let i = 0; i < message.users.length; i++)
            CCSUsrMsg_SurvivalStats_Placement.internalBinaryWrite(message.users[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated CCSUsrMsg_SurvivalStats.Damage damages = 5; */
        for (let i = 0; i < message.damages.length; i++)
            CCSUsrMsg_SurvivalStats_Damage.internalBinaryWrite(message.damages[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 ticknumber = 4; */
        if (message.ticknumber !== undefined)
            writer.tag(4, WireType.Varint).int32(message.ticknumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SurvivalStats
 */
export const CCSUsrMsg_SurvivalStats = new CCSUsrMsg_SurvivalStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SurvivalStats_Fact$Type extends MessageType<CCSUsrMsg_SurvivalStats_Fact> {
    constructor() {
        super("CCSUsrMsg_SurvivalStats.Fact", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "display", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "interestingness", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SurvivalStats_Fact>): CCSUsrMsg_SurvivalStats_Fact {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SurvivalStats_Fact>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SurvivalStats_Fact): CCSUsrMsg_SurvivalStats_Fact {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional int32 display */ 2:
                    message.display = reader.int32();
                    break;
                case /* optional int32 value */ 3:
                    message.value = reader.int32();
                    break;
                case /* optional float interestingness */ 4:
                    message.interestingness = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SurvivalStats_Fact, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional int32 display = 2; */
        if (message.display !== undefined)
            writer.tag(2, WireType.Varint).int32(message.display);
        /* optional int32 value = 3; */
        if (message.value !== undefined)
            writer.tag(3, WireType.Varint).int32(message.value);
        /* optional float interestingness = 4; */
        if (message.interestingness !== undefined)
            writer.tag(4, WireType.Bit32).float(message.interestingness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SurvivalStats.Fact
 */
export const CCSUsrMsg_SurvivalStats_Fact = new CCSUsrMsg_SurvivalStats_Fact$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SurvivalStats_Placement$Type extends MessageType<CCSUsrMsg_SurvivalStats_Placement> {
    constructor() {
        super("CCSUsrMsg_SurvivalStats.Placement", [
            { no: 1, name: "xuid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "teamnumber", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "placement", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SurvivalStats_Placement>): CCSUsrMsg_SurvivalStats_Placement {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SurvivalStats_Placement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SurvivalStats_Placement): CCSUsrMsg_SurvivalStats_Placement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 xuid */ 1:
                    message.xuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 teamnumber */ 2:
                    message.teamnumber = reader.int32();
                    break;
                case /* optional int32 placement */ 3:
                    message.placement = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SurvivalStats_Placement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 xuid = 1; */
        if (message.xuid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.xuid);
        /* optional int32 teamnumber = 2; */
        if (message.teamnumber !== undefined)
            writer.tag(2, WireType.Varint).int32(message.teamnumber);
        /* optional int32 placement = 3; */
        if (message.placement !== undefined)
            writer.tag(3, WireType.Varint).int32(message.placement);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SurvivalStats.Placement
 */
export const CCSUsrMsg_SurvivalStats_Placement = new CCSUsrMsg_SurvivalStats_Placement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_SurvivalStats_Damage$Type extends MessageType<CCSUsrMsg_SurvivalStats_Damage> {
    constructor() {
        super("CCSUsrMsg_SurvivalStats.Damage", [
            { no: 1, name: "xuid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "to", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to_hits", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "from", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "from_hits", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_SurvivalStats_Damage>): CCSUsrMsg_SurvivalStats_Damage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_SurvivalStats_Damage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_SurvivalStats_Damage): CCSUsrMsg_SurvivalStats_Damage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 xuid */ 1:
                    message.xuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 to */ 2:
                    message.to = reader.int32();
                    break;
                case /* optional int32 to_hits */ 3:
                    message.toHits = reader.int32();
                    break;
                case /* optional int32 from */ 4:
                    message.from = reader.int32();
                    break;
                case /* optional int32 from_hits */ 5:
                    message.fromHits = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_SurvivalStats_Damage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 xuid = 1; */
        if (message.xuid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.xuid);
        /* optional int32 to = 2; */
        if (message.to !== undefined)
            writer.tag(2, WireType.Varint).int32(message.to);
        /* optional int32 to_hits = 3; */
        if (message.toHits !== undefined)
            writer.tag(3, WireType.Varint).int32(message.toHits);
        /* optional int32 from = 4; */
        if (message.from !== undefined)
            writer.tag(4, WireType.Varint).int32(message.from);
        /* optional int32 from_hits = 5; */
        if (message.fromHits !== undefined)
            writer.tag(5, WireType.Varint).int32(message.fromHits);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_SurvivalStats.Damage
 */
export const CCSUsrMsg_SurvivalStats_Damage = new CCSUsrMsg_SurvivalStats_Damage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_EndOfMatchAllPlayersData$Type extends MessageType<CCSUsrMsg_EndOfMatchAllPlayersData> {
    constructor() {
        super("CCSUsrMsg_EndOfMatchAllPlayersData", [
            { no: 1, name: "allplayerdata", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData },
            { no: 2, name: "scene", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_EndOfMatchAllPlayersData>): CCSUsrMsg_EndOfMatchAllPlayersData {
        const message = { allplayerdata: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_EndOfMatchAllPlayersData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_EndOfMatchAllPlayersData): CCSUsrMsg_EndOfMatchAllPlayersData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata */ 1:
                    message.allplayerdata.push(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 scene */ 2:
                    message.scene = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_EndOfMatchAllPlayersData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1; */
        for (let i = 0; i < message.allplayerdata.length; i++)
            CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData.internalBinaryWrite(message.allplayerdata[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 scene = 2; */
        if (message.scene !== undefined)
            writer.tag(2, WireType.Varint).int32(message.scene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_EndOfMatchAllPlayersData
 */
export const CCSUsrMsg_EndOfMatchAllPlayersData = new CCSUsrMsg_EndOfMatchAllPlayersData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_EndOfMatchAllPlayersData_Accolade$Type extends MessageType<CCSUsrMsg_EndOfMatchAllPlayersData_Accolade> {
    constructor() {
        super("CCSUsrMsg_EndOfMatchAllPlayersData.Accolade", [
            { no: 1, name: "eaccolade", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "position", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_EndOfMatchAllPlayersData_Accolade>): CCSUsrMsg_EndOfMatchAllPlayersData_Accolade {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_EndOfMatchAllPlayersData_Accolade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_EndOfMatchAllPlayersData_Accolade): CCSUsrMsg_EndOfMatchAllPlayersData_Accolade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 eaccolade */ 1:
                    message.eaccolade = reader.int32();
                    break;
                case /* optional float value */ 2:
                    message.value = reader.float();
                    break;
                case /* optional int32 position */ 3:
                    message.position = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 eaccolade = 1; */
        if (message.eaccolade !== undefined)
            writer.tag(1, WireType.Varint).int32(message.eaccolade);
        /* optional float value = 2; */
        if (message.value !== undefined)
            writer.tag(2, WireType.Bit32).float(message.value);
        /* optional int32 position = 3; */
        if (message.position !== undefined)
            writer.tag(3, WireType.Varint).int32(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_EndOfMatchAllPlayersData.Accolade
 */
export const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade = new CCSUsrMsg_EndOfMatchAllPlayersData_Accolade$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData$Type extends MessageType<CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData> {
    constructor() {
        super("CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData", [
            { no: 1, name: "entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "xuid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "teamnumber", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "nomination", kind: "message", T: () => CCSUsrMsg_EndOfMatchAllPlayersData_Accolade },
            { no: 6, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CEconItemPreviewDataBlock },
            { no: 7, name: "playercolor", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "isbot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData>): CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData): CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 entindex */ 1:
                    message.entindex = reader.int32();
                    break;
                case /* optional uint64 xuid */ 2:
                    message.xuid = reader.uint64().toBigInt();
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional int32 teamnumber */ 4:
                    message.teamnumber = reader.int32();
                    break;
                case /* optional CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination */ 5:
                    message.nomination = CCSUsrMsg_EndOfMatchAllPlayersData_Accolade.internalBinaryRead(reader, reader.uint32(), options, message.nomination);
                    break;
                case /* repeated CEconItemPreviewDataBlock items */ 6:
                    message.items.push(CEconItemPreviewDataBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 playercolor */ 7:
                    message.playercolor = reader.int32();
                    break;
                case /* optional bool isbot */ 8:
                    message.isbot = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 entindex = 1; */
        if (message.entindex !== undefined)
            writer.tag(1, WireType.Varint).int32(message.entindex);
        /* optional uint64 xuid = 2; */
        if (message.xuid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.xuid);
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional int32 teamnumber = 4; */
        if (message.teamnumber !== undefined)
            writer.tag(4, WireType.Varint).int32(message.teamnumber);
        /* optional CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5; */
        if (message.nomination)
            CCSUsrMsg_EndOfMatchAllPlayersData_Accolade.internalBinaryWrite(message.nomination, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated CEconItemPreviewDataBlock items = 6; */
        for (let i = 0; i < message.items.length; i++)
            CEconItemPreviewDataBlock.internalBinaryWrite(message.items[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 playercolor = 7; */
        if (message.playercolor !== undefined)
            writer.tag(7, WireType.Varint).int32(message.playercolor);
        /* optional bool isbot = 8; */
        if (message.isbot !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isbot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData
 */
export const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData = new CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundImpactScoreData$Type extends MessageType<CCSUsrMsg_RoundImpactScoreData> {
    constructor() {
        super("CCSUsrMsg_RoundImpactScoreData", [
            { no: 1, name: "init_conditions", kind: "message", T: () => CCSUsrMsg_RoundImpactScoreData_InitialConditions },
            { no: 2, name: "all_ris_event_data", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_RoundImpactScoreData_RisEvent }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundImpactScoreData>): CCSUsrMsg_RoundImpactScoreData {
        const message = { allRisEventData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundImpactScoreData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundImpactScoreData): CCSUsrMsg_RoundImpactScoreData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions */ 1:
                    message.initConditions = CCSUsrMsg_RoundImpactScoreData_InitialConditions.internalBinaryRead(reader, reader.uint32(), options, message.initConditions);
                    break;
                case /* repeated CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data */ 2:
                    message.allRisEventData.push(CCSUsrMsg_RoundImpactScoreData_RisEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundImpactScoreData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CCSUsrMsg_RoundImpactScoreData.InitialConditions init_conditions = 1; */
        if (message.initConditions)
            CCSUsrMsg_RoundImpactScoreData_InitialConditions.internalBinaryWrite(message.initConditions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated CCSUsrMsg_RoundImpactScoreData.RisEvent all_ris_event_data = 2; */
        for (let i = 0; i < message.allRisEventData.length; i++)
            CCSUsrMsg_RoundImpactScoreData_RisEvent.internalBinaryWrite(message.allRisEventData[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundImpactScoreData
 */
export const CCSUsrMsg_RoundImpactScoreData = new CCSUsrMsg_RoundImpactScoreData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundImpactScoreData_RisEvent$Type extends MessageType<CCSUsrMsg_RoundImpactScoreData_RisEvent> {
    constructor() {
        super("CCSUsrMsg_RoundImpactScoreData.RisEvent", [
            { no: 1, name: "timestamp", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "terrorist_odds", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ct_alive", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "t_alive", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "victim_data", kind: "message", T: () => CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim },
            { no: 6, name: "objective_data", kind: "message", T: () => CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective },
            { no: 7, name: "all_damage_data", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundImpactScoreData_RisEvent>): CCSUsrMsg_RoundImpactScoreData_RisEvent {
        const message = { allDamageData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundImpactScoreData_RisEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundImpactScoreData_RisEvent): CCSUsrMsg_RoundImpactScoreData_RisEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float timestamp */ 1:
                    message.timestamp = reader.float();
                    break;
                case /* optional int32 terrorist_odds */ 2:
                    message.terroristOdds = reader.int32();
                    break;
                case /* optional int32 ct_alive */ 3:
                    message.ctAlive = reader.int32();
                    break;
                case /* optional int32 t_alive */ 4:
                    message.tAlive = reader.int32();
                    break;
                case /* optional CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data */ 5:
                    message.victimData = CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim.internalBinaryRead(reader, reader.uint32(), options, message.victimData);
                    break;
                case /* optional CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data */ 6:
                    message.objectiveData = CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective.internalBinaryRead(reader, reader.uint32(), options, message.objectiveData);
                    break;
                case /* repeated CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data */ 7:
                    message.allDamageData.push(CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundImpactScoreData_RisEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float timestamp = 1; */
        if (message.timestamp !== undefined)
            writer.tag(1, WireType.Bit32).float(message.timestamp);
        /* optional int32 terrorist_odds = 2; */
        if (message.terroristOdds !== undefined)
            writer.tag(2, WireType.Varint).int32(message.terroristOdds);
        /* optional int32 ct_alive = 3; */
        if (message.ctAlive !== undefined)
            writer.tag(3, WireType.Varint).int32(message.ctAlive);
        /* optional int32 t_alive = 4; */
        if (message.tAlive !== undefined)
            writer.tag(4, WireType.Varint).int32(message.tAlive);
        /* optional CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim victim_data = 5; */
        if (message.victimData)
            CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim.internalBinaryWrite(message.victimData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective objective_data = 6; */
        if (message.objectiveData)
            CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective.internalBinaryWrite(message.objectiveData, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage all_damage_data = 7; */
        for (let i = 0; i < message.allDamageData.length; i++)
            CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage.internalBinaryWrite(message.allDamageData[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent
 */
export const CCSUsrMsg_RoundImpactScoreData_RisEvent = new CCSUsrMsg_RoundImpactScoreData_RisEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim$Type extends MessageType<CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim> {
    constructor() {
        super("CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim", [
            { no: 1, name: "team_number", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "xuid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "color", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "is_bot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_dead", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim>): CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim): CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 team_number */ 1:
                    message.teamNumber = reader.int32();
                    break;
                case /* optional int32 entindex */ 2:
                    message.entindex = reader.int32();
                    break;
                case /* optional uint64 xuid */ 3:
                    message.xuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 color */ 4:
                    message.color = reader.int32();
                    break;
                case /* optional bool is_bot */ 5:
                    message.isBot = reader.bool();
                    break;
                case /* optional bool is_dead */ 6:
                    message.isDead = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 team_number = 1; */
        if (message.teamNumber !== undefined)
            writer.tag(1, WireType.Varint).int32(message.teamNumber);
        /* optional int32 entindex = 2; */
        if (message.entindex !== undefined)
            writer.tag(2, WireType.Varint).int32(message.entindex);
        /* optional uint64 xuid = 3; */
        if (message.xuid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.xuid);
        /* optional int32 color = 4; */
        if (message.color !== undefined)
            writer.tag(4, WireType.Varint).int32(message.color);
        /* optional bool is_bot = 5; */
        if (message.isBot !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isBot);
        /* optional bool is_dead = 6; */
        if (message.isDead !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isDead);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent.Victim
 */
export const CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim = new CCSUsrMsg_RoundImpactScoreData_RisEvent_Victim$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective$Type extends MessageType<CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective> {
    constructor() {
        super("CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective>): CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective): CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent.Objective
 */
export const CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective = new CCSUsrMsg_RoundImpactScoreData_RisEvent_Objective$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage$Type extends MessageType<CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage> {
    constructor() {
        super("CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage", [
            { no: 1, name: "target_entindex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "target_xuid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "health_removed", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "num_hits", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "return_health_removed", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "num_return_hits", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage>): CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage): CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 target_entindex */ 1:
                    message.targetEntindex = reader.int32();
                    break;
                case /* optional uint64 target_xuid */ 2:
                    message.targetXuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 health_removed */ 3:
                    message.healthRemoved = reader.int32();
                    break;
                case /* optional int32 num_hits */ 4:
                    message.numHits = reader.int32();
                    break;
                case /* optional int32 return_health_removed */ 5:
                    message.returnHealthRemoved = reader.int32();
                    break;
                case /* optional int32 num_return_hits */ 6:
                    message.numReturnHits = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 target_entindex = 1; */
        if (message.targetEntindex !== undefined)
            writer.tag(1, WireType.Varint).int32(message.targetEntindex);
        /* optional uint64 target_xuid = 2; */
        if (message.targetXuid !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.targetXuid);
        /* optional int32 health_removed = 3; */
        if (message.healthRemoved !== undefined)
            writer.tag(3, WireType.Varint).int32(message.healthRemoved);
        /* optional int32 num_hits = 4; */
        if (message.numHits !== undefined)
            writer.tag(4, WireType.Varint).int32(message.numHits);
        /* optional int32 return_health_removed = 5; */
        if (message.returnHealthRemoved !== undefined)
            writer.tag(5, WireType.Varint).int32(message.returnHealthRemoved);
        /* optional int32 num_return_hits = 6; */
        if (message.numReturnHits !== undefined)
            writer.tag(6, WireType.Varint).int32(message.numReturnHits);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundImpactScoreData.RisEvent.Damage
 */
export const CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage = new CCSUsrMsg_RoundImpactScoreData_RisEvent_Damage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RoundImpactScoreData_InitialConditions$Type extends MessageType<CCSUsrMsg_RoundImpactScoreData_InitialConditions> {
    constructor() {
        super("CCSUsrMsg_RoundImpactScoreData.InitialConditions", [
            { no: 1, name: "ct_equip_value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "t_equip_value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "terrorist_odds", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RoundImpactScoreData_InitialConditions>): CCSUsrMsg_RoundImpactScoreData_InitialConditions {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RoundImpactScoreData_InitialConditions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RoundImpactScoreData_InitialConditions): CCSUsrMsg_RoundImpactScoreData_InitialConditions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ct_equip_value */ 1:
                    message.ctEquipValue = reader.int32();
                    break;
                case /* optional int32 t_equip_value */ 2:
                    message.tEquipValue = reader.int32();
                    break;
                case /* optional int32 terrorist_odds */ 3:
                    message.terroristOdds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RoundImpactScoreData_InitialConditions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ct_equip_value = 1; */
        if (message.ctEquipValue !== undefined)
            writer.tag(1, WireType.Varint).int32(message.ctEquipValue);
        /* optional int32 t_equip_value = 2; */
        if (message.tEquipValue !== undefined)
            writer.tag(2, WireType.Varint).int32(message.tEquipValue);
        /* optional int32 terrorist_odds = 3; */
        if (message.terroristOdds !== undefined)
            writer.tag(3, WireType.Varint).int32(message.terroristOdds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RoundImpactScoreData.InitialConditions
 */
export const CCSUsrMsg_RoundImpactScoreData_InitialConditions = new CCSUsrMsg_RoundImpactScoreData_InitialConditions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_CurrentRoundOdds$Type extends MessageType<CCSUsrMsg_CurrentRoundOdds> {
    constructor() {
        super("CCSUsrMsg_CurrentRoundOdds", [
            { no: 1, name: "odds", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_CurrentRoundOdds>): CCSUsrMsg_CurrentRoundOdds {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_CurrentRoundOdds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_CurrentRoundOdds): CCSUsrMsg_CurrentRoundOdds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 odds */ 1:
                    message.odds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_CurrentRoundOdds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 odds = 1; */
        if (message.odds !== undefined)
            writer.tag(1, WireType.Varint).int32(message.odds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_CurrentRoundOdds
 */
export const CCSUsrMsg_CurrentRoundOdds = new CCSUsrMsg_CurrentRoundOdds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_DeepStats$Type extends MessageType<CCSUsrMsg_DeepStats> {
    constructor() {
        super("CCSUsrMsg_DeepStats", [
            { no: 1, name: "stats", kind: "message", T: () => CMsgGCCStrike15_ClientDeepStats }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_DeepStats>): CCSUsrMsg_DeepStats {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_DeepStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_DeepStats): CCSUsrMsg_DeepStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CMsgGCCStrike15_ClientDeepStats stats */ 1:
                    message.stats = CMsgGCCStrike15_ClientDeepStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_DeepStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CMsgGCCStrike15_ClientDeepStats stats = 1; */
        if (message.stats)
            CMsgGCCStrike15_ClientDeepStats.internalBinaryWrite(message.stats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_DeepStats
 */
export const CCSUsrMsg_DeepStats = new CCSUsrMsg_DeepStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ResetHud$Type extends MessageType<CCSUsrMsg_ResetHud> {
    constructor() {
        super("CCSUsrMsg_ResetHud", [
            { no: 1, name: "reset", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ResetHud>): CCSUsrMsg_ResetHud {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ResetHud>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ResetHud): CCSUsrMsg_ResetHud {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool reset */ 1:
                    message.reset = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ResetHud, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool reset = 1; */
        if (message.reset !== undefined)
            writer.tag(1, WireType.Varint).bool(message.reset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ResetHud
 */
export const CCSUsrMsg_ResetHud = new CCSUsrMsg_ResetHud$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_GameTitle$Type extends MessageType<CCSUsrMsg_GameTitle> {
    constructor() {
        super("CCSUsrMsg_GameTitle", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_GameTitle>): CCSUsrMsg_GameTitle {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_GameTitle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_GameTitle): CCSUsrMsg_GameTitle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_GameTitle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_GameTitle
 */
export const CCSUsrMsg_GameTitle = new CCSUsrMsg_GameTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_RequestState$Type extends MessageType<CCSUsrMsg_RequestState> {
    constructor() {
        super("CCSUsrMsg_RequestState", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_RequestState>): CCSUsrMsg_RequestState {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_RequestState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_RequestState): CCSUsrMsg_RequestState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_RequestState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_RequestState
 */
export const CCSUsrMsg_RequestState = new CCSUsrMsg_RequestState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_StopSpectatorMode$Type extends MessageType<CCSUsrMsg_StopSpectatorMode> {
    constructor() {
        super("CCSUsrMsg_StopSpectatorMode", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_StopSpectatorMode>): CCSUsrMsg_StopSpectatorMode {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_StopSpectatorMode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_StopSpectatorMode): CCSUsrMsg_StopSpectatorMode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_StopSpectatorMode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_StopSpectatorMode
 */
export const CCSUsrMsg_StopSpectatorMode = new CCSUsrMsg_StopSpectatorMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_DisconnectToLobby$Type extends MessageType<CCSUsrMsg_DisconnectToLobby> {
    constructor() {
        super("CCSUsrMsg_DisconnectToLobby", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_DisconnectToLobby>): CCSUsrMsg_DisconnectToLobby {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_DisconnectToLobby>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_DisconnectToLobby): CCSUsrMsg_DisconnectToLobby {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_DisconnectToLobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_DisconnectToLobby
 */
export const CCSUsrMsg_DisconnectToLobby = new CCSUsrMsg_DisconnectToLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_WarmupHasEnded$Type extends MessageType<CCSUsrMsg_WarmupHasEnded> {
    constructor() {
        super("CCSUsrMsg_WarmupHasEnded", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_WarmupHasEnded>): CCSUsrMsg_WarmupHasEnded {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_WarmupHasEnded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_WarmupHasEnded): CCSUsrMsg_WarmupHasEnded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_WarmupHasEnded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_WarmupHasEnded
 */
export const CCSUsrMsg_WarmupHasEnded = new CCSUsrMsg_WarmupHasEnded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ClientInfo$Type extends MessageType<CCSUsrMsg_ClientInfo> {
    constructor() {
        super("CCSUsrMsg_ClientInfo", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ClientInfo>): CCSUsrMsg_ClientInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ClientInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ClientInfo): CCSUsrMsg_ClientInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ClientInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ClientInfo
 */
export const CCSUsrMsg_ClientInfo = new CCSUsrMsg_ClientInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_ServerRankRevealAll$Type extends MessageType<CCSUsrMsg_ServerRankRevealAll> {
    constructor() {
        super("CCSUsrMsg_ServerRankRevealAll", [
            { no: 1, name: "seconds_till_shutdown", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "reservation", kind: "message", T: () => CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_ServerRankRevealAll>): CCSUsrMsg_ServerRankRevealAll {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_ServerRankRevealAll>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_ServerRankRevealAll): CCSUsrMsg_ServerRankRevealAll {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 seconds_till_shutdown */ 1:
                    message.secondsTillShutdown = reader.int32();
                    break;
                case /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation */ 2:
                    message.reservation = CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryRead(reader, reader.uint32(), options, message.reservation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_ServerRankRevealAll, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 seconds_till_shutdown = 1; */
        if (message.secondsTillShutdown !== undefined)
            writer.tag(1, WireType.Varint).int32(message.secondsTillShutdown);
        /* optional CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2; */
        if (message.reservation)
            CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.internalBinaryWrite(message.reservation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_ServerRankRevealAll
 */
export const CCSUsrMsg_ServerRankRevealAll = new CCSUsrMsg_ServerRankRevealAll$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CCSUsrMsg_UtilMsg$Type extends MessageType<CCSUsrMsg_UtilMsg> {
    constructor() {
        super("CCSUsrMsg_UtilMsg", [
            { no: 1, name: "util_action", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "util1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "util2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "util3", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "util4", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "util5", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CCSUsrMsg_UtilMsg>): CCSUsrMsg_UtilMsg {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CCSUsrMsg_UtilMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CCSUsrMsg_UtilMsg): CCSUsrMsg_UtilMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string util_action */ 1:
                    message.utilAction = reader.string();
                    break;
                case /* optional int32 util1 */ 2:
                    message.util1 = reader.int32();
                    break;
                case /* optional int32 util2 */ 3:
                    message.util2 = reader.int32();
                    break;
                case /* optional int32 util3 */ 4:
                    message.util3 = reader.int32();
                    break;
                case /* optional int32 util4 */ 5:
                    message.util4 = reader.int32();
                    break;
                case /* optional int32 util5 */ 6:
                    message.util5 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CCSUsrMsg_UtilMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string util_action = 1; */
        if (message.utilAction !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.utilAction);
        /* optional int32 util1 = 2; */
        if (message.util1 !== undefined)
            writer.tag(2, WireType.Varint).int32(message.util1);
        /* optional int32 util2 = 3; */
        if (message.util2 !== undefined)
            writer.tag(3, WireType.Varint).int32(message.util2);
        /* optional int32 util3 = 4; */
        if (message.util3 !== undefined)
            writer.tag(4, WireType.Varint).int32(message.util3);
        /* optional int32 util4 = 5; */
        if (message.util4 !== undefined)
            writer.tag(5, WireType.Varint).int32(message.util4);
        /* optional int32 util5 = 6; */
        if (message.util5 !== undefined)
            writer.tag(6, WireType.Varint).int32(message.util5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CCSUsrMsg_UtilMsg
 */
export const CCSUsrMsg_UtilMsg = new CCSUsrMsg_UtilMsg$Type();
